// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: group/group.proto

package group

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupClient is the client API for Group service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupClient interface {
	// 创建社区
	CreateCommunity(ctx context.Context, in *CreateCommunityReq, opts ...grpc.CallOption) (*CreateCommunityResp, error)
	// 创建频道
	UpdateCommunityChannel(ctx context.Context, in *CommunityChannelReq, opts ...grpc.CallOption) (*CommunityChannelResp, error)
	// 获取热门的信息频道Banner
	GetHotCommunityBanner(ctx context.Context, in *GetHotCommunityReq, opts ...grpc.CallOption) (*GetHotSpaceBannerResp, error)
	// 查询社区
	SearchCommunity(ctx context.Context, in *SearchCommunityReq, opts ...grpc.CallOption) (*SearchCommunityResp, error)
	// 获取群组下所有的社区
	GetCommunityAllChannel(ctx context.Context, in *CommunityChannelAllListReq, opts ...grpc.CallOption) (*CommunityChannelAllListResp, error)
	// 查询指定channel内容
	GetCommunityChannelByGroupIDAndChannelID(ctx context.Context, in *CommunityChannelInfoReq, opts ...grpc.CallOption) (*CommunityChannelInfoResp, error)
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
	JoinGroup(ctx context.Context, in *JoinGroupReq, opts ...grpc.CallOption) (*JoinGroupResp, error)
	QuitGroup(ctx context.Context, in *QuitGroupReq, opts ...grpc.CallOption) (*QuitGroupResp, error)
	GetGroupsInfo(ctx context.Context, in *GetGroupsInfoReq, opts ...grpc.CallOption) (*GetGroupsInfoResp, error)
	SetGroupInfo(ctx context.Context, in *SetGroupInfoReq, opts ...grpc.CallOption) (*SetGroupInfoResp, error)
	GetGroupApplicationList(ctx context.Context, in *GetGroupApplicationListReq, opts ...grpc.CallOption) (*GetGroupApplicationListResp, error)
	GetUserReqApplicationList(ctx context.Context, in *GetUserReqApplicationListReq, opts ...grpc.CallOption) (*GetUserReqApplicationListResp, error)
	TransferGroupOwner(ctx context.Context, in *TransferGroupOwnerReq, opts ...grpc.CallOption) (*TransferGroupOwnerResp, error)
	GroupApplicationResponse(ctx context.Context, in *GroupApplicationResponseReq, opts ...grpc.CallOption) (*GroupApplicationResponseResp, error)
	GetGroupMemberList(ctx context.Context, in *GetGroupMemberListReq, opts ...grpc.CallOption) (*GetGroupMemberListResp, error)
	GetGroupMembersInfo(ctx context.Context, in *GetGroupMembersInfoReq, opts ...grpc.CallOption) (*GetGroupMembersInfoResp, error)
	KickGroupMember(ctx context.Context, in *KickGroupMemberReq, opts ...grpc.CallOption) (*KickGroupMemberResp, error)
	GetJoinedGroupList(ctx context.Context, in *GetJoinedGroupListReq, opts ...grpc.CallOption) (*GetJoinedGroupListResp, error)
	InviteUserToGroup(ctx context.Context, in *InviteUserToGroupReq, opts ...grpc.CallOption) (*InviteUserToGroupResp, error)
	GetGroupAllMember(ctx context.Context, in *GetGroupAllMemberReq, opts ...grpc.CallOption) (*GetGroupAllMemberResp, error)
	GetGroups(ctx context.Context, in *GetGroupsReq, opts ...grpc.CallOption) (*GetGroupsResp, error)
	GetGroupMembersCMS(ctx context.Context, in *GetGroupMembersCMSReq, opts ...grpc.CallOption) (*GetGroupMembersCMSResp, error)
	DismissGroup(ctx context.Context, in *DismissGroupReq, opts ...grpc.CallOption) (*DismissGroupResp, error)
	MuteGroupMember(ctx context.Context, in *MuteGroupMemberReq, opts ...grpc.CallOption) (*MuteGroupMemberResp, error)
	CancelMuteGroupMember(ctx context.Context, in *CancelMuteGroupMemberReq, opts ...grpc.CallOption) (*CancelMuteGroupMemberResp, error)
	MuteGroup(ctx context.Context, in *MuteGroupReq, opts ...grpc.CallOption) (*MuteGroupResp, error)
	CancelMuteGroup(ctx context.Context, in *CancelMuteGroupReq, opts ...grpc.CallOption) (*CancelMuteGroupResp, error)
	SetGroupMemberNickname(ctx context.Context, in *SetGroupMemberNicknameReq, opts ...grpc.CallOption) (*SetGroupMemberNicknameResp, error)
	GetJoinedSuperGroupList(ctx context.Context, in *GetJoinedSuperGroupListReq, opts ...grpc.CallOption) (*GetJoinedSuperGroupListResp, error)
	GetSuperGroupsInfo(ctx context.Context, in *GetSuperGroupsInfoReq, opts ...grpc.CallOption) (*GetSuperGroupsInfoResp, error)
	SetGroupMemberInfo(ctx context.Context, in *SetGroupMemberInfoReq, opts ...grpc.CallOption) (*SetGroupMemberInfoResp, error)
	GetGroupAbstractInfo(ctx context.Context, in *GetGroupAbstractInfoReq, opts ...grpc.CallOption) (*GetGroupAbstractInfoResp, error)
	CreateSysUserGroup(ctx context.Context, in *CreateSysUserGroupReq, opts ...grpc.CallOption) (*CreateSysUserGroupRes, error)
	// 查询指定人加入的群组
	GetUserJoinedGroupList(ctx context.Context, in *GetJoinedGroupListReq, opts ...grpc.CallOption) (*GetJoinedGroupListResp, error)
	GetGroupHistoryMessageList(ctx context.Context, in *GetHistoryMessageListParamsReq, opts ...grpc.CallOption) (*GetHistoryMessageListParamsResp, error)
	// 获取群内带nft的总人数
	GetGroupMemberHaveNftCount(ctx context.Context, in *GetGroupHaveNftMemberCountReq, opts ...grpc.CallOption) (*GetGroupHaveNftMemberCountResp, error)
	// 查询是否可以领取
	IsCanGetGroupMemberHaveNftCountReword(ctx context.Context, in *GetGroupHaveNftMemberCountReq, opts ...grpc.CallOption) (*GetGroupHaveNftMemberCountResp, error)
	// 社区创建角色
	CreateCommunityRole(ctx context.Context, in *CreateCommunityRoleReq, opts ...grpc.CallOption) (*CreateCommunityRoleResp, error)
	// 查询社区已经创建的角色
	GetCommunityRole(ctx context.Context, in *GetCommunityRoleReq, opts ...grpc.CallOption) (*GetCommunityRoleResp, error)
	GetCommunityRoleDetail(ctx context.Context, in *GetCommunityRoleReqDetail, opts ...grpc.CallOption) (*GetCommunityRoleRespDetail, error)
	// 获取某人拥有哪些nft的标签信息
	GetUserRoleTagInfo(ctx context.Context, in *OperatorCommunityChannelRoleReq, opts ...grpc.CallOption) (*UserRoleTagListRsp, error)
	// 创建推送公告到群里面
	PublishAnnounceMoment(ctx context.Context, in *PublishAnnouncementReq, opts ...grpc.CallOption) (*PublishAnnouncementResp, error)
	// 获取公告列表
	GetPublishAnnounceMomentList(ctx context.Context, in *GetPublishAnnouncementReq, opts ...grpc.CallOption) (*GetPublishAnnouncementResp, error)
	// 获取SpaceList 一下4个函数的目的是为了 展示空间页面的列表
	GetPublishAnnounceMomentListWithIdo(ctx context.Context, in *GetPublishAnnouncementWithIdoReq, opts ...grpc.CallOption) (*GetPersonalPublishAnnouncementWithIdoResp, error)
	// 获取SpaceList 个人Push界面的邮件 一下4个函数的目的是为了 展示空间页面的列表
	GetPersonalPublishAnnounceMomentListWithIdo(ctx context.Context, in *GetPublishAnnouncementWithIdoReq, opts ...grpc.CallOption) (*GetPersonalPublishAnnouncementWithIdoResp, error)
	// 获取热门的信息频道Banner
	GetHotCommunityBannerAnnouncementList(ctx context.Context, in *GetHotCommunityReq, opts ...grpc.CallOption) (*GetPersonalPublishAnnouncementWithIdoResp, error)
	InputSpaceArticleList(ctx context.Context, in *PutSpaceArticleID, opts ...grpc.CallOption) (*SpaceArticleIDResp, error)
	PinSpaceArticleList(ctx context.Context, in *PinSpaceArticleID, opts ...grpc.CallOption) (*SpaceArticleIDResp, error)
	DelSpaceArticleList(ctx context.Context, in *DelSpaceArticleID, opts ...grpc.CallOption) (*SpaceArticleIDResp, error)
	// 综合查询
	ColligateSearch(ctx context.Context, in *ColligateSearchReq, opts ...grpc.CallOption) (*ColligateSearchResp, error)
	GetHotSpace(ctx context.Context, in *GetHotSpaceReq, opts ...grpc.CallOption) (*GetHotSpaceResp, error)
	GetMyFollowingSpace(ctx context.Context, in *GetHotSpaceReq, opts ...grpc.CallOption) (*GetHotSpaceResp, error)
	CreatePushSpaceArticelOrder(ctx context.Context, in *CreatePushSpaceArticelOrderReq, opts ...grpc.CallOption) (*CreatePushSpaceArticelOrderResp, error)
	GlobalPushSpaceArticle(ctx context.Context, in *GlobalPushSpaceArticleReq, opts ...grpc.CallOption) (*GlobalPushSpaceArticleResp, error)
}

type groupClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupClient(cc grpc.ClientConnInterface) GroupClient {
	return &groupClient{cc}
}

func (c *groupClient) CreateCommunity(ctx context.Context, in *CreateCommunityReq, opts ...grpc.CallOption) (*CreateCommunityResp, error) {
	out := new(CreateCommunityResp)
	err := c.cc.Invoke(ctx, "/group.group/createCommunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) UpdateCommunityChannel(ctx context.Context, in *CommunityChannelReq, opts ...grpc.CallOption) (*CommunityChannelResp, error) {
	out := new(CommunityChannelResp)
	err := c.cc.Invoke(ctx, "/group.group/UpdateCommunityChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetHotCommunityBanner(ctx context.Context, in *GetHotCommunityReq, opts ...grpc.CallOption) (*GetHotSpaceBannerResp, error) {
	out := new(GetHotSpaceBannerResp)
	err := c.cc.Invoke(ctx, "/group.group/getHotCommunityBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SearchCommunity(ctx context.Context, in *SearchCommunityReq, opts ...grpc.CallOption) (*SearchCommunityResp, error) {
	out := new(SearchCommunityResp)
	err := c.cc.Invoke(ctx, "/group.group/searchCommunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetCommunityAllChannel(ctx context.Context, in *CommunityChannelAllListReq, opts ...grpc.CallOption) (*CommunityChannelAllListResp, error) {
	out := new(CommunityChannelAllListResp)
	err := c.cc.Invoke(ctx, "/group.group/getCommunityAllChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetCommunityChannelByGroupIDAndChannelID(ctx context.Context, in *CommunityChannelInfoReq, opts ...grpc.CallOption) (*CommunityChannelInfoResp, error) {
	out := new(CommunityChannelInfoResp)
	err := c.cc.Invoke(ctx, "/group.group/getCommunityChannelByGroupIDAndChannelID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	out := new(CreateGroupResp)
	err := c.cc.Invoke(ctx, "/group.group/createGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) JoinGroup(ctx context.Context, in *JoinGroupReq, opts ...grpc.CallOption) (*JoinGroupResp, error) {
	out := new(JoinGroupResp)
	err := c.cc.Invoke(ctx, "/group.group/joinGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) QuitGroup(ctx context.Context, in *QuitGroupReq, opts ...grpc.CallOption) (*QuitGroupResp, error) {
	out := new(QuitGroupResp)
	err := c.cc.Invoke(ctx, "/group.group/quitGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupsInfo(ctx context.Context, in *GetGroupsInfoReq, opts ...grpc.CallOption) (*GetGroupsInfoResp, error) {
	out := new(GetGroupsInfoResp)
	err := c.cc.Invoke(ctx, "/group.group/getGroupsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SetGroupInfo(ctx context.Context, in *SetGroupInfoReq, opts ...grpc.CallOption) (*SetGroupInfoResp, error) {
	out := new(SetGroupInfoResp)
	err := c.cc.Invoke(ctx, "/group.group/setGroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupApplicationList(ctx context.Context, in *GetGroupApplicationListReq, opts ...grpc.CallOption) (*GetGroupApplicationListResp, error) {
	out := new(GetGroupApplicationListResp)
	err := c.cc.Invoke(ctx, "/group.group/getGroupApplicationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetUserReqApplicationList(ctx context.Context, in *GetUserReqApplicationListReq, opts ...grpc.CallOption) (*GetUserReqApplicationListResp, error) {
	out := new(GetUserReqApplicationListResp)
	err := c.cc.Invoke(ctx, "/group.group/getUserReqApplicationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) TransferGroupOwner(ctx context.Context, in *TransferGroupOwnerReq, opts ...grpc.CallOption) (*TransferGroupOwnerResp, error) {
	out := new(TransferGroupOwnerResp)
	err := c.cc.Invoke(ctx, "/group.group/transferGroupOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GroupApplicationResponse(ctx context.Context, in *GroupApplicationResponseReq, opts ...grpc.CallOption) (*GroupApplicationResponseResp, error) {
	out := new(GroupApplicationResponseResp)
	err := c.cc.Invoke(ctx, "/group.group/groupApplicationResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupMemberList(ctx context.Context, in *GetGroupMemberListReq, opts ...grpc.CallOption) (*GetGroupMemberListResp, error) {
	out := new(GetGroupMemberListResp)
	err := c.cc.Invoke(ctx, "/group.group/getGroupMemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupMembersInfo(ctx context.Context, in *GetGroupMembersInfoReq, opts ...grpc.CallOption) (*GetGroupMembersInfoResp, error) {
	out := new(GetGroupMembersInfoResp)
	err := c.cc.Invoke(ctx, "/group.group/getGroupMembersInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) KickGroupMember(ctx context.Context, in *KickGroupMemberReq, opts ...grpc.CallOption) (*KickGroupMemberResp, error) {
	out := new(KickGroupMemberResp)
	err := c.cc.Invoke(ctx, "/group.group/kickGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetJoinedGroupList(ctx context.Context, in *GetJoinedGroupListReq, opts ...grpc.CallOption) (*GetJoinedGroupListResp, error) {
	out := new(GetJoinedGroupListResp)
	err := c.cc.Invoke(ctx, "/group.group/getJoinedGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) InviteUserToGroup(ctx context.Context, in *InviteUserToGroupReq, opts ...grpc.CallOption) (*InviteUserToGroupResp, error) {
	out := new(InviteUserToGroupResp)
	err := c.cc.Invoke(ctx, "/group.group/inviteUserToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupAllMember(ctx context.Context, in *GetGroupAllMemberReq, opts ...grpc.CallOption) (*GetGroupAllMemberResp, error) {
	out := new(GetGroupAllMemberResp)
	err := c.cc.Invoke(ctx, "/group.group/getGroupAllMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroups(ctx context.Context, in *GetGroupsReq, opts ...grpc.CallOption) (*GetGroupsResp, error) {
	out := new(GetGroupsResp)
	err := c.cc.Invoke(ctx, "/group.group/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupMembersCMS(ctx context.Context, in *GetGroupMembersCMSReq, opts ...grpc.CallOption) (*GetGroupMembersCMSResp, error) {
	out := new(GetGroupMembersCMSResp)
	err := c.cc.Invoke(ctx, "/group.group/GetGroupMembersCMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) DismissGroup(ctx context.Context, in *DismissGroupReq, opts ...grpc.CallOption) (*DismissGroupResp, error) {
	out := new(DismissGroupResp)
	err := c.cc.Invoke(ctx, "/group.group/DismissGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) MuteGroupMember(ctx context.Context, in *MuteGroupMemberReq, opts ...grpc.CallOption) (*MuteGroupMemberResp, error) {
	out := new(MuteGroupMemberResp)
	err := c.cc.Invoke(ctx, "/group.group/MuteGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) CancelMuteGroupMember(ctx context.Context, in *CancelMuteGroupMemberReq, opts ...grpc.CallOption) (*CancelMuteGroupMemberResp, error) {
	out := new(CancelMuteGroupMemberResp)
	err := c.cc.Invoke(ctx, "/group.group/CancelMuteGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) MuteGroup(ctx context.Context, in *MuteGroupReq, opts ...grpc.CallOption) (*MuteGroupResp, error) {
	out := new(MuteGroupResp)
	err := c.cc.Invoke(ctx, "/group.group/MuteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) CancelMuteGroup(ctx context.Context, in *CancelMuteGroupReq, opts ...grpc.CallOption) (*CancelMuteGroupResp, error) {
	out := new(CancelMuteGroupResp)
	err := c.cc.Invoke(ctx, "/group.group/CancelMuteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SetGroupMemberNickname(ctx context.Context, in *SetGroupMemberNicknameReq, opts ...grpc.CallOption) (*SetGroupMemberNicknameResp, error) {
	out := new(SetGroupMemberNicknameResp)
	err := c.cc.Invoke(ctx, "/group.group/SetGroupMemberNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetJoinedSuperGroupList(ctx context.Context, in *GetJoinedSuperGroupListReq, opts ...grpc.CallOption) (*GetJoinedSuperGroupListResp, error) {
	out := new(GetJoinedSuperGroupListResp)
	err := c.cc.Invoke(ctx, "/group.group/GetJoinedSuperGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetSuperGroupsInfo(ctx context.Context, in *GetSuperGroupsInfoReq, opts ...grpc.CallOption) (*GetSuperGroupsInfoResp, error) {
	out := new(GetSuperGroupsInfoResp)
	err := c.cc.Invoke(ctx, "/group.group/GetSuperGroupsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SetGroupMemberInfo(ctx context.Context, in *SetGroupMemberInfoReq, opts ...grpc.CallOption) (*SetGroupMemberInfoResp, error) {
	out := new(SetGroupMemberInfoResp)
	err := c.cc.Invoke(ctx, "/group.group/SetGroupMemberInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupAbstractInfo(ctx context.Context, in *GetGroupAbstractInfoReq, opts ...grpc.CallOption) (*GetGroupAbstractInfoResp, error) {
	out := new(GetGroupAbstractInfoResp)
	err := c.cc.Invoke(ctx, "/group.group/GetGroupAbstractInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) CreateSysUserGroup(ctx context.Context, in *CreateSysUserGroupReq, opts ...grpc.CallOption) (*CreateSysUserGroupRes, error) {
	out := new(CreateSysUserGroupRes)
	err := c.cc.Invoke(ctx, "/group.group/CreateSysUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetUserJoinedGroupList(ctx context.Context, in *GetJoinedGroupListReq, opts ...grpc.CallOption) (*GetJoinedGroupListResp, error) {
	out := new(GetJoinedGroupListResp)
	err := c.cc.Invoke(ctx, "/group.group/GetUserJoinedGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupHistoryMessageList(ctx context.Context, in *GetHistoryMessageListParamsReq, opts ...grpc.CallOption) (*GetHistoryMessageListParamsResp, error) {
	out := new(GetHistoryMessageListParamsResp)
	err := c.cc.Invoke(ctx, "/group.group/GetGroupHistoryMessageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupMemberHaveNftCount(ctx context.Context, in *GetGroupHaveNftMemberCountReq, opts ...grpc.CallOption) (*GetGroupHaveNftMemberCountResp, error) {
	out := new(GetGroupHaveNftMemberCountResp)
	err := c.cc.Invoke(ctx, "/group.group/GetGroupMemberHaveNftCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) IsCanGetGroupMemberHaveNftCountReword(ctx context.Context, in *GetGroupHaveNftMemberCountReq, opts ...grpc.CallOption) (*GetGroupHaveNftMemberCountResp, error) {
	out := new(GetGroupHaveNftMemberCountResp)
	err := c.cc.Invoke(ctx, "/group.group/IsCanGetGroupMemberHaveNftCountReword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) CreateCommunityRole(ctx context.Context, in *CreateCommunityRoleReq, opts ...grpc.CallOption) (*CreateCommunityRoleResp, error) {
	out := new(CreateCommunityRoleResp)
	err := c.cc.Invoke(ctx, "/group.group/CreateCommunityRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetCommunityRole(ctx context.Context, in *GetCommunityRoleReq, opts ...grpc.CallOption) (*GetCommunityRoleResp, error) {
	out := new(GetCommunityRoleResp)
	err := c.cc.Invoke(ctx, "/group.group/GetCommunityRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetCommunityRoleDetail(ctx context.Context, in *GetCommunityRoleReqDetail, opts ...grpc.CallOption) (*GetCommunityRoleRespDetail, error) {
	out := new(GetCommunityRoleRespDetail)
	err := c.cc.Invoke(ctx, "/group.group/GetCommunityRoleDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetUserRoleTagInfo(ctx context.Context, in *OperatorCommunityChannelRoleReq, opts ...grpc.CallOption) (*UserRoleTagListRsp, error) {
	out := new(UserRoleTagListRsp)
	err := c.cc.Invoke(ctx, "/group.group/GetUserRoleTagInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) PublishAnnounceMoment(ctx context.Context, in *PublishAnnouncementReq, opts ...grpc.CallOption) (*PublishAnnouncementResp, error) {
	out := new(PublishAnnouncementResp)
	err := c.cc.Invoke(ctx, "/group.group/PublishAnnounceMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetPublishAnnounceMomentList(ctx context.Context, in *GetPublishAnnouncementReq, opts ...grpc.CallOption) (*GetPublishAnnouncementResp, error) {
	out := new(GetPublishAnnouncementResp)
	err := c.cc.Invoke(ctx, "/group.group/GetPublishAnnounceMomentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetPublishAnnounceMomentListWithIdo(ctx context.Context, in *GetPublishAnnouncementWithIdoReq, opts ...grpc.CallOption) (*GetPersonalPublishAnnouncementWithIdoResp, error) {
	out := new(GetPersonalPublishAnnouncementWithIdoResp)
	err := c.cc.Invoke(ctx, "/group.group/GetPublishAnnounceMomentListWithIdo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetPersonalPublishAnnounceMomentListWithIdo(ctx context.Context, in *GetPublishAnnouncementWithIdoReq, opts ...grpc.CallOption) (*GetPersonalPublishAnnouncementWithIdoResp, error) {
	out := new(GetPersonalPublishAnnouncementWithIdoResp)
	err := c.cc.Invoke(ctx, "/group.group/GetPersonalPublishAnnounceMomentListWithIdo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetHotCommunityBannerAnnouncementList(ctx context.Context, in *GetHotCommunityReq, opts ...grpc.CallOption) (*GetPersonalPublishAnnouncementWithIdoResp, error) {
	out := new(GetPersonalPublishAnnouncementWithIdoResp)
	err := c.cc.Invoke(ctx, "/group.group/GetHotCommunityBannerAnnouncementList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) InputSpaceArticleList(ctx context.Context, in *PutSpaceArticleID, opts ...grpc.CallOption) (*SpaceArticleIDResp, error) {
	out := new(SpaceArticleIDResp)
	err := c.cc.Invoke(ctx, "/group.group/InputSpaceArticleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) PinSpaceArticleList(ctx context.Context, in *PinSpaceArticleID, opts ...grpc.CallOption) (*SpaceArticleIDResp, error) {
	out := new(SpaceArticleIDResp)
	err := c.cc.Invoke(ctx, "/group.group/PinSpaceArticleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) DelSpaceArticleList(ctx context.Context, in *DelSpaceArticleID, opts ...grpc.CallOption) (*SpaceArticleIDResp, error) {
	out := new(SpaceArticleIDResp)
	err := c.cc.Invoke(ctx, "/group.group/DelSpaceArticleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ColligateSearch(ctx context.Context, in *ColligateSearchReq, opts ...grpc.CallOption) (*ColligateSearchResp, error) {
	out := new(ColligateSearchResp)
	err := c.cc.Invoke(ctx, "/group.group/ColligateSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetHotSpace(ctx context.Context, in *GetHotSpaceReq, opts ...grpc.CallOption) (*GetHotSpaceResp, error) {
	out := new(GetHotSpaceResp)
	err := c.cc.Invoke(ctx, "/group.group/GetHotSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetMyFollowingSpace(ctx context.Context, in *GetHotSpaceReq, opts ...grpc.CallOption) (*GetHotSpaceResp, error) {
	out := new(GetHotSpaceResp)
	err := c.cc.Invoke(ctx, "/group.group/GetMyFollowingSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) CreatePushSpaceArticelOrder(ctx context.Context, in *CreatePushSpaceArticelOrderReq, opts ...grpc.CallOption) (*CreatePushSpaceArticelOrderResp, error) {
	out := new(CreatePushSpaceArticelOrderResp)
	err := c.cc.Invoke(ctx, "/group.group/CreatePushSpaceArticelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GlobalPushSpaceArticle(ctx context.Context, in *GlobalPushSpaceArticleReq, opts ...grpc.CallOption) (*GlobalPushSpaceArticleResp, error) {
	out := new(GlobalPushSpaceArticleResp)
	err := c.cc.Invoke(ctx, "/group.group/GlobalPushSpaceArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServer is the server API for Group service.
// All implementations should embed UnimplementedGroupServer
// for forward compatibility
type GroupServer interface {
	// 创建社区
	CreateCommunity(context.Context, *CreateCommunityReq) (*CreateCommunityResp, error)
	// 创建频道
	UpdateCommunityChannel(context.Context, *CommunityChannelReq) (*CommunityChannelResp, error)
	// 获取热门的信息频道Banner
	GetHotCommunityBanner(context.Context, *GetHotCommunityReq) (*GetHotSpaceBannerResp, error)
	// 查询社区
	SearchCommunity(context.Context, *SearchCommunityReq) (*SearchCommunityResp, error)
	// 获取群组下所有的社区
	GetCommunityAllChannel(context.Context, *CommunityChannelAllListReq) (*CommunityChannelAllListResp, error)
	// 查询指定channel内容
	GetCommunityChannelByGroupIDAndChannelID(context.Context, *CommunityChannelInfoReq) (*CommunityChannelInfoResp, error)
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error)
	JoinGroup(context.Context, *JoinGroupReq) (*JoinGroupResp, error)
	QuitGroup(context.Context, *QuitGroupReq) (*QuitGroupResp, error)
	GetGroupsInfo(context.Context, *GetGroupsInfoReq) (*GetGroupsInfoResp, error)
	SetGroupInfo(context.Context, *SetGroupInfoReq) (*SetGroupInfoResp, error)
	GetGroupApplicationList(context.Context, *GetGroupApplicationListReq) (*GetGroupApplicationListResp, error)
	GetUserReqApplicationList(context.Context, *GetUserReqApplicationListReq) (*GetUserReqApplicationListResp, error)
	TransferGroupOwner(context.Context, *TransferGroupOwnerReq) (*TransferGroupOwnerResp, error)
	GroupApplicationResponse(context.Context, *GroupApplicationResponseReq) (*GroupApplicationResponseResp, error)
	GetGroupMemberList(context.Context, *GetGroupMemberListReq) (*GetGroupMemberListResp, error)
	GetGroupMembersInfo(context.Context, *GetGroupMembersInfoReq) (*GetGroupMembersInfoResp, error)
	KickGroupMember(context.Context, *KickGroupMemberReq) (*KickGroupMemberResp, error)
	GetJoinedGroupList(context.Context, *GetJoinedGroupListReq) (*GetJoinedGroupListResp, error)
	InviteUserToGroup(context.Context, *InviteUserToGroupReq) (*InviteUserToGroupResp, error)
	GetGroupAllMember(context.Context, *GetGroupAllMemberReq) (*GetGroupAllMemberResp, error)
	GetGroups(context.Context, *GetGroupsReq) (*GetGroupsResp, error)
	GetGroupMembersCMS(context.Context, *GetGroupMembersCMSReq) (*GetGroupMembersCMSResp, error)
	DismissGroup(context.Context, *DismissGroupReq) (*DismissGroupResp, error)
	MuteGroupMember(context.Context, *MuteGroupMemberReq) (*MuteGroupMemberResp, error)
	CancelMuteGroupMember(context.Context, *CancelMuteGroupMemberReq) (*CancelMuteGroupMemberResp, error)
	MuteGroup(context.Context, *MuteGroupReq) (*MuteGroupResp, error)
	CancelMuteGroup(context.Context, *CancelMuteGroupReq) (*CancelMuteGroupResp, error)
	SetGroupMemberNickname(context.Context, *SetGroupMemberNicknameReq) (*SetGroupMemberNicknameResp, error)
	GetJoinedSuperGroupList(context.Context, *GetJoinedSuperGroupListReq) (*GetJoinedSuperGroupListResp, error)
	GetSuperGroupsInfo(context.Context, *GetSuperGroupsInfoReq) (*GetSuperGroupsInfoResp, error)
	SetGroupMemberInfo(context.Context, *SetGroupMemberInfoReq) (*SetGroupMemberInfoResp, error)
	GetGroupAbstractInfo(context.Context, *GetGroupAbstractInfoReq) (*GetGroupAbstractInfoResp, error)
	CreateSysUserGroup(context.Context, *CreateSysUserGroupReq) (*CreateSysUserGroupRes, error)
	// 查询指定人加入的群组
	GetUserJoinedGroupList(context.Context, *GetJoinedGroupListReq) (*GetJoinedGroupListResp, error)
	GetGroupHistoryMessageList(context.Context, *GetHistoryMessageListParamsReq) (*GetHistoryMessageListParamsResp, error)
	// 获取群内带nft的总人数
	GetGroupMemberHaveNftCount(context.Context, *GetGroupHaveNftMemberCountReq) (*GetGroupHaveNftMemberCountResp, error)
	// 查询是否可以领取
	IsCanGetGroupMemberHaveNftCountReword(context.Context, *GetGroupHaveNftMemberCountReq) (*GetGroupHaveNftMemberCountResp, error)
	// 社区创建角色
	CreateCommunityRole(context.Context, *CreateCommunityRoleReq) (*CreateCommunityRoleResp, error)
	// 查询社区已经创建的角色
	GetCommunityRole(context.Context, *GetCommunityRoleReq) (*GetCommunityRoleResp, error)
	GetCommunityRoleDetail(context.Context, *GetCommunityRoleReqDetail) (*GetCommunityRoleRespDetail, error)
	// 获取某人拥有哪些nft的标签信息
	GetUserRoleTagInfo(context.Context, *OperatorCommunityChannelRoleReq) (*UserRoleTagListRsp, error)
	// 创建推送公告到群里面
	PublishAnnounceMoment(context.Context, *PublishAnnouncementReq) (*PublishAnnouncementResp, error)
	// 获取公告列表
	GetPublishAnnounceMomentList(context.Context, *GetPublishAnnouncementReq) (*GetPublishAnnouncementResp, error)
	// 获取SpaceList 一下4个函数的目的是为了 展示空间页面的列表
	GetPublishAnnounceMomentListWithIdo(context.Context, *GetPublishAnnouncementWithIdoReq) (*GetPersonalPublishAnnouncementWithIdoResp, error)
	// 获取SpaceList 个人Push界面的邮件 一下4个函数的目的是为了 展示空间页面的列表
	GetPersonalPublishAnnounceMomentListWithIdo(context.Context, *GetPublishAnnouncementWithIdoReq) (*GetPersonalPublishAnnouncementWithIdoResp, error)
	// 获取热门的信息频道Banner
	GetHotCommunityBannerAnnouncementList(context.Context, *GetHotCommunityReq) (*GetPersonalPublishAnnouncementWithIdoResp, error)
	InputSpaceArticleList(context.Context, *PutSpaceArticleID) (*SpaceArticleIDResp, error)
	PinSpaceArticleList(context.Context, *PinSpaceArticleID) (*SpaceArticleIDResp, error)
	DelSpaceArticleList(context.Context, *DelSpaceArticleID) (*SpaceArticleIDResp, error)
	// 综合查询
	ColligateSearch(context.Context, *ColligateSearchReq) (*ColligateSearchResp, error)
	GetHotSpace(context.Context, *GetHotSpaceReq) (*GetHotSpaceResp, error)
	GetMyFollowingSpace(context.Context, *GetHotSpaceReq) (*GetHotSpaceResp, error)
	CreatePushSpaceArticelOrder(context.Context, *CreatePushSpaceArticelOrderReq) (*CreatePushSpaceArticelOrderResp, error)
	GlobalPushSpaceArticle(context.Context, *GlobalPushSpaceArticleReq) (*GlobalPushSpaceArticleResp, error)
}

// UnimplementedGroupServer should be embedded to have forward compatible implementations.
type UnimplementedGroupServer struct {
}

func (UnimplementedGroupServer) CreateCommunity(context.Context, *CreateCommunityReq) (*CreateCommunityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommunity not implemented")
}
func (UnimplementedGroupServer) UpdateCommunityChannel(context.Context, *CommunityChannelReq) (*CommunityChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommunityChannel not implemented")
}
func (UnimplementedGroupServer) GetHotCommunityBanner(context.Context, *GetHotCommunityReq) (*GetHotSpaceBannerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotCommunityBanner not implemented")
}
func (UnimplementedGroupServer) SearchCommunity(context.Context, *SearchCommunityReq) (*SearchCommunityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCommunity not implemented")
}
func (UnimplementedGroupServer) GetCommunityAllChannel(context.Context, *CommunityChannelAllListReq) (*CommunityChannelAllListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityAllChannel not implemented")
}
func (UnimplementedGroupServer) GetCommunityChannelByGroupIDAndChannelID(context.Context, *CommunityChannelInfoReq) (*CommunityChannelInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityChannelByGroupIDAndChannelID not implemented")
}
func (UnimplementedGroupServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupServer) JoinGroup(context.Context, *JoinGroupReq) (*JoinGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedGroupServer) QuitGroup(context.Context, *QuitGroupReq) (*QuitGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitGroup not implemented")
}
func (UnimplementedGroupServer) GetGroupsInfo(context.Context, *GetGroupsInfoReq) (*GetGroupsInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupsInfo not implemented")
}
func (UnimplementedGroupServer) SetGroupInfo(context.Context, *SetGroupInfoReq) (*SetGroupInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupInfo not implemented")
}
func (UnimplementedGroupServer) GetGroupApplicationList(context.Context, *GetGroupApplicationListReq) (*GetGroupApplicationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupApplicationList not implemented")
}
func (UnimplementedGroupServer) GetUserReqApplicationList(context.Context, *GetUserReqApplicationListReq) (*GetUserReqApplicationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserReqApplicationList not implemented")
}
func (UnimplementedGroupServer) TransferGroupOwner(context.Context, *TransferGroupOwnerReq) (*TransferGroupOwnerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferGroupOwner not implemented")
}
func (UnimplementedGroupServer) GroupApplicationResponse(context.Context, *GroupApplicationResponseReq) (*GroupApplicationResponseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupApplicationResponse not implemented")
}
func (UnimplementedGroupServer) GetGroupMemberList(context.Context, *GetGroupMemberListReq) (*GetGroupMemberListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMemberList not implemented")
}
func (UnimplementedGroupServer) GetGroupMembersInfo(context.Context, *GetGroupMembersInfoReq) (*GetGroupMembersInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMembersInfo not implemented")
}
func (UnimplementedGroupServer) KickGroupMember(context.Context, *KickGroupMemberReq) (*KickGroupMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickGroupMember not implemented")
}
func (UnimplementedGroupServer) GetJoinedGroupList(context.Context, *GetJoinedGroupListReq) (*GetJoinedGroupListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJoinedGroupList not implemented")
}
func (UnimplementedGroupServer) InviteUserToGroup(context.Context, *InviteUserToGroupReq) (*InviteUserToGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUserToGroup not implemented")
}
func (UnimplementedGroupServer) GetGroupAllMember(context.Context, *GetGroupAllMemberReq) (*GetGroupAllMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupAllMember not implemented")
}
func (UnimplementedGroupServer) GetGroups(context.Context, *GetGroupsReq) (*GetGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedGroupServer) GetGroupMembersCMS(context.Context, *GetGroupMembersCMSReq) (*GetGroupMembersCMSResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMembersCMS not implemented")
}
func (UnimplementedGroupServer) DismissGroup(context.Context, *DismissGroupReq) (*DismissGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DismissGroup not implemented")
}
func (UnimplementedGroupServer) MuteGroupMember(context.Context, *MuteGroupMemberReq) (*MuteGroupMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteGroupMember not implemented")
}
func (UnimplementedGroupServer) CancelMuteGroupMember(context.Context, *CancelMuteGroupMemberReq) (*CancelMuteGroupMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelMuteGroupMember not implemented")
}
func (UnimplementedGroupServer) MuteGroup(context.Context, *MuteGroupReq) (*MuteGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteGroup not implemented")
}
func (UnimplementedGroupServer) CancelMuteGroup(context.Context, *CancelMuteGroupReq) (*CancelMuteGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelMuteGroup not implemented")
}
func (UnimplementedGroupServer) SetGroupMemberNickname(context.Context, *SetGroupMemberNicknameReq) (*SetGroupMemberNicknameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupMemberNickname not implemented")
}
func (UnimplementedGroupServer) GetJoinedSuperGroupList(context.Context, *GetJoinedSuperGroupListReq) (*GetJoinedSuperGroupListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJoinedSuperGroupList not implemented")
}
func (UnimplementedGroupServer) GetSuperGroupsInfo(context.Context, *GetSuperGroupsInfoReq) (*GetSuperGroupsInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuperGroupsInfo not implemented")
}
func (UnimplementedGroupServer) SetGroupMemberInfo(context.Context, *SetGroupMemberInfoReq) (*SetGroupMemberInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupMemberInfo not implemented")
}
func (UnimplementedGroupServer) GetGroupAbstractInfo(context.Context, *GetGroupAbstractInfoReq) (*GetGroupAbstractInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupAbstractInfo not implemented")
}
func (UnimplementedGroupServer) CreateSysUserGroup(context.Context, *CreateSysUserGroupReq) (*CreateSysUserGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSysUserGroup not implemented")
}
func (UnimplementedGroupServer) GetUserJoinedGroupList(context.Context, *GetJoinedGroupListReq) (*GetJoinedGroupListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserJoinedGroupList not implemented")
}
func (UnimplementedGroupServer) GetGroupHistoryMessageList(context.Context, *GetHistoryMessageListParamsReq) (*GetHistoryMessageListParamsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupHistoryMessageList not implemented")
}
func (UnimplementedGroupServer) GetGroupMemberHaveNftCount(context.Context, *GetGroupHaveNftMemberCountReq) (*GetGroupHaveNftMemberCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMemberHaveNftCount not implemented")
}
func (UnimplementedGroupServer) IsCanGetGroupMemberHaveNftCountReword(context.Context, *GetGroupHaveNftMemberCountReq) (*GetGroupHaveNftMemberCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCanGetGroupMemberHaveNftCountReword not implemented")
}
func (UnimplementedGroupServer) CreateCommunityRole(context.Context, *CreateCommunityRoleReq) (*CreateCommunityRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommunityRole not implemented")
}
func (UnimplementedGroupServer) GetCommunityRole(context.Context, *GetCommunityRoleReq) (*GetCommunityRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityRole not implemented")
}
func (UnimplementedGroupServer) GetCommunityRoleDetail(context.Context, *GetCommunityRoleReqDetail) (*GetCommunityRoleRespDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityRoleDetail not implemented")
}
func (UnimplementedGroupServer) GetUserRoleTagInfo(context.Context, *OperatorCommunityChannelRoleReq) (*UserRoleTagListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoleTagInfo not implemented")
}
func (UnimplementedGroupServer) PublishAnnounceMoment(context.Context, *PublishAnnouncementReq) (*PublishAnnouncementResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishAnnounceMoment not implemented")
}
func (UnimplementedGroupServer) GetPublishAnnounceMomentList(context.Context, *GetPublishAnnouncementReq) (*GetPublishAnnouncementResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishAnnounceMomentList not implemented")
}
func (UnimplementedGroupServer) GetPublishAnnounceMomentListWithIdo(context.Context, *GetPublishAnnouncementWithIdoReq) (*GetPersonalPublishAnnouncementWithIdoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishAnnounceMomentListWithIdo not implemented")
}
func (UnimplementedGroupServer) GetPersonalPublishAnnounceMomentListWithIdo(context.Context, *GetPublishAnnouncementWithIdoReq) (*GetPersonalPublishAnnouncementWithIdoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalPublishAnnounceMomentListWithIdo not implemented")
}
func (UnimplementedGroupServer) GetHotCommunityBannerAnnouncementList(context.Context, *GetHotCommunityReq) (*GetPersonalPublishAnnouncementWithIdoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotCommunityBannerAnnouncementList not implemented")
}
func (UnimplementedGroupServer) InputSpaceArticleList(context.Context, *PutSpaceArticleID) (*SpaceArticleIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InputSpaceArticleList not implemented")
}
func (UnimplementedGroupServer) PinSpaceArticleList(context.Context, *PinSpaceArticleID) (*SpaceArticleIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinSpaceArticleList not implemented")
}
func (UnimplementedGroupServer) DelSpaceArticleList(context.Context, *DelSpaceArticleID) (*SpaceArticleIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSpaceArticleList not implemented")
}
func (UnimplementedGroupServer) ColligateSearch(context.Context, *ColligateSearchReq) (*ColligateSearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColligateSearch not implemented")
}
func (UnimplementedGroupServer) GetHotSpace(context.Context, *GetHotSpaceReq) (*GetHotSpaceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotSpace not implemented")
}
func (UnimplementedGroupServer) GetMyFollowingSpace(context.Context, *GetHotSpaceReq) (*GetHotSpaceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyFollowingSpace not implemented")
}
func (UnimplementedGroupServer) CreatePushSpaceArticelOrder(context.Context, *CreatePushSpaceArticelOrderReq) (*CreatePushSpaceArticelOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePushSpaceArticelOrder not implemented")
}
func (UnimplementedGroupServer) GlobalPushSpaceArticle(context.Context, *GlobalPushSpaceArticleReq) (*GlobalPushSpaceArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalPushSpaceArticle not implemented")
}

// UnsafeGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServer will
// result in compilation errors.
type UnsafeGroupServer interface {
	mustEmbedUnimplementedGroupServer()
}

func RegisterGroupServer(s grpc.ServiceRegistrar, srv GroupServer) {
	s.RegisterService(&Group_ServiceDesc, srv)
}

func _Group_CreateCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommunityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CreateCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/createCommunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CreateCommunity(ctx, req.(*CreateCommunityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_UpdateCommunityChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).UpdateCommunityChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/UpdateCommunityChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).UpdateCommunityChannel(ctx, req.(*CommunityChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetHotCommunityBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotCommunityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetHotCommunityBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/getHotCommunityBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetHotCommunityBanner(ctx, req.(*GetHotCommunityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SearchCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCommunityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SearchCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/searchCommunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SearchCommunity(ctx, req.(*SearchCommunityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetCommunityAllChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityChannelAllListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetCommunityAllChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/getCommunityAllChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetCommunityAllChannel(ctx, req.(*CommunityChannelAllListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetCommunityChannelByGroupIDAndChannelID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityChannelInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetCommunityChannelByGroupIDAndChannelID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/getCommunityChannelByGroupIDAndChannelID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetCommunityChannelByGroupIDAndChannelID(ctx, req.(*CommunityChannelInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/createGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/joinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).JoinGroup(ctx, req.(*JoinGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_QuitGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).QuitGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/quitGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).QuitGroup(ctx, req.(*QuitGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/getGroupsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupsInfo(ctx, req.(*GetGroupsInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SetGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SetGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/setGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SetGroupInfo(ctx, req.(*SetGroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupApplicationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupApplicationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupApplicationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/getGroupApplicationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupApplicationList(ctx, req.(*GetGroupApplicationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetUserReqApplicationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReqApplicationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetUserReqApplicationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/getUserReqApplicationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetUserReqApplicationList(ctx, req.(*GetUserReqApplicationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_TransferGroupOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferGroupOwnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).TransferGroupOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/transferGroupOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).TransferGroupOwner(ctx, req.(*TransferGroupOwnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GroupApplicationResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupApplicationResponseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GroupApplicationResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/groupApplicationResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GroupApplicationResponse(ctx, req.(*GroupApplicationResponseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/getGroupMemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupMemberList(ctx, req.(*GetGroupMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupMembersInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMembersInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupMembersInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/getGroupMembersInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupMembersInfo(ctx, req.(*GetGroupMembersInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_KickGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).KickGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/kickGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).KickGroupMember(ctx, req.(*KickGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetJoinedGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJoinedGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetJoinedGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/getJoinedGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetJoinedGroupList(ctx, req.(*GetJoinedGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_InviteUserToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserToGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).InviteUserToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/inviteUserToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).InviteUserToGroup(ctx, req.(*InviteUserToGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupAllMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupAllMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupAllMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/getGroupAllMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupAllMember(ctx, req.(*GetGroupAllMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroups(ctx, req.(*GetGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupMembersCMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMembersCMSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupMembersCMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetGroupMembersCMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupMembersCMS(ctx, req.(*GetGroupMembersCMSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_DismissGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DismissGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).DismissGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/DismissGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).DismissGroup(ctx, req.(*DismissGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_MuteGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).MuteGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/MuteGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).MuteGroupMember(ctx, req.(*MuteGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_CancelMuteGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMuteGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CancelMuteGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/CancelMuteGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CancelMuteGroupMember(ctx, req.(*CancelMuteGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_MuteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).MuteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/MuteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).MuteGroup(ctx, req.(*MuteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_CancelMuteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMuteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CancelMuteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/CancelMuteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CancelMuteGroup(ctx, req.(*CancelMuteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SetGroupMemberNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupMemberNicknameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SetGroupMemberNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/SetGroupMemberNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SetGroupMemberNickname(ctx, req.(*SetGroupMemberNicknameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetJoinedSuperGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJoinedSuperGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetJoinedSuperGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetJoinedSuperGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetJoinedSuperGroupList(ctx, req.(*GetJoinedSuperGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetSuperGroupsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuperGroupsInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetSuperGroupsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetSuperGroupsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetSuperGroupsInfo(ctx, req.(*GetSuperGroupsInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SetGroupMemberInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupMemberInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SetGroupMemberInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/SetGroupMemberInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SetGroupMemberInfo(ctx, req.(*SetGroupMemberInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupAbstractInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupAbstractInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupAbstractInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetGroupAbstractInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupAbstractInfo(ctx, req.(*GetGroupAbstractInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_CreateSysUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSysUserGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CreateSysUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/CreateSysUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CreateSysUserGroup(ctx, req.(*CreateSysUserGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetUserJoinedGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJoinedGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetUserJoinedGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetUserJoinedGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetUserJoinedGroupList(ctx, req.(*GetJoinedGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupHistoryMessageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryMessageListParamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupHistoryMessageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetGroupHistoryMessageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupHistoryMessageList(ctx, req.(*GetHistoryMessageListParamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupMemberHaveNftCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupHaveNftMemberCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupMemberHaveNftCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetGroupMemberHaveNftCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupMemberHaveNftCount(ctx, req.(*GetGroupHaveNftMemberCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_IsCanGetGroupMemberHaveNftCountReword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupHaveNftMemberCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).IsCanGetGroupMemberHaveNftCountReword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/IsCanGetGroupMemberHaveNftCountReword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).IsCanGetGroupMemberHaveNftCountReword(ctx, req.(*GetGroupHaveNftMemberCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_CreateCommunityRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommunityRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CreateCommunityRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/CreateCommunityRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CreateCommunityRole(ctx, req.(*CreateCommunityRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetCommunityRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetCommunityRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetCommunityRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetCommunityRole(ctx, req.(*GetCommunityRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetCommunityRoleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityRoleReqDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetCommunityRoleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetCommunityRoleDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetCommunityRoleDetail(ctx, req.(*GetCommunityRoleReqDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetUserRoleTagInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorCommunityChannelRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetUserRoleTagInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetUserRoleTagInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetUserRoleTagInfo(ctx, req.(*OperatorCommunityChannelRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_PublishAnnounceMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishAnnouncementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).PublishAnnounceMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/PublishAnnounceMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).PublishAnnounceMoment(ctx, req.(*PublishAnnouncementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetPublishAnnounceMomentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublishAnnouncementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetPublishAnnounceMomentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetPublishAnnounceMomentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetPublishAnnounceMomentList(ctx, req.(*GetPublishAnnouncementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetPublishAnnounceMomentListWithIdo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublishAnnouncementWithIdoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetPublishAnnounceMomentListWithIdo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetPublishAnnounceMomentListWithIdo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetPublishAnnounceMomentListWithIdo(ctx, req.(*GetPublishAnnouncementWithIdoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetPersonalPublishAnnounceMomentListWithIdo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublishAnnouncementWithIdoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetPersonalPublishAnnounceMomentListWithIdo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetPersonalPublishAnnounceMomentListWithIdo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetPersonalPublishAnnounceMomentListWithIdo(ctx, req.(*GetPublishAnnouncementWithIdoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetHotCommunityBannerAnnouncementList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotCommunityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetHotCommunityBannerAnnouncementList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetHotCommunityBannerAnnouncementList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetHotCommunityBannerAnnouncementList(ctx, req.(*GetHotCommunityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_InputSpaceArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutSpaceArticleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).InputSpaceArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/InputSpaceArticleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).InputSpaceArticleList(ctx, req.(*PutSpaceArticleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_PinSpaceArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinSpaceArticleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).PinSpaceArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/PinSpaceArticleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).PinSpaceArticleList(ctx, req.(*PinSpaceArticleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_DelSpaceArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSpaceArticleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).DelSpaceArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/DelSpaceArticleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).DelSpaceArticleList(ctx, req.(*DelSpaceArticleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ColligateSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColligateSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ColligateSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/ColligateSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ColligateSearch(ctx, req.(*ColligateSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetHotSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetHotSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetHotSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetHotSpace(ctx, req.(*GetHotSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetMyFollowingSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetMyFollowingSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GetMyFollowingSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetMyFollowingSpace(ctx, req.(*GetHotSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_CreatePushSpaceArticelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePushSpaceArticelOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CreatePushSpaceArticelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/CreatePushSpaceArticelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CreatePushSpaceArticelOrder(ctx, req.(*CreatePushSpaceArticelOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GlobalPushSpaceArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalPushSpaceArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GlobalPushSpaceArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.group/GlobalPushSpaceArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GlobalPushSpaceArticle(ctx, req.(*GlobalPushSpaceArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Group_ServiceDesc is the grpc.ServiceDesc for Group service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Group_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "group.group",
	HandlerType: (*GroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createCommunity",
			Handler:    _Group_CreateCommunity_Handler,
		},
		{
			MethodName: "UpdateCommunityChannel",
			Handler:    _Group_UpdateCommunityChannel_Handler,
		},
		{
			MethodName: "getHotCommunityBanner",
			Handler:    _Group_GetHotCommunityBanner_Handler,
		},
		{
			MethodName: "searchCommunity",
			Handler:    _Group_SearchCommunity_Handler,
		},
		{
			MethodName: "getCommunityAllChannel",
			Handler:    _Group_GetCommunityAllChannel_Handler,
		},
		{
			MethodName: "getCommunityChannelByGroupIDAndChannelID",
			Handler:    _Group_GetCommunityChannelByGroupIDAndChannelID_Handler,
		},
		{
			MethodName: "createGroup",
			Handler:    _Group_CreateGroup_Handler,
		},
		{
			MethodName: "joinGroup",
			Handler:    _Group_JoinGroup_Handler,
		},
		{
			MethodName: "quitGroup",
			Handler:    _Group_QuitGroup_Handler,
		},
		{
			MethodName: "getGroupsInfo",
			Handler:    _Group_GetGroupsInfo_Handler,
		},
		{
			MethodName: "setGroupInfo",
			Handler:    _Group_SetGroupInfo_Handler,
		},
		{
			MethodName: "getGroupApplicationList",
			Handler:    _Group_GetGroupApplicationList_Handler,
		},
		{
			MethodName: "getUserReqApplicationList",
			Handler:    _Group_GetUserReqApplicationList_Handler,
		},
		{
			MethodName: "transferGroupOwner",
			Handler:    _Group_TransferGroupOwner_Handler,
		},
		{
			MethodName: "groupApplicationResponse",
			Handler:    _Group_GroupApplicationResponse_Handler,
		},
		{
			MethodName: "getGroupMemberList",
			Handler:    _Group_GetGroupMemberList_Handler,
		},
		{
			MethodName: "getGroupMembersInfo",
			Handler:    _Group_GetGroupMembersInfo_Handler,
		},
		{
			MethodName: "kickGroupMember",
			Handler:    _Group_KickGroupMember_Handler,
		},
		{
			MethodName: "getJoinedGroupList",
			Handler:    _Group_GetJoinedGroupList_Handler,
		},
		{
			MethodName: "inviteUserToGroup",
			Handler:    _Group_InviteUserToGroup_Handler,
		},
		{
			MethodName: "getGroupAllMember",
			Handler:    _Group_GetGroupAllMember_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _Group_GetGroups_Handler,
		},
		{
			MethodName: "GetGroupMembersCMS",
			Handler:    _Group_GetGroupMembersCMS_Handler,
		},
		{
			MethodName: "DismissGroup",
			Handler:    _Group_DismissGroup_Handler,
		},
		{
			MethodName: "MuteGroupMember",
			Handler:    _Group_MuteGroupMember_Handler,
		},
		{
			MethodName: "CancelMuteGroupMember",
			Handler:    _Group_CancelMuteGroupMember_Handler,
		},
		{
			MethodName: "MuteGroup",
			Handler:    _Group_MuteGroup_Handler,
		},
		{
			MethodName: "CancelMuteGroup",
			Handler:    _Group_CancelMuteGroup_Handler,
		},
		{
			MethodName: "SetGroupMemberNickname",
			Handler:    _Group_SetGroupMemberNickname_Handler,
		},
		{
			MethodName: "GetJoinedSuperGroupList",
			Handler:    _Group_GetJoinedSuperGroupList_Handler,
		},
		{
			MethodName: "GetSuperGroupsInfo",
			Handler:    _Group_GetSuperGroupsInfo_Handler,
		},
		{
			MethodName: "SetGroupMemberInfo",
			Handler:    _Group_SetGroupMemberInfo_Handler,
		},
		{
			MethodName: "GetGroupAbstractInfo",
			Handler:    _Group_GetGroupAbstractInfo_Handler,
		},
		{
			MethodName: "CreateSysUserGroup",
			Handler:    _Group_CreateSysUserGroup_Handler,
		},
		{
			MethodName: "GetUserJoinedGroupList",
			Handler:    _Group_GetUserJoinedGroupList_Handler,
		},
		{
			MethodName: "GetGroupHistoryMessageList",
			Handler:    _Group_GetGroupHistoryMessageList_Handler,
		},
		{
			MethodName: "GetGroupMemberHaveNftCount",
			Handler:    _Group_GetGroupMemberHaveNftCount_Handler,
		},
		{
			MethodName: "IsCanGetGroupMemberHaveNftCountReword",
			Handler:    _Group_IsCanGetGroupMemberHaveNftCountReword_Handler,
		},
		{
			MethodName: "CreateCommunityRole",
			Handler:    _Group_CreateCommunityRole_Handler,
		},
		{
			MethodName: "GetCommunityRole",
			Handler:    _Group_GetCommunityRole_Handler,
		},
		{
			MethodName: "GetCommunityRoleDetail",
			Handler:    _Group_GetCommunityRoleDetail_Handler,
		},
		{
			MethodName: "GetUserRoleTagInfo",
			Handler:    _Group_GetUserRoleTagInfo_Handler,
		},
		{
			MethodName: "PublishAnnounceMoment",
			Handler:    _Group_PublishAnnounceMoment_Handler,
		},
		{
			MethodName: "GetPublishAnnounceMomentList",
			Handler:    _Group_GetPublishAnnounceMomentList_Handler,
		},
		{
			MethodName: "GetPublishAnnounceMomentListWithIdo",
			Handler:    _Group_GetPublishAnnounceMomentListWithIdo_Handler,
		},
		{
			MethodName: "GetPersonalPublishAnnounceMomentListWithIdo",
			Handler:    _Group_GetPersonalPublishAnnounceMomentListWithIdo_Handler,
		},
		{
			MethodName: "GetHotCommunityBannerAnnouncementList",
			Handler:    _Group_GetHotCommunityBannerAnnouncementList_Handler,
		},
		{
			MethodName: "InputSpaceArticleList",
			Handler:    _Group_InputSpaceArticleList_Handler,
		},
		{
			MethodName: "PinSpaceArticleList",
			Handler:    _Group_PinSpaceArticleList_Handler,
		},
		{
			MethodName: "DelSpaceArticleList",
			Handler:    _Group_DelSpaceArticleList_Handler,
		},
		{
			MethodName: "ColligateSearch",
			Handler:    _Group_ColligateSearch_Handler,
		},
		{
			MethodName: "GetHotSpace",
			Handler:    _Group_GetHotSpace_Handler,
		},
		{
			MethodName: "GetMyFollowingSpace",
			Handler:    _Group_GetMyFollowingSpace_Handler,
		},
		{
			MethodName: "CreatePushSpaceArticelOrder",
			Handler:    _Group_CreatePushSpaceArticelOrder_Handler,
		},
		{
			MethodName: "GlobalPushSpaceArticle",
			Handler:    _Group_GlobalPushSpaceArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group/group.proto",
}
