// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: order/order.proto

package pbOrder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	CreatePayScanBlockTask(ctx context.Context, in *CreatePayScanBlockTaskReq, opts ...grpc.CallOption) (*CreatePayScanBlockTaskResp, error)
	GetPayScanBlockTaskByOrderId(ctx context.Context, in *GetPayScanBlockTaskByOrderIdReq, opts ...grpc.CallOption) (*GetPayScanBlockTaskByOrderIdResp, error)
	GetPayScanBlockTaskById(ctx context.Context, in *GetPayScanBlockTaskByIdReq, opts ...grpc.CallOption) (*GetPayScanBlockTaskByIdResp, error)
	ReplenishmentOrder(ctx context.Context, in *ReplenishmentOrderReq, opts ...grpc.CallOption) (*ReplenishmentOrderResp, error)
	ForcedReplenishmentOrder(ctx context.Context, in *ForcedReplenishmentOrderReq, opts ...grpc.CallOption) (*ForcedReplenishmentOrderResp, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) CreatePayScanBlockTask(ctx context.Context, in *CreatePayScanBlockTaskReq, opts ...grpc.CallOption) (*CreatePayScanBlockTaskResp, error) {
	out := new(CreatePayScanBlockTaskResp)
	err := c.cc.Invoke(ctx, "/order.orderService/CreatePayScanBlockTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetPayScanBlockTaskByOrderId(ctx context.Context, in *GetPayScanBlockTaskByOrderIdReq, opts ...grpc.CallOption) (*GetPayScanBlockTaskByOrderIdResp, error) {
	out := new(GetPayScanBlockTaskByOrderIdResp)
	err := c.cc.Invoke(ctx, "/order.orderService/GetPayScanBlockTaskByOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetPayScanBlockTaskById(ctx context.Context, in *GetPayScanBlockTaskByIdReq, opts ...grpc.CallOption) (*GetPayScanBlockTaskByIdResp, error) {
	out := new(GetPayScanBlockTaskByIdResp)
	err := c.cc.Invoke(ctx, "/order.orderService/GetPayScanBlockTaskById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ReplenishmentOrder(ctx context.Context, in *ReplenishmentOrderReq, opts ...grpc.CallOption) (*ReplenishmentOrderResp, error) {
	out := new(ReplenishmentOrderResp)
	err := c.cc.Invoke(ctx, "/order.orderService/ReplenishmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ForcedReplenishmentOrder(ctx context.Context, in *ForcedReplenishmentOrderReq, opts ...grpc.CallOption) (*ForcedReplenishmentOrderResp, error) {
	out := new(ForcedReplenishmentOrderResp)
	err := c.cc.Invoke(ctx, "/order.orderService/ForcedReplenishmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations should embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	CreatePayScanBlockTask(context.Context, *CreatePayScanBlockTaskReq) (*CreatePayScanBlockTaskResp, error)
	GetPayScanBlockTaskByOrderId(context.Context, *GetPayScanBlockTaskByOrderIdReq) (*GetPayScanBlockTaskByOrderIdResp, error)
	GetPayScanBlockTaskById(context.Context, *GetPayScanBlockTaskByIdReq) (*GetPayScanBlockTaskByIdResp, error)
	ReplenishmentOrder(context.Context, *ReplenishmentOrderReq) (*ReplenishmentOrderResp, error)
	ForcedReplenishmentOrder(context.Context, *ForcedReplenishmentOrderReq) (*ForcedReplenishmentOrderResp, error)
}

// UnimplementedOrderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) CreatePayScanBlockTask(context.Context, *CreatePayScanBlockTaskReq) (*CreatePayScanBlockTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayScanBlockTask not implemented")
}
func (UnimplementedOrderServiceServer) GetPayScanBlockTaskByOrderId(context.Context, *GetPayScanBlockTaskByOrderIdReq) (*GetPayScanBlockTaskByOrderIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayScanBlockTaskByOrderId not implemented")
}
func (UnimplementedOrderServiceServer) GetPayScanBlockTaskById(context.Context, *GetPayScanBlockTaskByIdReq) (*GetPayScanBlockTaskByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayScanBlockTaskById not implemented")
}
func (UnimplementedOrderServiceServer) ReplenishmentOrder(context.Context, *ReplenishmentOrderReq) (*ReplenishmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplenishmentOrder not implemented")
}
func (UnimplementedOrderServiceServer) ForcedReplenishmentOrder(context.Context, *ForcedReplenishmentOrderReq) (*ForcedReplenishmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForcedReplenishmentOrder not implemented")
}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_CreatePayScanBlockTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePayScanBlockTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreatePayScanBlockTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.orderService/CreatePayScanBlockTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreatePayScanBlockTask(ctx, req.(*CreatePayScanBlockTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetPayScanBlockTaskByOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayScanBlockTaskByOrderIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetPayScanBlockTaskByOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.orderService/GetPayScanBlockTaskByOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetPayScanBlockTaskByOrderId(ctx, req.(*GetPayScanBlockTaskByOrderIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetPayScanBlockTaskById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayScanBlockTaskByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetPayScanBlockTaskById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.orderService/GetPayScanBlockTaskById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetPayScanBlockTaskById(ctx, req.(*GetPayScanBlockTaskByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ReplenishmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplenishmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ReplenishmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.orderService/ReplenishmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ReplenishmentOrder(ctx, req.(*ReplenishmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ForcedReplenishmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForcedReplenishmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ForcedReplenishmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.orderService/ForcedReplenishmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ForcedReplenishmentOrder(ctx, req.(*ForcedReplenishmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.orderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePayScanBlockTask",
			Handler:    _OrderService_CreatePayScanBlockTask_Handler,
		},
		{
			MethodName: "GetPayScanBlockTaskByOrderId",
			Handler:    _OrderService_GetPayScanBlockTaskByOrderId_Handler,
		},
		{
			MethodName: "GetPayScanBlockTaskById",
			Handler:    _OrderService_GetPayScanBlockTaskById_Handler,
		},
		{
			MethodName: "ReplenishmentOrder",
			Handler:    _OrderService_ReplenishmentOrder_Handler,
		},
		{
			MethodName: "ForcedReplenishmentOrder",
			Handler:    _OrderService_ForcedReplenishmentOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/order.proto",
}
