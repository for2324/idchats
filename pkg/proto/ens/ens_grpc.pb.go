// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: ens/ens.proto

package pbEns

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnsServiceClient is the client API for EnsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnsServiceClient interface {
	// 创建注册ens订单
	CreateRegisterEnsOrder(ctx context.Context, in *CreateRegisterEnsOrderReq, opts ...grpc.CallOption) (*CreateRegisterEnsOrderResp, error)
	// 获取ens订单信息
	GetEnsOrderInfo(ctx context.Context, in *GetEnsOrderInfoReq, opts ...grpc.CallOption) (*GetEnsOrderInfoResp, error)
	// 确认ens订单已经支付
	ConfirmEnsOrderHasBeenPaid(ctx context.Context, in *ConfirmEnsOrderHasBeenPaidReq, opts ...grpc.CallOption) (*ConfirmEnsOrderHasBeenPaidResp, error)
}

type ensServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnsServiceClient(cc grpc.ClientConnInterface) EnsServiceClient {
	return &ensServiceClient{cc}
}

func (c *ensServiceClient) CreateRegisterEnsOrder(ctx context.Context, in *CreateRegisterEnsOrderReq, opts ...grpc.CallOption) (*CreateRegisterEnsOrderResp, error) {
	out := new(CreateRegisterEnsOrderResp)
	err := c.cc.Invoke(ctx, "/ens.ensService/CreateRegisterEnsOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ensServiceClient) GetEnsOrderInfo(ctx context.Context, in *GetEnsOrderInfoReq, opts ...grpc.CallOption) (*GetEnsOrderInfoResp, error) {
	out := new(GetEnsOrderInfoResp)
	err := c.cc.Invoke(ctx, "/ens.ensService/GetEnsOrderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ensServiceClient) ConfirmEnsOrderHasBeenPaid(ctx context.Context, in *ConfirmEnsOrderHasBeenPaidReq, opts ...grpc.CallOption) (*ConfirmEnsOrderHasBeenPaidResp, error) {
	out := new(ConfirmEnsOrderHasBeenPaidResp)
	err := c.cc.Invoke(ctx, "/ens.ensService/ConfirmEnsOrderHasBeenPaid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnsServiceServer is the server API for EnsService service.
// All implementations should embed UnimplementedEnsServiceServer
// for forward compatibility
type EnsServiceServer interface {
	// 创建注册ens订单
	CreateRegisterEnsOrder(context.Context, *CreateRegisterEnsOrderReq) (*CreateRegisterEnsOrderResp, error)
	// 获取ens订单信息
	GetEnsOrderInfo(context.Context, *GetEnsOrderInfoReq) (*GetEnsOrderInfoResp, error)
	// 确认ens订单已经支付
	ConfirmEnsOrderHasBeenPaid(context.Context, *ConfirmEnsOrderHasBeenPaidReq) (*ConfirmEnsOrderHasBeenPaidResp, error)
}

// UnimplementedEnsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEnsServiceServer struct {
}

func (UnimplementedEnsServiceServer) CreateRegisterEnsOrder(context.Context, *CreateRegisterEnsOrderReq) (*CreateRegisterEnsOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegisterEnsOrder not implemented")
}
func (UnimplementedEnsServiceServer) GetEnsOrderInfo(context.Context, *GetEnsOrderInfoReq) (*GetEnsOrderInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnsOrderInfo not implemented")
}
func (UnimplementedEnsServiceServer) ConfirmEnsOrderHasBeenPaid(context.Context, *ConfirmEnsOrderHasBeenPaidReq) (*ConfirmEnsOrderHasBeenPaidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmEnsOrderHasBeenPaid not implemented")
}

// UnsafeEnsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnsServiceServer will
// result in compilation errors.
type UnsafeEnsServiceServer interface {
	mustEmbedUnimplementedEnsServiceServer()
}

func RegisterEnsServiceServer(s grpc.ServiceRegistrar, srv EnsServiceServer) {
	s.RegisterService(&EnsService_ServiceDesc, srv)
}

func _EnsService_CreateRegisterEnsOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegisterEnsOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnsServiceServer).CreateRegisterEnsOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ens.ensService/CreateRegisterEnsOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnsServiceServer).CreateRegisterEnsOrder(ctx, req.(*CreateRegisterEnsOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnsService_GetEnsOrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnsOrderInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnsServiceServer).GetEnsOrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ens.ensService/GetEnsOrderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnsServiceServer).GetEnsOrderInfo(ctx, req.(*GetEnsOrderInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnsService_ConfirmEnsOrderHasBeenPaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmEnsOrderHasBeenPaidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnsServiceServer).ConfirmEnsOrderHasBeenPaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ens.ensService/ConfirmEnsOrderHasBeenPaid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnsServiceServer).ConfirmEnsOrderHasBeenPaid(ctx, req.(*ConfirmEnsOrderHasBeenPaidReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EnsService_ServiceDesc is the grpc.ServiceDesc for EnsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ens.ensService",
	HandlerType: (*EnsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRegisterEnsOrder",
			Handler:    _EnsService_CreateRegisterEnsOrder_Handler,
		},
		{
			MethodName: "GetEnsOrderInfo",
			Handler:    _EnsService_GetEnsOrderInfo_Handler,
		},
		{
			MethodName: "ConfirmEnsOrderHasBeenPaid",
			Handler:    _EnsService_ConfirmEnsOrderHasBeenPaid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ens/ens.proto",
}
