// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: user/user.proto

package user

import (
	sdk_ws "Open_IM/pkg/proto/sdk_ws"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	GetSelfUserInfo(ctx context.Context, in *GetSelfUserInfoReq, opts ...grpc.CallOption) (*GetSelfUserInfoResp, error)
	GetUserInfoWithoutToken(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoWithProfileResp, error)
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
	UpdateUserInfoHead(ctx context.Context, in *UpdateUserInfoHeadReq, opts ...grpc.CallOption) (*UpdateUserInfoHeadResp, error)
	RpcUpdateUserFieldData(ctx context.Context, in *SetGlobalRecvMessageOptReq, opts ...grpc.CallOption) (*SetGlobalRecvMessageOptResp, error)
	GetAllUserID(ctx context.Context, in *GetAllUserIDReq, opts ...grpc.CallOption) (*GetAllUserIDResp, error)
	AccountCheck(ctx context.Context, in *AccountCheckReq, opts ...grpc.CallOption) (*AccountCheckResp, error)
	GetConversation(ctx context.Context, in *GetConversationReq, opts ...grpc.CallOption) (*GetConversationResp, error)
	GetAllConversations(ctx context.Context, in *GetAllConversationsReq, opts ...grpc.CallOption) (*GetAllConversationsResp, error)
	GetConversations(ctx context.Context, in *GetConversationsReq, opts ...grpc.CallOption) (*GetConversationsResp, error)
	BatchSetConversations(ctx context.Context, in *BatchSetConversationsReq, opts ...grpc.CallOption) (*BatchSetConversationsResp, error)
	SetConversation(ctx context.Context, in *SetConversationReq, opts ...grpc.CallOption) (*SetConversationResp, error)
	MonitorConversation(ctx context.Context, in *SetConversationReq, opts ...grpc.CallOption) (*SetConversationResp, error)
	SetRecvMsgOpt(ctx context.Context, in *SetRecvMsgOptReq, opts ...grpc.CallOption) (*SetRecvMsgOptResp, error)
	GetUsers(ctx context.Context, in *GetUsersReq, opts ...grpc.CallOption) (*GetUsersResp, error)
	AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error)
	BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error)
	UnBlockUser(ctx context.Context, in *UnBlockUserReq, opts ...grpc.CallOption) (*UnBlockUserResp, error)
	GetBlockUsers(ctx context.Context, in *GetBlockUsersReq, opts ...grpc.CallOption) (*GetBlockUsersResp, error)
	// 获取个人信息
	GetUserThird(ctx context.Context, in *GetUserThirdInfoReq, opts ...grpc.CallOption) (*GetUserThirdInfoResp, error)
	// 申请ens域名的绑定
	BindUserEnsDomain(ctx context.Context, in *BindUserEnsDomainReq, opts ...grpc.CallOption) (*BindUserThirdInfoResp, error)
	// 蓝v认证的域名
	BindUserThirdInfo(ctx context.Context, in *BindUserThirdInfoReq, opts ...grpc.CallOption) (*BindUserThirdInfoResp, error)
	// 修改用户的手机号码
	BindUserTelephoneRPC(ctx context.Context, in *BindUserTelephoneReq, opts ...grpc.CallOption) (*BindUserTelephoneResp, error)
	// RPC删除第三方平台绑定
	DeletePlatformInfo(ctx context.Context, in *DelThirdPlatformReq, opts ...grpc.CallOption) (*DelThirdPlatformResp, error)
	ShowPlatformInfo(ctx context.Context, in *ShowThirdPlatformReq, opts ...grpc.CallOption) (*ShowThirdPlatformResp, error)
	// 操作用户的token值得 注意分布式锁
	OperatorUserChatToken(ctx context.Context, in *OperatorUserChatTokenReq, opts ...grpc.CallOption) (*OperatorUserChatTokenResp, error)
	// 用户给group转账
	TransferChatTokenFromUserToGroup(ctx context.Context, in *TransferChatTokenOperatorReq, opts ...grpc.CallOption) (*TransferChatTokenOperatorResp, error)
	// 用户绑定nft的内容
	BindShowNft(ctx context.Context, in *RPCBindShowNftReq, opts ...grpc.CallOption) (*RPCBindShowNftResp, error)
	GetBindShowNft(ctx context.Context, in *RPCBindShowNftReq, opts ...grpc.CallOption) (*GetRPCBindShowNftResp, error)
	GetShowNftLikeStatus(ctx context.Context, in *RpcLikeShowNftStatusReq, opts ...grpc.CallOption) (*RpcLikeShowNftStatusResp, error)
	// V2.1 用户设置界面
	RpcUserSettingInfo(ctx context.Context, in *GetShowUserSettingReq, opts ...grpc.CallOption) (*GetShowUserSettingResp, error)
	RpcUserSettingUpdate(ctx context.Context, in *UpdateUserSettingReq, opts ...grpc.CallOption) (*UpdateUserSettingResp, error)
	// 推送消息给所有的粉丝并进入数据到数据库同时在推送给用户
	RpcPushMessageToFollowsUser(ctx context.Context, in *sdk_ws.PushMessageToMailFromUserToFans, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 推送消息到用户的邮箱
	RpcSendEmailToUserLinkEmail(ctx context.Context, in *EmailContentReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	out := new(GetUserInfoResp)
	err := c.cc.Invoke(ctx, "/user.user/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetSelfUserInfo(ctx context.Context, in *GetSelfUserInfoReq, opts ...grpc.CallOption) (*GetSelfUserInfoResp, error) {
	out := new(GetSelfUserInfoResp)
	err := c.cc.Invoke(ctx, "/user.user/GetSelfUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserInfoWithoutToken(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoWithProfileResp, error) {
	out := new(GetUserInfoWithProfileResp)
	err := c.cc.Invoke(ctx, "/user.user/GetUserInfoWithoutToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	out := new(UpdateUserInfoResp)
	err := c.cc.Invoke(ctx, "/user.user/UpdateUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserInfoHead(ctx context.Context, in *UpdateUserInfoHeadReq, opts ...grpc.CallOption) (*UpdateUserInfoHeadResp, error) {
	out := new(UpdateUserInfoHeadResp)
	err := c.cc.Invoke(ctx, "/user.user/UpdateUserInfoHead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RpcUpdateUserFieldData(ctx context.Context, in *SetGlobalRecvMessageOptReq, opts ...grpc.CallOption) (*SetGlobalRecvMessageOptResp, error) {
	out := new(SetGlobalRecvMessageOptResp)
	err := c.cc.Invoke(ctx, "/user.user/RpcUpdateUserFieldData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAllUserID(ctx context.Context, in *GetAllUserIDReq, opts ...grpc.CallOption) (*GetAllUserIDResp, error) {
	out := new(GetAllUserIDResp)
	err := c.cc.Invoke(ctx, "/user.user/GetAllUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AccountCheck(ctx context.Context, in *AccountCheckReq, opts ...grpc.CallOption) (*AccountCheckResp, error) {
	out := new(AccountCheckResp)
	err := c.cc.Invoke(ctx, "/user.user/AccountCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetConversation(ctx context.Context, in *GetConversationReq, opts ...grpc.CallOption) (*GetConversationResp, error) {
	out := new(GetConversationResp)
	err := c.cc.Invoke(ctx, "/user.user/GetConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAllConversations(ctx context.Context, in *GetAllConversationsReq, opts ...grpc.CallOption) (*GetAllConversationsResp, error) {
	out := new(GetAllConversationsResp)
	err := c.cc.Invoke(ctx, "/user.user/GetAllConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetConversations(ctx context.Context, in *GetConversationsReq, opts ...grpc.CallOption) (*GetConversationsResp, error) {
	out := new(GetConversationsResp)
	err := c.cc.Invoke(ctx, "/user.user/GetConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BatchSetConversations(ctx context.Context, in *BatchSetConversationsReq, opts ...grpc.CallOption) (*BatchSetConversationsResp, error) {
	out := new(BatchSetConversationsResp)
	err := c.cc.Invoke(ctx, "/user.user/BatchSetConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetConversation(ctx context.Context, in *SetConversationReq, opts ...grpc.CallOption) (*SetConversationResp, error) {
	out := new(SetConversationResp)
	err := c.cc.Invoke(ctx, "/user.user/SetConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) MonitorConversation(ctx context.Context, in *SetConversationReq, opts ...grpc.CallOption) (*SetConversationResp, error) {
	out := new(SetConversationResp)
	err := c.cc.Invoke(ctx, "/user.user/MonitorConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetRecvMsgOpt(ctx context.Context, in *SetRecvMsgOptReq, opts ...grpc.CallOption) (*SetRecvMsgOptResp, error) {
	out := new(SetRecvMsgOptResp)
	err := c.cc.Invoke(ctx, "/user.user/SetRecvMsgOpt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUsers(ctx context.Context, in *GetUsersReq, opts ...grpc.CallOption) (*GetUsersResp, error) {
	out := new(GetUsersResp)
	err := c.cc.Invoke(ctx, "/user.user/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error) {
	out := new(AddUserResp)
	err := c.cc.Invoke(ctx, "/user.user/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error) {
	out := new(BlockUserResp)
	err := c.cc.Invoke(ctx, "/user.user/BlockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UnBlockUser(ctx context.Context, in *UnBlockUserReq, opts ...grpc.CallOption) (*UnBlockUserResp, error) {
	out := new(UnBlockUserResp)
	err := c.cc.Invoke(ctx, "/user.user/UnBlockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetBlockUsers(ctx context.Context, in *GetBlockUsersReq, opts ...grpc.CallOption) (*GetBlockUsersResp, error) {
	out := new(GetBlockUsersResp)
	err := c.cc.Invoke(ctx, "/user.user/GetBlockUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserThird(ctx context.Context, in *GetUserThirdInfoReq, opts ...grpc.CallOption) (*GetUserThirdInfoResp, error) {
	out := new(GetUserThirdInfoResp)
	err := c.cc.Invoke(ctx, "/user.user/GetUserThird", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BindUserEnsDomain(ctx context.Context, in *BindUserEnsDomainReq, opts ...grpc.CallOption) (*BindUserThirdInfoResp, error) {
	out := new(BindUserThirdInfoResp)
	err := c.cc.Invoke(ctx, "/user.user/BindUserEnsDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BindUserThirdInfo(ctx context.Context, in *BindUserThirdInfoReq, opts ...grpc.CallOption) (*BindUserThirdInfoResp, error) {
	out := new(BindUserThirdInfoResp)
	err := c.cc.Invoke(ctx, "/user.user/BindUserThirdInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BindUserTelephoneRPC(ctx context.Context, in *BindUserTelephoneReq, opts ...grpc.CallOption) (*BindUserTelephoneResp, error) {
	out := new(BindUserTelephoneResp)
	err := c.cc.Invoke(ctx, "/user.user/BindUserTelephoneRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeletePlatformInfo(ctx context.Context, in *DelThirdPlatformReq, opts ...grpc.CallOption) (*DelThirdPlatformResp, error) {
	out := new(DelThirdPlatformResp)
	err := c.cc.Invoke(ctx, "/user.user/DeletePlatformInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ShowPlatformInfo(ctx context.Context, in *ShowThirdPlatformReq, opts ...grpc.CallOption) (*ShowThirdPlatformResp, error) {
	out := new(ShowThirdPlatformResp)
	err := c.cc.Invoke(ctx, "/user.user/ShowPlatformInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) OperatorUserChatToken(ctx context.Context, in *OperatorUserChatTokenReq, opts ...grpc.CallOption) (*OperatorUserChatTokenResp, error) {
	out := new(OperatorUserChatTokenResp)
	err := c.cc.Invoke(ctx, "/user.user/OperatorUserChatToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) TransferChatTokenFromUserToGroup(ctx context.Context, in *TransferChatTokenOperatorReq, opts ...grpc.CallOption) (*TransferChatTokenOperatorResp, error) {
	out := new(TransferChatTokenOperatorResp)
	err := c.cc.Invoke(ctx, "/user.user/TransferChatTokenFromUserToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BindShowNft(ctx context.Context, in *RPCBindShowNftReq, opts ...grpc.CallOption) (*RPCBindShowNftResp, error) {
	out := new(RPCBindShowNftResp)
	err := c.cc.Invoke(ctx, "/user.user/BindShowNft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetBindShowNft(ctx context.Context, in *RPCBindShowNftReq, opts ...grpc.CallOption) (*GetRPCBindShowNftResp, error) {
	out := new(GetRPCBindShowNftResp)
	err := c.cc.Invoke(ctx, "/user.user/GetBindShowNft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetShowNftLikeStatus(ctx context.Context, in *RpcLikeShowNftStatusReq, opts ...grpc.CallOption) (*RpcLikeShowNftStatusResp, error) {
	out := new(RpcLikeShowNftStatusResp)
	err := c.cc.Invoke(ctx, "/user.user/GetShowNftLikeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RpcUserSettingInfo(ctx context.Context, in *GetShowUserSettingReq, opts ...grpc.CallOption) (*GetShowUserSettingResp, error) {
	out := new(GetShowUserSettingResp)
	err := c.cc.Invoke(ctx, "/user.user/RpcUserSettingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RpcUserSettingUpdate(ctx context.Context, in *UpdateUserSettingReq, opts ...grpc.CallOption) (*UpdateUserSettingResp, error) {
	out := new(UpdateUserSettingResp)
	err := c.cc.Invoke(ctx, "/user.user/RpcUserSettingUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RpcPushMessageToFollowsUser(ctx context.Context, in *sdk_ws.PushMessageToMailFromUserToFans, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.user/RpcPushMessageToFollowsUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RpcSendEmailToUserLinkEmail(ctx context.Context, in *EmailContentReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/user.user/RpcSendEmailToUserLinkEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations should embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	GetSelfUserInfo(context.Context, *GetSelfUserInfoReq) (*GetSelfUserInfoResp, error)
	GetUserInfoWithoutToken(context.Context, *GetUserInfoReq) (*GetUserInfoWithProfileResp, error)
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error)
	UpdateUserInfoHead(context.Context, *UpdateUserInfoHeadReq) (*UpdateUserInfoHeadResp, error)
	RpcUpdateUserFieldData(context.Context, *SetGlobalRecvMessageOptReq) (*SetGlobalRecvMessageOptResp, error)
	GetAllUserID(context.Context, *GetAllUserIDReq) (*GetAllUserIDResp, error)
	AccountCheck(context.Context, *AccountCheckReq) (*AccountCheckResp, error)
	GetConversation(context.Context, *GetConversationReq) (*GetConversationResp, error)
	GetAllConversations(context.Context, *GetAllConversationsReq) (*GetAllConversationsResp, error)
	GetConversations(context.Context, *GetConversationsReq) (*GetConversationsResp, error)
	BatchSetConversations(context.Context, *BatchSetConversationsReq) (*BatchSetConversationsResp, error)
	SetConversation(context.Context, *SetConversationReq) (*SetConversationResp, error)
	MonitorConversation(context.Context, *SetConversationReq) (*SetConversationResp, error)
	SetRecvMsgOpt(context.Context, *SetRecvMsgOptReq) (*SetRecvMsgOptResp, error)
	GetUsers(context.Context, *GetUsersReq) (*GetUsersResp, error)
	AddUser(context.Context, *AddUserReq) (*AddUserResp, error)
	BlockUser(context.Context, *BlockUserReq) (*BlockUserResp, error)
	UnBlockUser(context.Context, *UnBlockUserReq) (*UnBlockUserResp, error)
	GetBlockUsers(context.Context, *GetBlockUsersReq) (*GetBlockUsersResp, error)
	// 获取个人信息
	GetUserThird(context.Context, *GetUserThirdInfoReq) (*GetUserThirdInfoResp, error)
	// 申请ens域名的绑定
	BindUserEnsDomain(context.Context, *BindUserEnsDomainReq) (*BindUserThirdInfoResp, error)
	// 蓝v认证的域名
	BindUserThirdInfo(context.Context, *BindUserThirdInfoReq) (*BindUserThirdInfoResp, error)
	// 修改用户的手机号码
	BindUserTelephoneRPC(context.Context, *BindUserTelephoneReq) (*BindUserTelephoneResp, error)
	// RPC删除第三方平台绑定
	DeletePlatformInfo(context.Context, *DelThirdPlatformReq) (*DelThirdPlatformResp, error)
	ShowPlatformInfo(context.Context, *ShowThirdPlatformReq) (*ShowThirdPlatformResp, error)
	// 操作用户的token值得 注意分布式锁
	OperatorUserChatToken(context.Context, *OperatorUserChatTokenReq) (*OperatorUserChatTokenResp, error)
	// 用户给group转账
	TransferChatTokenFromUserToGroup(context.Context, *TransferChatTokenOperatorReq) (*TransferChatTokenOperatorResp, error)
	// 用户绑定nft的内容
	BindShowNft(context.Context, *RPCBindShowNftReq) (*RPCBindShowNftResp, error)
	GetBindShowNft(context.Context, *RPCBindShowNftReq) (*GetRPCBindShowNftResp, error)
	GetShowNftLikeStatus(context.Context, *RpcLikeShowNftStatusReq) (*RpcLikeShowNftStatusResp, error)
	// V2.1 用户设置界面
	RpcUserSettingInfo(context.Context, *GetShowUserSettingReq) (*GetShowUserSettingResp, error)
	RpcUserSettingUpdate(context.Context, *UpdateUserSettingReq) (*UpdateUserSettingResp, error)
	// 推送消息给所有的粉丝并进入数据到数据库同时在推送给用户
	RpcPushMessageToFollowsUser(context.Context, *sdk_ws.PushMessageToMailFromUserToFans) (*emptypb.Empty, error)
	// 推送消息到用户的邮箱
	RpcSendEmailToUserLinkEmail(context.Context, *EmailContentReq) (*CommonResp, error)
}

// UnimplementedUserServer should be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServer) GetSelfUserInfo(context.Context, *GetSelfUserInfoReq) (*GetSelfUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelfUserInfo not implemented")
}
func (UnimplementedUserServer) GetUserInfoWithoutToken(context.Context, *GetUserInfoReq) (*GetUserInfoWithProfileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoWithoutToken not implemented")
}
func (UnimplementedUserServer) UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedUserServer) UpdateUserInfoHead(context.Context, *UpdateUserInfoHeadReq) (*UpdateUserInfoHeadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfoHead not implemented")
}
func (UnimplementedUserServer) RpcUpdateUserFieldData(context.Context, *SetGlobalRecvMessageOptReq) (*SetGlobalRecvMessageOptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcUpdateUserFieldData not implemented")
}
func (UnimplementedUserServer) GetAllUserID(context.Context, *GetAllUserIDReq) (*GetAllUserIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserID not implemented")
}
func (UnimplementedUserServer) AccountCheck(context.Context, *AccountCheckReq) (*AccountCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountCheck not implemented")
}
func (UnimplementedUserServer) GetConversation(context.Context, *GetConversationReq) (*GetConversationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversation not implemented")
}
func (UnimplementedUserServer) GetAllConversations(context.Context, *GetAllConversationsReq) (*GetAllConversationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllConversations not implemented")
}
func (UnimplementedUserServer) GetConversations(context.Context, *GetConversationsReq) (*GetConversationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversations not implemented")
}
func (UnimplementedUserServer) BatchSetConversations(context.Context, *BatchSetConversationsReq) (*BatchSetConversationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSetConversations not implemented")
}
func (UnimplementedUserServer) SetConversation(context.Context, *SetConversationReq) (*SetConversationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConversation not implemented")
}
func (UnimplementedUserServer) MonitorConversation(context.Context, *SetConversationReq) (*SetConversationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitorConversation not implemented")
}
func (UnimplementedUserServer) SetRecvMsgOpt(context.Context, *SetRecvMsgOptReq) (*SetRecvMsgOptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRecvMsgOpt not implemented")
}
func (UnimplementedUserServer) GetUsers(context.Context, *GetUsersReq) (*GetUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserServer) AddUser(context.Context, *AddUserReq) (*AddUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserServer) BlockUser(context.Context, *BlockUserReq) (*BlockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (UnimplementedUserServer) UnBlockUser(context.Context, *UnBlockUserReq) (*UnBlockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBlockUser not implemented")
}
func (UnimplementedUserServer) GetBlockUsers(context.Context, *GetBlockUsersReq) (*GetBlockUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockUsers not implemented")
}
func (UnimplementedUserServer) GetUserThird(context.Context, *GetUserThirdInfoReq) (*GetUserThirdInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserThird not implemented")
}
func (UnimplementedUserServer) BindUserEnsDomain(context.Context, *BindUserEnsDomainReq) (*BindUserThirdInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindUserEnsDomain not implemented")
}
func (UnimplementedUserServer) BindUserThirdInfo(context.Context, *BindUserThirdInfoReq) (*BindUserThirdInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindUserThirdInfo not implemented")
}
func (UnimplementedUserServer) BindUserTelephoneRPC(context.Context, *BindUserTelephoneReq) (*BindUserTelephoneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindUserTelephoneRPC not implemented")
}
func (UnimplementedUserServer) DeletePlatformInfo(context.Context, *DelThirdPlatformReq) (*DelThirdPlatformResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlatformInfo not implemented")
}
func (UnimplementedUserServer) ShowPlatformInfo(context.Context, *ShowThirdPlatformReq) (*ShowThirdPlatformResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPlatformInfo not implemented")
}
func (UnimplementedUserServer) OperatorUserChatToken(context.Context, *OperatorUserChatTokenReq) (*OperatorUserChatTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorUserChatToken not implemented")
}
func (UnimplementedUserServer) TransferChatTokenFromUserToGroup(context.Context, *TransferChatTokenOperatorReq) (*TransferChatTokenOperatorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferChatTokenFromUserToGroup not implemented")
}
func (UnimplementedUserServer) BindShowNft(context.Context, *RPCBindShowNftReq) (*RPCBindShowNftResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindShowNft not implemented")
}
func (UnimplementedUserServer) GetBindShowNft(context.Context, *RPCBindShowNftReq) (*GetRPCBindShowNftResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBindShowNft not implemented")
}
func (UnimplementedUserServer) GetShowNftLikeStatus(context.Context, *RpcLikeShowNftStatusReq) (*RpcLikeShowNftStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShowNftLikeStatus not implemented")
}
func (UnimplementedUserServer) RpcUserSettingInfo(context.Context, *GetShowUserSettingReq) (*GetShowUserSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcUserSettingInfo not implemented")
}
func (UnimplementedUserServer) RpcUserSettingUpdate(context.Context, *UpdateUserSettingReq) (*UpdateUserSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcUserSettingUpdate not implemented")
}
func (UnimplementedUserServer) RpcPushMessageToFollowsUser(context.Context, *sdk_ws.PushMessageToMailFromUserToFans) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcPushMessageToFollowsUser not implemented")
}
func (UnimplementedUserServer) RpcSendEmailToUserLinkEmail(context.Context, *EmailContentReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcSendEmailToUserLinkEmail not implemented")
}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetSelfUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSelfUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetSelfUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetSelfUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetSelfUserInfo(ctx, req.(*GetSelfUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserInfoWithoutToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserInfoWithoutToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetUserInfoWithoutToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserInfoWithoutToken(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserInfoHead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoHeadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserInfoHead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/UpdateUserInfoHead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserInfoHead(ctx, req.(*UpdateUserInfoHeadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RpcUpdateUserFieldData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGlobalRecvMessageOptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RpcUpdateUserFieldData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/RpcUpdateUserFieldData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RpcUpdateUserFieldData(ctx, req.(*SetGlobalRecvMessageOptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAllUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAllUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetAllUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAllUserID(ctx, req.(*GetAllUserIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AccountCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AccountCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/AccountCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AccountCheck(ctx, req.(*AccountCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetConversation(ctx, req.(*GetConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAllConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllConversationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAllConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetAllConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAllConversations(ctx, req.(*GetAllConversationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetConversations(ctx, req.(*GetConversationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BatchSetConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSetConversationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BatchSetConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/BatchSetConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BatchSetConversations(ctx, req.(*BatchSetConversationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/SetConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetConversation(ctx, req.(*SetConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_MonitorConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).MonitorConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/MonitorConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).MonitorConversation(ctx, req.(*SetConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetRecvMsgOpt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRecvMsgOptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetRecvMsgOpt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/SetRecvMsgOpt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetRecvMsgOpt(ctx, req.(*SetRecvMsgOptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUsers(ctx, req.(*GetUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddUser(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/BlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BlockUser(ctx, req.(*BlockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UnBlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBlockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UnBlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/UnBlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UnBlockUser(ctx, req.(*UnBlockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetBlockUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetBlockUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetBlockUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetBlockUsers(ctx, req.(*GetBlockUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserThird_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserThirdInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserThird(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetUserThird",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserThird(ctx, req.(*GetUserThirdInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BindUserEnsDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindUserEnsDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BindUserEnsDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/BindUserEnsDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BindUserEnsDomain(ctx, req.(*BindUserEnsDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BindUserThirdInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindUserThirdInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BindUserThirdInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/BindUserThirdInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BindUserThirdInfo(ctx, req.(*BindUserThirdInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BindUserTelephoneRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindUserTelephoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BindUserTelephoneRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/BindUserTelephoneRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BindUserTelephoneRPC(ctx, req.(*BindUserTelephoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeletePlatformInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelThirdPlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeletePlatformInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/DeletePlatformInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeletePlatformInfo(ctx, req.(*DelThirdPlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ShowPlatformInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowThirdPlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ShowPlatformInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/ShowPlatformInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ShowPlatformInfo(ctx, req.(*ShowThirdPlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_OperatorUserChatToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorUserChatTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).OperatorUserChatToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/OperatorUserChatToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).OperatorUserChatToken(ctx, req.(*OperatorUserChatTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_TransferChatTokenFromUserToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferChatTokenOperatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).TransferChatTokenFromUserToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/TransferChatTokenFromUserToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).TransferChatTokenFromUserToGroup(ctx, req.(*TransferChatTokenOperatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BindShowNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCBindShowNftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BindShowNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/BindShowNft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BindShowNft(ctx, req.(*RPCBindShowNftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetBindShowNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCBindShowNftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetBindShowNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetBindShowNft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetBindShowNft(ctx, req.(*RPCBindShowNftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetShowNftLikeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcLikeShowNftStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetShowNftLikeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetShowNftLikeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetShowNftLikeStatus(ctx, req.(*RpcLikeShowNftStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RpcUserSettingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShowUserSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RpcUserSettingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/RpcUserSettingInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RpcUserSettingInfo(ctx, req.(*GetShowUserSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RpcUserSettingUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RpcUserSettingUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/RpcUserSettingUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RpcUserSettingUpdate(ctx, req.(*UpdateUserSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RpcPushMessageToFollowsUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sdk_ws.PushMessageToMailFromUserToFans)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RpcPushMessageToFollowsUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/RpcPushMessageToFollowsUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RpcPushMessageToFollowsUser(ctx, req.(*sdk_ws.PushMessageToMailFromUserToFans))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RpcSendEmailToUserLinkEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RpcSendEmailToUserLinkEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/RpcSendEmailToUserLinkEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RpcSendEmailToUserLinkEmail(ctx, req.(*EmailContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.user",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _User_GetUserInfo_Handler,
		},
		{
			MethodName: "GetSelfUserInfo",
			Handler:    _User_GetSelfUserInfo_Handler,
		},
		{
			MethodName: "GetUserInfoWithoutToken",
			Handler:    _User_GetUserInfoWithoutToken_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _User_UpdateUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserInfoHead",
			Handler:    _User_UpdateUserInfoHead_Handler,
		},
		{
			MethodName: "RpcUpdateUserFieldData",
			Handler:    _User_RpcUpdateUserFieldData_Handler,
		},
		{
			MethodName: "GetAllUserID",
			Handler:    _User_GetAllUserID_Handler,
		},
		{
			MethodName: "AccountCheck",
			Handler:    _User_AccountCheck_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _User_GetConversation_Handler,
		},
		{
			MethodName: "GetAllConversations",
			Handler:    _User_GetAllConversations_Handler,
		},
		{
			MethodName: "GetConversations",
			Handler:    _User_GetConversations_Handler,
		},
		{
			MethodName: "BatchSetConversations",
			Handler:    _User_BatchSetConversations_Handler,
		},
		{
			MethodName: "SetConversation",
			Handler:    _User_SetConversation_Handler,
		},
		{
			MethodName: "MonitorConversation",
			Handler:    _User_MonitorConversation_Handler,
		},
		{
			MethodName: "SetRecvMsgOpt",
			Handler:    _User_SetRecvMsgOpt_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _User_GetUsers_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _User_AddUser_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _User_BlockUser_Handler,
		},
		{
			MethodName: "UnBlockUser",
			Handler:    _User_UnBlockUser_Handler,
		},
		{
			MethodName: "GetBlockUsers",
			Handler:    _User_GetBlockUsers_Handler,
		},
		{
			MethodName: "GetUserThird",
			Handler:    _User_GetUserThird_Handler,
		},
		{
			MethodName: "BindUserEnsDomain",
			Handler:    _User_BindUserEnsDomain_Handler,
		},
		{
			MethodName: "BindUserThirdInfo",
			Handler:    _User_BindUserThirdInfo_Handler,
		},
		{
			MethodName: "BindUserTelephoneRPC",
			Handler:    _User_BindUserTelephoneRPC_Handler,
		},
		{
			MethodName: "DeletePlatformInfo",
			Handler:    _User_DeletePlatformInfo_Handler,
		},
		{
			MethodName: "ShowPlatformInfo",
			Handler:    _User_ShowPlatformInfo_Handler,
		},
		{
			MethodName: "OperatorUserChatToken",
			Handler:    _User_OperatorUserChatToken_Handler,
		},
		{
			MethodName: "TransferChatTokenFromUserToGroup",
			Handler:    _User_TransferChatTokenFromUserToGroup_Handler,
		},
		{
			MethodName: "BindShowNft",
			Handler:    _User_BindShowNft_Handler,
		},
		{
			MethodName: "GetBindShowNft",
			Handler:    _User_GetBindShowNft_Handler,
		},
		{
			MethodName: "GetShowNftLikeStatus",
			Handler:    _User_GetShowNftLikeStatus_Handler,
		},
		{
			MethodName: "RpcUserSettingInfo",
			Handler:    _User_RpcUserSettingInfo_Handler,
		},
		{
			MethodName: "RpcUserSettingUpdate",
			Handler:    _User_RpcUserSettingUpdate_Handler,
		},
		{
			MethodName: "RpcPushMessageToFollowsUser",
			Handler:    _User_RpcPushMessageToFollowsUser_Handler,
		},
		{
			MethodName: "RpcSendEmailToUserLinkEmail",
			Handler:    _User_RpcSendEmailToUserLinkEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}
