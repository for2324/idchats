// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: web3pub/web3pub.proto

package web3pub

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Web3PubClient is the client API for Web3Pub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Web3PubClient interface {
	GetTwitterTimeLine(ctx context.Context, in *ThirdPlatformTwitterReq, opts ...grpc.CallOption) (*ThirdPlatformTwitterRsp, error)
	GetUserAuthorizedThirdPlatformList(ctx context.Context, in *GetUserAuthorizedThirdPlatformListReq, opts ...grpc.CallOption) (*GetUserAuthorizedThirdPlatformListRsp, error)
	// 检查自己是否关注了官方的推特
	CheckIsFollowSystemTwitter(ctx context.Context, in *CheckUserIsFollowSystemTwitterReq, opts ...grpc.CallOption) (*CheckUserIsFollowSystemTwitterRsp, error)
	PostGamingStatus(ctx context.Context, in *UserGameReq, opts ...grpc.CallOption) (*UserGameResp, error)
	GetGamingRankStatus(ctx context.Context, in *UserGameRankListReq, opts ...grpc.CallOption) (*UserGameRankListResp, error)
	GetEthTxIDTaskRpc(ctx context.Context, in *EthRpcTxIDReq, opts ...grpc.CallOption) (*EthRpcTxIDResp, error)
	CheckIsHaveNftRecvID(ctx context.Context, in *CheckIsHaveNftRecvIDReq, opts ...grpc.CallOption) (*CheckIsHaveNftRecvIDResp, error)
	CheckIsHaveGuanFangNftRecvID(ctx context.Context, in *CheckIsHaveGuanFangNftRecvIDReq, opts ...grpc.CallOption) (*CheckIsHaveGuanFangNftRecvIDResp, error)
	CheckDnsDomainHadParseBiuBiuTxt(ctx context.Context, in *CheckDomainHadParseTxtReq, opts ...grpc.CallOption) (*CheckDomainHadParseTxtResp, error)
}

type web3PubClient struct {
	cc grpc.ClientConnInterface
}

func NewWeb3PubClient(cc grpc.ClientConnInterface) Web3PubClient {
	return &web3PubClient{cc}
}

func (c *web3PubClient) GetTwitterTimeLine(ctx context.Context, in *ThirdPlatformTwitterReq, opts ...grpc.CallOption) (*ThirdPlatformTwitterRsp, error) {
	out := new(ThirdPlatformTwitterRsp)
	err := c.cc.Invoke(ctx, "/web3pub.web3pub/GetTwitterTimeLine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *web3PubClient) GetUserAuthorizedThirdPlatformList(ctx context.Context, in *GetUserAuthorizedThirdPlatformListReq, opts ...grpc.CallOption) (*GetUserAuthorizedThirdPlatformListRsp, error) {
	out := new(GetUserAuthorizedThirdPlatformListRsp)
	err := c.cc.Invoke(ctx, "/web3pub.web3pub/GetUserAuthorizedThirdPlatformList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *web3PubClient) CheckIsFollowSystemTwitter(ctx context.Context, in *CheckUserIsFollowSystemTwitterReq, opts ...grpc.CallOption) (*CheckUserIsFollowSystemTwitterRsp, error) {
	out := new(CheckUserIsFollowSystemTwitterRsp)
	err := c.cc.Invoke(ctx, "/web3pub.web3pub/CheckIsFollowSystemTwitter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *web3PubClient) PostGamingStatus(ctx context.Context, in *UserGameReq, opts ...grpc.CallOption) (*UserGameResp, error) {
	out := new(UserGameResp)
	err := c.cc.Invoke(ctx, "/web3pub.web3pub/PostGamingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *web3PubClient) GetGamingRankStatus(ctx context.Context, in *UserGameRankListReq, opts ...grpc.CallOption) (*UserGameRankListResp, error) {
	out := new(UserGameRankListResp)
	err := c.cc.Invoke(ctx, "/web3pub.web3pub/GetGamingRankStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *web3PubClient) GetEthTxIDTaskRpc(ctx context.Context, in *EthRpcTxIDReq, opts ...grpc.CallOption) (*EthRpcTxIDResp, error) {
	out := new(EthRpcTxIDResp)
	err := c.cc.Invoke(ctx, "/web3pub.web3pub/GetEthTxIDTaskRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *web3PubClient) CheckIsHaveNftRecvID(ctx context.Context, in *CheckIsHaveNftRecvIDReq, opts ...grpc.CallOption) (*CheckIsHaveNftRecvIDResp, error) {
	out := new(CheckIsHaveNftRecvIDResp)
	err := c.cc.Invoke(ctx, "/web3pub.web3pub/CheckIsHaveNftRecvID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *web3PubClient) CheckIsHaveGuanFangNftRecvID(ctx context.Context, in *CheckIsHaveGuanFangNftRecvIDReq, opts ...grpc.CallOption) (*CheckIsHaveGuanFangNftRecvIDResp, error) {
	out := new(CheckIsHaveGuanFangNftRecvIDResp)
	err := c.cc.Invoke(ctx, "/web3pub.web3pub/CheckIsHaveGuanFangNftRecvID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *web3PubClient) CheckDnsDomainHadParseBiuBiuTxt(ctx context.Context, in *CheckDomainHadParseTxtReq, opts ...grpc.CallOption) (*CheckDomainHadParseTxtResp, error) {
	out := new(CheckDomainHadParseTxtResp)
	err := c.cc.Invoke(ctx, "/web3pub.web3pub/CheckDnsDomainHadParseBiuBiuTxt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Web3PubServer is the server API for Web3Pub service.
// All implementations should embed UnimplementedWeb3PubServer
// for forward compatibility
type Web3PubServer interface {
	GetTwitterTimeLine(context.Context, *ThirdPlatformTwitterReq) (*ThirdPlatformTwitterRsp, error)
	GetUserAuthorizedThirdPlatformList(context.Context, *GetUserAuthorizedThirdPlatformListReq) (*GetUserAuthorizedThirdPlatformListRsp, error)
	// 检查自己是否关注了官方的推特
	CheckIsFollowSystemTwitter(context.Context, *CheckUserIsFollowSystemTwitterReq) (*CheckUserIsFollowSystemTwitterRsp, error)
	PostGamingStatus(context.Context, *UserGameReq) (*UserGameResp, error)
	GetGamingRankStatus(context.Context, *UserGameRankListReq) (*UserGameRankListResp, error)
	GetEthTxIDTaskRpc(context.Context, *EthRpcTxIDReq) (*EthRpcTxIDResp, error)
	CheckIsHaveNftRecvID(context.Context, *CheckIsHaveNftRecvIDReq) (*CheckIsHaveNftRecvIDResp, error)
	CheckIsHaveGuanFangNftRecvID(context.Context, *CheckIsHaveGuanFangNftRecvIDReq) (*CheckIsHaveGuanFangNftRecvIDResp, error)
	CheckDnsDomainHadParseBiuBiuTxt(context.Context, *CheckDomainHadParseTxtReq) (*CheckDomainHadParseTxtResp, error)
}

// UnimplementedWeb3PubServer should be embedded to have forward compatible implementations.
type UnimplementedWeb3PubServer struct {
}

func (UnimplementedWeb3PubServer) GetTwitterTimeLine(context.Context, *ThirdPlatformTwitterReq) (*ThirdPlatformTwitterRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTwitterTimeLine not implemented")
}
func (UnimplementedWeb3PubServer) GetUserAuthorizedThirdPlatformList(context.Context, *GetUserAuthorizedThirdPlatformListReq) (*GetUserAuthorizedThirdPlatformListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAuthorizedThirdPlatformList not implemented")
}
func (UnimplementedWeb3PubServer) CheckIsFollowSystemTwitter(context.Context, *CheckUserIsFollowSystemTwitterReq) (*CheckUserIsFollowSystemTwitterRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsFollowSystemTwitter not implemented")
}
func (UnimplementedWeb3PubServer) PostGamingStatus(context.Context, *UserGameReq) (*UserGameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostGamingStatus not implemented")
}
func (UnimplementedWeb3PubServer) GetGamingRankStatus(context.Context, *UserGameRankListReq) (*UserGameRankListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGamingRankStatus not implemented")
}
func (UnimplementedWeb3PubServer) GetEthTxIDTaskRpc(context.Context, *EthRpcTxIDReq) (*EthRpcTxIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEthTxIDTaskRpc not implemented")
}
func (UnimplementedWeb3PubServer) CheckIsHaveNftRecvID(context.Context, *CheckIsHaveNftRecvIDReq) (*CheckIsHaveNftRecvIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsHaveNftRecvID not implemented")
}
func (UnimplementedWeb3PubServer) CheckIsHaveGuanFangNftRecvID(context.Context, *CheckIsHaveGuanFangNftRecvIDReq) (*CheckIsHaveGuanFangNftRecvIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsHaveGuanFangNftRecvID not implemented")
}
func (UnimplementedWeb3PubServer) CheckDnsDomainHadParseBiuBiuTxt(context.Context, *CheckDomainHadParseTxtReq) (*CheckDomainHadParseTxtResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDnsDomainHadParseBiuBiuTxt not implemented")
}

// UnsafeWeb3PubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Web3PubServer will
// result in compilation errors.
type UnsafeWeb3PubServer interface {
	mustEmbedUnimplementedWeb3PubServer()
}

func RegisterWeb3PubServer(s grpc.ServiceRegistrar, srv Web3PubServer) {
	s.RegisterService(&Web3Pub_ServiceDesc, srv)
}

func _Web3Pub_GetTwitterTimeLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThirdPlatformTwitterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Web3PubServer).GetTwitterTimeLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web3pub.web3pub/GetTwitterTimeLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Web3PubServer).GetTwitterTimeLine(ctx, req.(*ThirdPlatformTwitterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web3Pub_GetUserAuthorizedThirdPlatformList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAuthorizedThirdPlatformListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Web3PubServer).GetUserAuthorizedThirdPlatformList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web3pub.web3pub/GetUserAuthorizedThirdPlatformList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Web3PubServer).GetUserAuthorizedThirdPlatformList(ctx, req.(*GetUserAuthorizedThirdPlatformListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web3Pub_CheckIsFollowSystemTwitter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserIsFollowSystemTwitterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Web3PubServer).CheckIsFollowSystemTwitter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web3pub.web3pub/CheckIsFollowSystemTwitter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Web3PubServer).CheckIsFollowSystemTwitter(ctx, req.(*CheckUserIsFollowSystemTwitterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web3Pub_PostGamingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Web3PubServer).PostGamingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web3pub.web3pub/PostGamingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Web3PubServer).PostGamingStatus(ctx, req.(*UserGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web3Pub_GetGamingRankStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGameRankListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Web3PubServer).GetGamingRankStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web3pub.web3pub/GetGamingRankStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Web3PubServer).GetGamingRankStatus(ctx, req.(*UserGameRankListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web3Pub_GetEthTxIDTaskRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthRpcTxIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Web3PubServer).GetEthTxIDTaskRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web3pub.web3pub/GetEthTxIDTaskRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Web3PubServer).GetEthTxIDTaskRpc(ctx, req.(*EthRpcTxIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web3Pub_CheckIsHaveNftRecvID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsHaveNftRecvIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Web3PubServer).CheckIsHaveNftRecvID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web3pub.web3pub/CheckIsHaveNftRecvID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Web3PubServer).CheckIsHaveNftRecvID(ctx, req.(*CheckIsHaveNftRecvIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web3Pub_CheckIsHaveGuanFangNftRecvID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsHaveGuanFangNftRecvIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Web3PubServer).CheckIsHaveGuanFangNftRecvID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web3pub.web3pub/CheckIsHaveGuanFangNftRecvID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Web3PubServer).CheckIsHaveGuanFangNftRecvID(ctx, req.(*CheckIsHaveGuanFangNftRecvIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web3Pub_CheckDnsDomainHadParseBiuBiuTxt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDomainHadParseTxtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Web3PubServer).CheckDnsDomainHadParseBiuBiuTxt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web3pub.web3pub/CheckDnsDomainHadParseBiuBiuTxt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Web3PubServer).CheckDnsDomainHadParseBiuBiuTxt(ctx, req.(*CheckDomainHadParseTxtReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Web3Pub_ServiceDesc is the grpc.ServiceDesc for Web3Pub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Web3Pub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "web3pub.web3pub",
	HandlerType: (*Web3PubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTwitterTimeLine",
			Handler:    _Web3Pub_GetTwitterTimeLine_Handler,
		},
		{
			MethodName: "GetUserAuthorizedThirdPlatformList",
			Handler:    _Web3Pub_GetUserAuthorizedThirdPlatformList_Handler,
		},
		{
			MethodName: "CheckIsFollowSystemTwitter",
			Handler:    _Web3Pub_CheckIsFollowSystemTwitter_Handler,
		},
		{
			MethodName: "PostGamingStatus",
			Handler:    _Web3Pub_PostGamingStatus_Handler,
		},
		{
			MethodName: "GetGamingRankStatus",
			Handler:    _Web3Pub_GetGamingRankStatus_Handler,
		},
		{
			MethodName: "GetEthTxIDTaskRpc",
			Handler:    _Web3Pub_GetEthTxIDTaskRpc_Handler,
		},
		{
			MethodName: "CheckIsHaveNftRecvID",
			Handler:    _Web3Pub_CheckIsHaveNftRecvID_Handler,
		},
		{
			MethodName: "CheckIsHaveGuanFangNftRecvID",
			Handler:    _Web3Pub_CheckIsHaveGuanFangNftRecvID_Handler,
		},
		{
			MethodName: "CheckDnsDomainHadParseBiuBiuTxt",
			Handler:    _Web3Pub_CheckDnsDomainHadParseBiuBiuTxt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web3pub/web3pub.proto",
}
