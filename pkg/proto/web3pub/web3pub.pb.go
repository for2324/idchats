// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: web3pub/web3pub.proto

package web3pub

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode int32  `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
}

func (x *CommonResp) Reset() {
	*x = CommonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResp) ProtoMessage() {}

func (x *CommonResp) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResp.ProtoReflect.Descriptor instead.
func (*CommonResp) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{0}
}

func (x *CommonResp) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *CommonResp) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type ThirdPlatformTwitterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Userid     string `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Nonce      string `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	OperatorID string `protobuf:"bytes,5,opt,name=OperatorID,proto3" json:"OperatorID,omitempty"`
}

func (x *ThirdPlatformTwitterReq) Reset() {
	*x = ThirdPlatformTwitterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThirdPlatformTwitterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdPlatformTwitterReq) ProtoMessage() {}

func (x *ThirdPlatformTwitterReq) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdPlatformTwitterReq.ProtoReflect.Descriptor instead.
func (*ThirdPlatformTwitterReq) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{1}
}

func (x *ThirdPlatformTwitterReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ThirdPlatformTwitterReq) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

func (x *ThirdPlatformTwitterReq) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *ThirdPlatformTwitterReq) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

type ThirdPlatformTwitterRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *ThirdPlatformTwitterRsp) Reset() {
	*x = ThirdPlatformTwitterRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThirdPlatformTwitterRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdPlatformTwitterRsp) ProtoMessage() {}

func (x *ThirdPlatformTwitterRsp) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdPlatformTwitterRsp.ProtoReflect.Descriptor instead.
func (*ThirdPlatformTwitterRsp) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{2}
}

func (x *ThirdPlatformTwitterRsp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type GetUserAuthorizedThirdPlatformListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (x *GetUserAuthorizedThirdPlatformListReq) Reset() {
	*x = GetUserAuthorizedThirdPlatformListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAuthorizedThirdPlatformListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAuthorizedThirdPlatformListReq) ProtoMessage() {}

func (x *GetUserAuthorizedThirdPlatformListReq) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAuthorizedThirdPlatformListReq.ProtoReflect.Descriptor instead.
func (*GetUserAuthorizedThirdPlatformListReq) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserAuthorizedThirdPlatformListReq) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

type PlatFormRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatForm string `protobuf:"bytes,1,opt,name=platForm,proto3" json:"platForm,omitempty"`
	UserId   string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *PlatFormRsp) Reset() {
	*x = PlatFormRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatFormRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatFormRsp) ProtoMessage() {}

func (x *PlatFormRsp) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatFormRsp.ProtoReflect.Descriptor instead.
func (*PlatFormRsp) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{4}
}

func (x *PlatFormRsp) GetPlatForm() string {
	if x != nil {
		return x.PlatForm
	}
	return ""
}

func (x *PlatFormRsp) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserAuthorizedThirdPlatformListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp   *CommonResp    `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	PlatFormList []*PlatFormRsp `protobuf:"bytes,2,rep,name=platFormList,proto3" json:"platFormList,omitempty"`
}

func (x *GetUserAuthorizedThirdPlatformListRsp) Reset() {
	*x = GetUserAuthorizedThirdPlatformListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAuthorizedThirdPlatformListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAuthorizedThirdPlatformListRsp) ProtoMessage() {}

func (x *GetUserAuthorizedThirdPlatformListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAuthorizedThirdPlatformListRsp.ProtoReflect.Descriptor instead.
func (*GetUserAuthorizedThirdPlatformListRsp) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{5}
}

func (x *GetUserAuthorizedThirdPlatformListRsp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetUserAuthorizedThirdPlatformListRsp) GetPlatFormList() []*PlatFormRsp {
	if x != nil {
		return x.PlatFormList
	}
	return nil
}

type CheckUserIsFollowSystemTwitterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorID string `protobuf:"bytes,1,opt,name=OperatorID,proto3" json:"OperatorID,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"` //查询自己是否绑定了官方的twitter
}

func (x *CheckUserIsFollowSystemTwitterReq) Reset() {
	*x = CheckUserIsFollowSystemTwitterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserIsFollowSystemTwitterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserIsFollowSystemTwitterReq) ProtoMessage() {}

func (x *CheckUserIsFollowSystemTwitterReq) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserIsFollowSystemTwitterReq.ProtoReflect.Descriptor instead.
func (*CheckUserIsFollowSystemTwitterReq) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{6}
}

func (x *CheckUserIsFollowSystemTwitterReq) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *CheckUserIsFollowSystemTwitterReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CheckUserIsFollowSystemTwitterRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *CheckUserIsFollowSystemTwitterRsp) Reset() {
	*x = CheckUserIsFollowSystemTwitterRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserIsFollowSystemTwitterRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserIsFollowSystemTwitterRsp) ProtoMessage() {}

func (x *CheckUserIsFollowSystemTwitterRsp) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserIsFollowSystemTwitterRsp.ProtoReflect.Descriptor instead.
func (*CheckUserIsFollowSystemTwitterRsp) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{7}
}

func (x *CheckUserIsFollowSystemTwitterRsp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type GetRewordTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorID string `protobuf:"bytes,1,opt,name=OperatorID,proto3" json:"OperatorID,omitempty"`
	OpUserID   string `protobuf:"bytes,2,opt,name=OpUserID,proto3" json:"OpUserID,omitempty"`
	TaskID     string `protobuf:"bytes,3,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	GroupId    string `protobuf:"bytes,4,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
}

func (x *GetRewordTaskReq) Reset() {
	*x = GetRewordTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewordTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewordTaskReq) ProtoMessage() {}

func (x *GetRewordTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewordTaskReq.ProtoReflect.Descriptor instead.
func (*GetRewordTaskReq) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{8}
}

func (x *GetRewordTaskReq) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *GetRewordTaskReq) GetOpUserID() string {
	if x != nil {
		return x.OpUserID
	}
	return ""
}

func (x *GetRewordTaskReq) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *GetRewordTaskReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type GetRewordTaskRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *GetRewordTaskRsp) Reset() {
	*x = GetRewordTaskRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewordTaskRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewordTaskRsp) ProtoMessage() {}

func (x *GetRewordTaskRsp) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewordTaskRsp.ProtoReflect.Descriptor instead.
func (*GetRewordTaskRsp) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{9}
}

func (x *GetRewordTaskRsp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type UserTaskListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorID string `protobuf:"bytes,1,opt,name=OperatorID,proto3" json:"OperatorID,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *UserTaskListReq) Reset() {
	*x = UserTaskListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskListReq) ProtoMessage() {}

func (x *UserTaskListReq) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskListReq.ProtoReflect.Descriptor instead.
func (*UserTaskListReq) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{10}
}

func (x *UserTaskListReq) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *UserTaskListReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId      string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	TaskName    string `protobuf:"bytes,2,opt,name=taskName,proto3" json:"taskName,omitempty"`
	TaskTarget  string `protobuf:"bytes,3,opt,name=taskTarget,proto3" json:"taskTarget,omitempty"`
	TaskCurrent string `protobuf:"bytes,4,opt,name=taskCurrent,proto3" json:"taskCurrent,omitempty"`
	TaskStatus  string `protobuf:"bytes,5,opt,name=taskStatus,proto3" json:"taskStatus,omitempty"`
	TaskScore   string `protobuf:"bytes,6,opt,name=taskScore,proto3" json:"taskScore,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{11}
}

func (x *Task) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *Task) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *Task) GetTaskTarget() string {
	if x != nil {
		return x.TaskTarget
	}
	return ""
}

func (x *Task) GetTaskCurrent() string {
	if x != nil {
		return x.TaskCurrent
	}
	return ""
}

func (x *Task) GetTaskStatus() string {
	if x != nil {
		return x.TaskStatus
	}
	return ""
}

func (x *Task) GetTaskScore() string {
	if x != nil {
		return x.TaskScore
	}
	return ""
}

type UserTaskListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	Task       []*Task     `protobuf:"bytes,2,rep,name=task,proto3" json:"task,omitempty"`
}

func (x *UserTaskListResp) Reset() {
	*x = UserTaskListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskListResp) ProtoMessage() {}

func (x *UserTaskListResp) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskListResp.ProtoReflect.Descriptor instead.
func (*UserTaskListResp) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{12}
}

func (x *UserTaskListResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *UserTaskListResp) GetTask() []*Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type UserFinishTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorID string `protobuf:"bytes,1,opt,name=OperatorID,proto3" json:"OperatorID,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	TaskID     string `protobuf:"bytes,3,opt,name=taskID,proto3" json:"taskID,omitempty"` // 检查该项任务是否完成
}

func (x *UserFinishTaskReq) Reset() {
	*x = UserFinishTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFinishTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFinishTaskReq) ProtoMessage() {}

func (x *UserFinishTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFinishTaskReq.ProtoReflect.Descriptor instead.
func (*UserFinishTaskReq) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{13}
}

func (x *UserFinishTaskReq) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *UserFinishTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserFinishTaskReq) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

type UserFinishTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	Task       *Task       `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *UserFinishTaskResp) Reset() {
	*x = UserFinishTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFinishTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFinishTaskResp) ProtoMessage() {}

func (x *UserFinishTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFinishTaskResp.ProtoReflect.Descriptor instead.
func (*UserFinishTaskResp) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{14}
}

func (x *UserFinishTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *UserFinishTaskResp) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type EthRpcTxIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorID string `protobuf:"bytes,1,opt,name=OperatorID,proto3" json:"OperatorID,omitempty"`
	TxID       string `protobuf:"bytes,2,opt,name=txID,proto3" json:"txID,omitempty"`
	ChainID    string `protobuf:"bytes,3,opt,name=chainID,proto3" json:"chainID,omitempty"` //某条链条上
}

func (x *EthRpcTxIDReq) Reset() {
	*x = EthRpcTxIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthRpcTxIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthRpcTxIDReq) ProtoMessage() {}

func (x *EthRpcTxIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthRpcTxIDReq.ProtoReflect.Descriptor instead.
func (*EthRpcTxIDReq) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{15}
}

func (x *EthRpcTxIDReq) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *EthRpcTxIDReq) GetTxID() string {
	if x != nil {
		return x.TxID
	}
	return ""
}

func (x *EthRpcTxIDReq) GetChainID() string {
	if x != nil {
		return x.ChainID
	}
	return ""
}

type EthRpcTxIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp      *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	TransactionHash string      `protobuf:"bytes,2,opt,name=TransactionHash,proto3" json:"TransactionHash,omitempty"`
	FromAddress     string      `protobuf:"bytes,3,opt,name=FromAddress,proto3" json:"FromAddress,omitempty"`
	ToAddress       string      `protobuf:"bytes,4,opt,name=ToAddress,proto3" json:"ToAddress,omitempty"`
	Value           float64     `protobuf:"fixed64,5,opt,name=Value,proto3" json:"Value,omitempty"`
	Status          int32       `protobuf:"varint,6,opt,name=Status,proto3" json:"Status,omitempty"`
	ContractAddress string      `protobuf:"bytes,7,opt,name=ContractAddress,proto3" json:"ContractAddress,omitempty"`
	Decimals        uint32      `protobuf:"varint,8,opt,name=Decimals,proto3" json:"Decimals,omitempty"`
}

func (x *EthRpcTxIDResp) Reset() {
	*x = EthRpcTxIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthRpcTxIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthRpcTxIDResp) ProtoMessage() {}

func (x *EthRpcTxIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthRpcTxIDResp.ProtoReflect.Descriptor instead.
func (*EthRpcTxIDResp) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{16}
}

func (x *EthRpcTxIDResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *EthRpcTxIDResp) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *EthRpcTxIDResp) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *EthRpcTxIDResp) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *EthRpcTxIDResp) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *EthRpcTxIDResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *EthRpcTxIDResp) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *EthRpcTxIDResp) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

type UserGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorID string  `protobuf:"bytes,1,opt,name=OperatorID,proto3" json:"OperatorID,omitempty"`
	UserID     string  `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	GameID     string  `protobuf:"bytes,3,opt,name=gameID,proto3" json:"gameID,omitempty"`  // 检查该项任务是否完成
	Status     int32   `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"` //游戏状态
	Ip         string  `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	UserAgent  string  `protobuf:"bytes,6,opt,name=userAgent,proto3" json:"userAgent,omitempty"`
	StartTime  int64   `protobuf:"varint,7,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime    int64   `protobuf:"varint,8,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Score      float64 `protobuf:"fixed64,9,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *UserGameReq) Reset() {
	*x = UserGameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGameReq) ProtoMessage() {}

func (x *UserGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGameReq.ProtoReflect.Descriptor instead.
func (*UserGameReq) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{17}
}

func (x *UserGameReq) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *UserGameReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserGameReq) GetGameID() string {
	if x != nil {
		return x.GameID
	}
	return ""
}

func (x *UserGameReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserGameReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UserGameReq) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *UserGameReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *UserGameReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *UserGameReq) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type CheckIsHaveNftRecvIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorID string `protobuf:"bytes,1,opt,name=OperatorID,proto3" json:"OperatorID,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *CheckIsHaveNftRecvIDReq) Reset() {
	*x = CheckIsHaveNftRecvIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsHaveNftRecvIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsHaveNftRecvIDReq) ProtoMessage() {}

func (x *CheckIsHaveNftRecvIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsHaveNftRecvIDReq.ProtoReflect.Descriptor instead.
func (*CheckIsHaveNftRecvIDReq) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{18}
}

func (x *CheckIsHaveNftRecvIDReq) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *CheckIsHaveNftRecvIDReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CheckIsHaveNftRecvIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	HaveNft    bool        `protobuf:"varint,2,opt,name=HaveNft,proto3" json:"HaveNft,omitempty"`
}

func (x *CheckIsHaveNftRecvIDResp) Reset() {
	*x = CheckIsHaveNftRecvIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsHaveNftRecvIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsHaveNftRecvIDResp) ProtoMessage() {}

func (x *CheckIsHaveNftRecvIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsHaveNftRecvIDResp.ProtoReflect.Descriptor instead.
func (*CheckIsHaveNftRecvIDResp) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{19}
}

func (x *CheckIsHaveNftRecvIDResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *CheckIsHaveNftRecvIDResp) GetHaveNft() bool {
	if x != nil {
		return x.HaveNft
	}
	return false
}

type CheckIsHaveGuanFangNftRecvIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorID string `protobuf:"bytes,1,opt,name=OperatorID,proto3" json:"OperatorID,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *CheckIsHaveGuanFangNftRecvIDReq) Reset() {
	*x = CheckIsHaveGuanFangNftRecvIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsHaveGuanFangNftRecvIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsHaveGuanFangNftRecvIDReq) ProtoMessage() {}

func (x *CheckIsHaveGuanFangNftRecvIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsHaveGuanFangNftRecvIDReq.ProtoReflect.Descriptor instead.
func (*CheckIsHaveGuanFangNftRecvIDReq) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{20}
}

func (x *CheckIsHaveGuanFangNftRecvIDReq) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *CheckIsHaveGuanFangNftRecvIDReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CheckIsHaveGuanFangNftRecvIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	HaveNft    bool        `protobuf:"varint,2,opt,name=HaveNft,proto3" json:"HaveNft,omitempty"`
}

func (x *CheckIsHaveGuanFangNftRecvIDResp) Reset() {
	*x = CheckIsHaveGuanFangNftRecvIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsHaveGuanFangNftRecvIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsHaveGuanFangNftRecvIDResp) ProtoMessage() {}

func (x *CheckIsHaveGuanFangNftRecvIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsHaveGuanFangNftRecvIDResp.ProtoReflect.Descriptor instead.
func (*CheckIsHaveGuanFangNftRecvIDResp) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{21}
}

func (x *CheckIsHaveGuanFangNftRecvIDResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *CheckIsHaveGuanFangNftRecvIDResp) GetHaveNft() bool {
	if x != nil {
		return x.HaveNft
	}
	return false
}

type UserGameResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	StartTime  int64       `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
}

func (x *UserGameResp) Reset() {
	*x = UserGameResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGameResp) ProtoMessage() {}

func (x *UserGameResp) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGameResp.ProtoReflect.Descriptor instead.
func (*UserGameResp) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{22}
}

func (x *UserGameResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *UserGameResp) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

type UserGameRankListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorID string `protobuf:"bytes,1,opt,name=OperatorID,proto3" json:"OperatorID,omitempty"`
	UserID     string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	GameID     int32  `protobuf:"varint,3,opt,name=gameID,proto3" json:"gameID,omitempty"`
}

func (x *UserGameRankListReq) Reset() {
	*x = UserGameRankListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGameRankListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGameRankListReq) ProtoMessage() {}

func (x *UserGameRankListReq) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGameRankListReq.ProtoReflect.Descriptor instead.
func (*UserGameRankListReq) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{23}
}

func (x *UserGameRankListReq) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *UserGameRankListReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserGameRankListReq) GetGameID() int32 {
	if x != nil {
		return x.GameID
	}
	return 0
}

type UserGameScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankIndex          int32   `protobuf:"varint,1,opt,name=RankIndex,proto3" json:"RankIndex,omitempty"`
	UserID             string  `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Nickname           string  `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	FaceURL            string  `protobuf:"bytes,4,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	TokenContractChain string  `protobuf:"bytes,5,opt,name=tokenContractChain,proto3" json:"tokenContractChain,omitempty"`
	Score              float64 `protobuf:"fixed64,6,opt,name=score,proto3" json:"score,omitempty"`
	Reward             int64   `protobuf:"varint,7,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *UserGameScore) Reset() {
	*x = UserGameScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGameScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGameScore) ProtoMessage() {}

func (x *UserGameScore) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGameScore.ProtoReflect.Descriptor instead.
func (*UserGameScore) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{24}
}

func (x *UserGameScore) GetRankIndex() int32 {
	if x != nil {
		return x.RankIndex
	}
	return 0
}

func (x *UserGameScore) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserGameScore) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserGameScore) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *UserGameScore) GetTokenContractChain() string {
	if x != nil {
		return x.TokenContractChain
	}
	return ""
}

func (x *UserGameScore) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *UserGameScore) GetReward() int64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

type UserGameRankListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp       *CommonResp      `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	UserRankInfo     []*UserGameScore `protobuf:"bytes,2,rep,name=UserRankInfo,proto3" json:"UserRankInfo,omitempty"`         // 总分排名
	UserSelfRankInfo *UserGameScore   `protobuf:"bytes,3,opt,name=UserSelfRankInfo,proto3" json:"UserSelfRankInfo,omitempty"` //自己的排名
}

func (x *UserGameRankListResp) Reset() {
	*x = UserGameRankListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGameRankListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGameRankListResp) ProtoMessage() {}

func (x *UserGameRankListResp) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGameRankListResp.ProtoReflect.Descriptor instead.
func (*UserGameRankListResp) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{25}
}

func (x *UserGameRankListResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *UserGameRankListResp) GetUserRankInfo() []*UserGameScore {
	if x != nil {
		return x.UserRankInfo
	}
	return nil
}

func (x *UserGameRankListResp) GetUserSelfRankInfo() *UserGameScore {
	if x != nil {
		return x.UserSelfRankInfo
	}
	return nil
}

type CheckDomainHadParseTxtReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorID string `protobuf:"bytes,1,opt,name=OperatorID,proto3" json:"OperatorID,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	DnsDomain  string `protobuf:"bytes,3,opt,name=dnsDomain,proto3" json:"dnsDomain,omitempty"`
}

func (x *CheckDomainHadParseTxtReq) Reset() {
	*x = CheckDomainHadParseTxtReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDomainHadParseTxtReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDomainHadParseTxtReq) ProtoMessage() {}

func (x *CheckDomainHadParseTxtReq) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDomainHadParseTxtReq.ProtoReflect.Descriptor instead.
func (*CheckDomainHadParseTxtReq) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{26}
}

func (x *CheckDomainHadParseTxtReq) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *CheckDomainHadParseTxtReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckDomainHadParseTxtReq) GetDnsDomain() string {
	if x != nil {
		return x.DnsDomain
	}
	return ""
}

type CheckDomainHadParseTxtResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *CheckDomainHadParseTxtResp) Reset() {
	*x = CheckDomainHadParseTxtResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3pub_web3pub_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDomainHadParseTxtResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDomainHadParseTxtResp) ProtoMessage() {}

func (x *CheckDomainHadParseTxtResp) ProtoReflect() protoreflect.Message {
	mi := &file_web3pub_web3pub_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDomainHadParseTxtResp.ProtoReflect.Descriptor instead.
func (*CheckDomainHadParseTxtResp) Descriptor() ([]byte, []int) {
	return file_web3pub_web3pub_proto_rawDescGZIP(), []int{27}
}

func (x *CheckDomainHadParseTxtResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

var File_web3pub_web3pub_proto protoreflect.FileDescriptor

var file_web3pub_web3pub_proto_rawDesc = []byte{
	0x0a, 0x15, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x2f, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62,
	0x22, 0x3e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67,
	0x22, 0x83, 0x01, 0x0a, 0x17, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x22, 0x4e, 0x0a, 0x17, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x73,
	0x70, 0x12, 0x33, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3f, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x25, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70,
	0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x6c, 0x61,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x52, 0x73, 0x70, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x21, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x58, 0x0a, 0x21, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x77, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x33,
	0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x80, 0x01, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x47, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x73,
	0x70, 0x12, 0x33, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x49, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xba, 0x01, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x6a,
	0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x63, 0x0a, 0x11, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22,
	0x6c, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x33,
	0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70,
	0x75, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x5d, 0x0a,
	0x0d, 0x45, 0x74, 0x68, 0x52, 0x70, 0x63, 0x54, 0x78, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x22, 0xa3, 0x02, 0x0a,
	0x0e, 0x45, 0x74, 0x68, 0x52, 0x70, 0x63, 0x54, 0x78, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x33, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20,
	0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x51, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x73, 0x48, 0x61, 0x76, 0x65, 0x4e, 0x66, 0x74, 0x52, 0x65, 0x63, 0x76, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x18, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x73, 0x48, 0x61, 0x76, 0x65, 0x4e, 0x66, 0x74, 0x52, 0x65, 0x63, 0x76, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x33,
	0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x61,
	0x76, 0x65, 0x4e, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x48, 0x61, 0x76,
	0x65, 0x4e, 0x66, 0x74, 0x22, 0x59, 0x0a, 0x1f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x48,
	0x61, 0x76, 0x65, 0x47, 0x75, 0x61, 0x6e, 0x46, 0x61, 0x6e, 0x67, 0x4e, 0x66, 0x74, 0x52, 0x65,
	0x63, 0x76, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x71, 0x0a, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x48, 0x61, 0x76, 0x65, 0x47, 0x75,
	0x61, 0x6e, 0x46, 0x61, 0x6e, 0x67, 0x4e, 0x66, 0x74, 0x52, 0x65, 0x63, 0x76, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x61, 0x76, 0x65,
	0x4e, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x48, 0x61, 0x76, 0x65, 0x4e,
	0x66, 0x74, 0x22, 0x61, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x22, 0xd9, 0x01, 0x0a,
	0x0d, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x33, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77,
	0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x42, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x66, 0x52, 0x61,
	0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77,
	0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x10, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x66, 0x52, 0x61,
	0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x71, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x61, 0x64, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x78, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x51, 0x0a, 0x1a, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x61, 0x64, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x54, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65,
	0x62, 0x33, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x32, 0xf9, 0x06, 0x0a,
	0x07, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x12, 0x58, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54,
	0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x20,
	0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x20, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52,
	0x73, 0x70, 0x12, 0x84, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x77, 0x65, 0x62, 0x33,
	0x70, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x77, 0x65, 0x62, 0x33,
	0x70, 0x75, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x74, 0x0a, 0x1a, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75,
	0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12,
	0x3f, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x77, 0x65, 0x62, 0x33,
	0x70, 0x75, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x52, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75,
	0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x74, 0x68, 0x54, 0x78,
	0x49, 0x44, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x70, 0x63, 0x12, 0x16, 0x2e, 0x77, 0x65, 0x62, 0x33,
	0x70, 0x75, 0x62, 0x2e, 0x45, 0x74, 0x68, 0x52, 0x70, 0x63, 0x54, 0x78, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x1a, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x2e, 0x45, 0x74, 0x68, 0x52,
	0x70, 0x63, 0x54, 0x78, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5b, 0x0a, 0x14, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x49, 0x73, 0x48, 0x61, 0x76, 0x65, 0x4e, 0x66, 0x74, 0x52, 0x65, 0x63, 0x76,
	0x49, 0x44, 0x12, 0x20, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x73, 0x48, 0x61, 0x76, 0x65, 0x4e, 0x66, 0x74, 0x52, 0x65, 0x63, 0x76, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x48, 0x61, 0x76, 0x65, 0x4e, 0x66, 0x74, 0x52, 0x65, 0x63,
	0x76, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x73, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x73, 0x48, 0x61, 0x76, 0x65, 0x47, 0x75, 0x61, 0x6e, 0x46, 0x61, 0x6e, 0x67, 0x4e, 0x66,
	0x74, 0x52, 0x65, 0x63, 0x76, 0x49, 0x44, 0x12, 0x28, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75,
	0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x48, 0x61, 0x76, 0x65, 0x47, 0x75, 0x61,
	0x6e, 0x46, 0x61, 0x6e, 0x67, 0x4e, 0x66, 0x74, 0x52, 0x65, 0x63, 0x76, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x1a, 0x29, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x73, 0x48, 0x61, 0x76, 0x65, 0x47, 0x75, 0x61, 0x6e, 0x46, 0x61, 0x6e, 0x67, 0x4e,
	0x66, 0x74, 0x52, 0x65, 0x63, 0x76, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6a, 0x0a, 0x1f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x61,
	0x64, 0x50, 0x61, 0x72, 0x73, 0x65, 0x42, 0x69, 0x75, 0x42, 0x69, 0x75, 0x54, 0x78, 0x74, 0x12,
	0x22, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x61, 0x64, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x78, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x61, 0x64, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x54, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x42, 0x23, 0x5a, 0x21, 0x4f, 0x70, 0x65, 0x6e,
	0x5f, 0x49, 0x4d, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x65,
	0x62, 0x33, 0x70, 0x75, 0x62, 0x3b, 0x77, 0x65, 0x62, 0x33, 0x70, 0x75, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_web3pub_web3pub_proto_rawDescOnce sync.Once
	file_web3pub_web3pub_proto_rawDescData = file_web3pub_web3pub_proto_rawDesc
)

func file_web3pub_web3pub_proto_rawDescGZIP() []byte {
	file_web3pub_web3pub_proto_rawDescOnce.Do(func() {
		file_web3pub_web3pub_proto_rawDescData = protoimpl.X.CompressGZIP(file_web3pub_web3pub_proto_rawDescData)
	})
	return file_web3pub_web3pub_proto_rawDescData
}

var file_web3pub_web3pub_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_web3pub_web3pub_proto_goTypes = []interface{}{
	(*CommonResp)(nil),                            // 0: web3pub.CommonResp
	(*ThirdPlatformTwitterReq)(nil),               // 1: web3pub.ThirdPlatformTwitterReq
	(*ThirdPlatformTwitterRsp)(nil),               // 2: web3pub.ThirdPlatformTwitterRsp
	(*GetUserAuthorizedThirdPlatformListReq)(nil), // 3: web3pub.GetUserAuthorizedThirdPlatformListReq
	(*PlatFormRsp)(nil),                           // 4: web3pub.PlatFormRsp
	(*GetUserAuthorizedThirdPlatformListRsp)(nil), // 5: web3pub.GetUserAuthorizedThirdPlatformListRsp
	(*CheckUserIsFollowSystemTwitterReq)(nil),     // 6: web3pub.CheckUserIsFollowSystemTwitterReq
	(*CheckUserIsFollowSystemTwitterRsp)(nil),     // 7: web3pub.CheckUserIsFollowSystemTwitterRsp
	(*GetRewordTaskReq)(nil),                      // 8: web3pub.GetRewordTaskReq
	(*GetRewordTaskRsp)(nil),                      // 9: web3pub.GetRewordTaskRsp
	(*UserTaskListReq)(nil),                       // 10: web3pub.UserTaskListReq
	(*Task)(nil),                                  // 11: web3pub.Task
	(*UserTaskListResp)(nil),                      // 12: web3pub.UserTaskListResp
	(*UserFinishTaskReq)(nil),                     // 13: web3pub.UserFinishTaskReq
	(*UserFinishTaskResp)(nil),                    // 14: web3pub.UserFinishTaskResp
	(*EthRpcTxIDReq)(nil),                         // 15: web3pub.EthRpcTxIDReq
	(*EthRpcTxIDResp)(nil),                        // 16: web3pub.EthRpcTxIDResp
	(*UserGameReq)(nil),                           // 17: web3pub.UserGameReq
	(*CheckIsHaveNftRecvIDReq)(nil),               // 18: web3pub.CheckIsHaveNftRecvIDReq
	(*CheckIsHaveNftRecvIDResp)(nil),              // 19: web3pub.CheckIsHaveNftRecvIDResp
	(*CheckIsHaveGuanFangNftRecvIDReq)(nil),       // 20: web3pub.CheckIsHaveGuanFangNftRecvIDReq
	(*CheckIsHaveGuanFangNftRecvIDResp)(nil),      // 21: web3pub.CheckIsHaveGuanFangNftRecvIDResp
	(*UserGameResp)(nil),                          // 22: web3pub.UserGameResp
	(*UserGameRankListReq)(nil),                   // 23: web3pub.UserGameRankListReq
	(*UserGameScore)(nil),                         // 24: web3pub.UserGameScore
	(*UserGameRankListResp)(nil),                  // 25: web3pub.UserGameRankListResp
	(*CheckDomainHadParseTxtReq)(nil),             // 26: web3pub.CheckDomainHadParseTxtReq
	(*CheckDomainHadParseTxtResp)(nil),            // 27: web3pub.CheckDomainHadParseTxtResp
}
var file_web3pub_web3pub_proto_depIdxs = []int32{
	0,  // 0: web3pub.ThirdPlatformTwitterRsp.CommonResp:type_name -> web3pub.CommonResp
	0,  // 1: web3pub.GetUserAuthorizedThirdPlatformListRsp.CommonResp:type_name -> web3pub.CommonResp
	4,  // 2: web3pub.GetUserAuthorizedThirdPlatformListRsp.platFormList:type_name -> web3pub.PlatFormRsp
	0,  // 3: web3pub.CheckUserIsFollowSystemTwitterRsp.CommonResp:type_name -> web3pub.CommonResp
	0,  // 4: web3pub.GetRewordTaskRsp.CommonResp:type_name -> web3pub.CommonResp
	0,  // 5: web3pub.UserTaskListResp.CommonResp:type_name -> web3pub.CommonResp
	11, // 6: web3pub.UserTaskListResp.task:type_name -> web3pub.Task
	0,  // 7: web3pub.UserFinishTaskResp.CommonResp:type_name -> web3pub.CommonResp
	11, // 8: web3pub.UserFinishTaskResp.task:type_name -> web3pub.Task
	0,  // 9: web3pub.EthRpcTxIDResp.CommonResp:type_name -> web3pub.CommonResp
	0,  // 10: web3pub.CheckIsHaveNftRecvIDResp.CommonResp:type_name -> web3pub.CommonResp
	0,  // 11: web3pub.CheckIsHaveGuanFangNftRecvIDResp.CommonResp:type_name -> web3pub.CommonResp
	0,  // 12: web3pub.UserGameResp.CommonResp:type_name -> web3pub.CommonResp
	0,  // 13: web3pub.UserGameRankListResp.CommonResp:type_name -> web3pub.CommonResp
	24, // 14: web3pub.UserGameRankListResp.UserRankInfo:type_name -> web3pub.UserGameScore
	24, // 15: web3pub.UserGameRankListResp.UserSelfRankInfo:type_name -> web3pub.UserGameScore
	0,  // 16: web3pub.CheckDomainHadParseTxtResp.CommonResp:type_name -> web3pub.CommonResp
	1,  // 17: web3pub.web3pub.GetTwitterTimeLine:input_type -> web3pub.ThirdPlatformTwitterReq
	3,  // 18: web3pub.web3pub.GetUserAuthorizedThirdPlatformList:input_type -> web3pub.GetUserAuthorizedThirdPlatformListReq
	6,  // 19: web3pub.web3pub.CheckIsFollowSystemTwitter:input_type -> web3pub.CheckUserIsFollowSystemTwitterReq
	17, // 20: web3pub.web3pub.PostGamingStatus:input_type -> web3pub.UserGameReq
	23, // 21: web3pub.web3pub.GetGamingRankStatus:input_type -> web3pub.UserGameRankListReq
	15, // 22: web3pub.web3pub.GetEthTxIDTaskRpc:input_type -> web3pub.EthRpcTxIDReq
	18, // 23: web3pub.web3pub.CheckIsHaveNftRecvID:input_type -> web3pub.CheckIsHaveNftRecvIDReq
	20, // 24: web3pub.web3pub.CheckIsHaveGuanFangNftRecvID:input_type -> web3pub.CheckIsHaveGuanFangNftRecvIDReq
	26, // 25: web3pub.web3pub.CheckDnsDomainHadParseBiuBiuTxt:input_type -> web3pub.CheckDomainHadParseTxtReq
	2,  // 26: web3pub.web3pub.GetTwitterTimeLine:output_type -> web3pub.ThirdPlatformTwitterRsp
	5,  // 27: web3pub.web3pub.GetUserAuthorizedThirdPlatformList:output_type -> web3pub.GetUserAuthorizedThirdPlatformListRsp
	7,  // 28: web3pub.web3pub.CheckIsFollowSystemTwitter:output_type -> web3pub.CheckUserIsFollowSystemTwitterRsp
	22, // 29: web3pub.web3pub.PostGamingStatus:output_type -> web3pub.UserGameResp
	25, // 30: web3pub.web3pub.GetGamingRankStatus:output_type -> web3pub.UserGameRankListResp
	16, // 31: web3pub.web3pub.GetEthTxIDTaskRpc:output_type -> web3pub.EthRpcTxIDResp
	19, // 32: web3pub.web3pub.CheckIsHaveNftRecvID:output_type -> web3pub.CheckIsHaveNftRecvIDResp
	21, // 33: web3pub.web3pub.CheckIsHaveGuanFangNftRecvID:output_type -> web3pub.CheckIsHaveGuanFangNftRecvIDResp
	27, // 34: web3pub.web3pub.CheckDnsDomainHadParseBiuBiuTxt:output_type -> web3pub.CheckDomainHadParseTxtResp
	26, // [26:35] is the sub-list for method output_type
	17, // [17:26] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_web3pub_web3pub_proto_init() }
func file_web3pub_web3pub_proto_init() {
	if File_web3pub_web3pub_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_web3pub_web3pub_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThirdPlatformTwitterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThirdPlatformTwitterRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserAuthorizedThirdPlatformListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatFormRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserAuthorizedThirdPlatformListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserIsFollowSystemTwitterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserIsFollowSystemTwitterRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRewordTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRewordTaskRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFinishTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFinishTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthRpcTxIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthRpcTxIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsHaveNftRecvIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsHaveNftRecvIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsHaveGuanFangNftRecvIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsHaveGuanFangNftRecvIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGameResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGameRankListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGameScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGameRankListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDomainHadParseTxtReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3pub_web3pub_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDomainHadParseTxtResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_web3pub_web3pub_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_web3pub_web3pub_proto_goTypes,
		DependencyIndexes: file_web3pub_web3pub_proto_depIdxs,
		MessageInfos:      file_web3pub_web3pub_proto_msgTypes,
	}.Build()
	File_web3pub_web3pub_proto = out.File
	file_web3pub_web3pub_proto_rawDesc = nil
	file_web3pub_web3pub_proto_goTypes = nil
	file_web3pub_web3pub_proto_depIdxs = nil
}
