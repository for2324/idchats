// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: task/task.proto

package pbTask

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*CreateTaskResp, error)
	GetTaskList(ctx context.Context, in *GetTaskListReq, opts ...grpc.CallOption) (*GetTaskListResp, error)
	GetUserClaimTaskList(ctx context.Context, in *GetUserClaimTaskListReq, opts ...grpc.CallOption) (*GetUserClaimTaskListResp, error)
	GetUserTaskList(ctx context.Context, in *GetUserTaskListReq, opts ...grpc.CallOption) (*GetUserTaskListResp, error)
	ClaimTaskRewards(ctx context.Context, in *ClaimTaskRewardsReq, opts ...grpc.CallOption) (*ClaimTaskRewardsResp, error)
	DailyCheckIn(ctx context.Context, in *DailyCheckInReq, opts ...grpc.CallOption) (*DailyCheckInResp, error)
	// 是否完成携带NFT与新地址聊天任务
	IsFinishDailyChatNFTHeadWithNewUserTask(ctx context.Context, in *IsFinishDailyChatNFTHeadWithNewUserTaskReq, opts ...grpc.CallOption) (*IsFinishDailyChatNFTHeadWithNewUserTaskResp, error)
	// 完成携带NFT与新地址聊天任务
	FinishDailyChatNFTHeadWithNewUserTask(ctx context.Context, in *FinishDailyChatNFTHeadWithNewUserTaskReq, opts ...grpc.CallOption) (*FinishDailyChatNFTHeadWithNewUserTaskResp, error)
	// 是否完成携带官方NFT与新地址聊天任务
	IsFinishOfficialNFTHeadDailyChatWithNewUserTask(ctx context.Context, in *IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq, opts ...grpc.CallOption) (*IsFinishOfficialNFTHeadDailyChatWithNewUserTaskResp, error)
	// 完成携带官方NFT与新地址聊天任务
	FinishOfficialNFTHeadDailyChatWithNewUserTask(ctx context.Context, in *FinishOfficialNFTHeadDailyChatWithNewUserTaskReq, opts ...grpc.CallOption) (*FinishOfficialNFTHeadDailyChatWithNewUserTaskResp, error)
	// 完成上传NFT头像任务
	FinishUploadNftHeadTask(ctx context.Context, in *FinishUploadNftHeadTaskReq, opts ...grpc.CallOption) (*FinishUploadNftHeadTaskResp, error)
	// 是否完成上传NFT头像任务
	IsFinishUploadNftHeadTask(ctx context.Context, in *IsFinishUploadNftHeadTaskReq, opts ...grpc.CallOption) (*IsFinishUploadNftHeadTaskResp, error)
	// 完成官方NFT头像任务
	FinishOfficialNFTHeadTask(ctx context.Context, in *FinishOfficialNFTHeadTaskReq, opts ...grpc.CallOption) (*FinishOfficialNFTHeadTaskResp, error)
	// 是否完成官方NFT头像任务
	IsFinishOfficialNFTHeadTask(ctx context.Context, in *IsFinishOfficialNFTHeadTaskReq, opts ...grpc.CallOption) (*IsFinishOfficialNFTHeadTaskResp, error)
	// 完成创建空间任务
	FinishCreateSpaceTask(ctx context.Context, in *FinishCreateSpaceTaskReq, opts ...grpc.CallOption) (*FinishCreateSpaceTaskResp, error)
	// 完成订阅官方空间
	FinishJoinOfficialSpaceTask(ctx context.Context, in *FinishJoinOfficialSpaceTaskReq, opts ...grpc.CallOption) (*FinishJoinOfficialSpaceTaskResp, error)
	// 完成关注官方推特
	FinishFollowOfficialTwitterTask(ctx context.Context, in *FinishFollowOfficialTwitterTaskReq, opts ...grpc.CallOption) (*FinishFollowOfficialTwitterTaskResp, error)
	// 完成绑定推特任务
	FinishBindTwitterTask(ctx context.Context, in *FinishBindTwitterTaskReq, opts ...grpc.CallOption) (*FinishBindTwitterTaskResp, error)
	// 完成邀请绑定推特任务
	FinishInviteBindTwitterTask(ctx context.Context, in *FinishInviteBindTwitterTaskReq, opts ...grpc.CallOption) (*FinishInviteBindTwitterTaskResp, error)
	// 完成邀请绑定头像
	FinishInviteUploadNftHeadTask(ctx context.Context, in *FinishInviteUploadNftHeadTaskReq, opts ...grpc.CallOption) (*FinishInviteUploadNftHeadTaskResp, error)
	// 完成邀请关注官方推特
	FinishInviteFollowOfficialTwitterTask(ctx context.Context, in *FinishInviteFollowOfficialTwitterTaskReq, opts ...grpc.CallOption) (*FinishInviteFollowOfficialTwitterTaskResp, error)
	// 取消官方NFT头像任务
	CloseOfficialNFTHeadTask(ctx context.Context, in *CloseOfficialNFTHeadTaskReq, opts ...grpc.CallOption) (*CloseOfficialNFTHeadTaskResp, error)
	// 取消创建空间任务
	CancelCreateSpaceTask(ctx context.Context, in *CancelCreateSpaceTaskReq, opts ...grpc.CallOption) (*CancelCreateSpaceTaskResp, error)
	// 取消加入官方空间任务
	CancelClaimJoinOfficialSpaceTask(ctx context.Context, in *CancelClaimJoinOfficialSpaceTaskReq, opts ...grpc.CallOption) (*CancelClaimJoinOfficialSpaceTaskResp, error)
	// 取消加入官方空间任务
	CloseUploadNftHeadTask(ctx context.Context, in *CloseUploadNftHeadTaskReq, opts ...grpc.CallOption) (*CloseUploadNftHeadTaskResp, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*CreateTaskResp, error) {
	out := new(CreateTaskResp)
	err := c.cc.Invoke(ctx, "/task.taskService/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskList(ctx context.Context, in *GetTaskListReq, opts ...grpc.CallOption) (*GetTaskListResp, error) {
	out := new(GetTaskListResp)
	err := c.cc.Invoke(ctx, "/task.taskService/GetTaskList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetUserClaimTaskList(ctx context.Context, in *GetUserClaimTaskListReq, opts ...grpc.CallOption) (*GetUserClaimTaskListResp, error) {
	out := new(GetUserClaimTaskListResp)
	err := c.cc.Invoke(ctx, "/task.taskService/GetUserClaimTaskList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetUserTaskList(ctx context.Context, in *GetUserTaskListReq, opts ...grpc.CallOption) (*GetUserTaskListResp, error) {
	out := new(GetUserTaskListResp)
	err := c.cc.Invoke(ctx, "/task.taskService/GetUserTaskList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ClaimTaskRewards(ctx context.Context, in *ClaimTaskRewardsReq, opts ...grpc.CallOption) (*ClaimTaskRewardsResp, error) {
	out := new(ClaimTaskRewardsResp)
	err := c.cc.Invoke(ctx, "/task.taskService/ClaimTaskRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) DailyCheckIn(ctx context.Context, in *DailyCheckInReq, opts ...grpc.CallOption) (*DailyCheckInResp, error) {
	out := new(DailyCheckInResp)
	err := c.cc.Invoke(ctx, "/task.taskService/DailyCheckIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) IsFinishDailyChatNFTHeadWithNewUserTask(ctx context.Context, in *IsFinishDailyChatNFTHeadWithNewUserTaskReq, opts ...grpc.CallOption) (*IsFinishDailyChatNFTHeadWithNewUserTaskResp, error) {
	out := new(IsFinishDailyChatNFTHeadWithNewUserTaskResp)
	err := c.cc.Invoke(ctx, "/task.taskService/IsFinishDailyChatNFTHeadWithNewUserTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) FinishDailyChatNFTHeadWithNewUserTask(ctx context.Context, in *FinishDailyChatNFTHeadWithNewUserTaskReq, opts ...grpc.CallOption) (*FinishDailyChatNFTHeadWithNewUserTaskResp, error) {
	out := new(FinishDailyChatNFTHeadWithNewUserTaskResp)
	err := c.cc.Invoke(ctx, "/task.taskService/FinishDailyChatNFTHeadWithNewUserTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) IsFinishOfficialNFTHeadDailyChatWithNewUserTask(ctx context.Context, in *IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq, opts ...grpc.CallOption) (*IsFinishOfficialNFTHeadDailyChatWithNewUserTaskResp, error) {
	out := new(IsFinishOfficialNFTHeadDailyChatWithNewUserTaskResp)
	err := c.cc.Invoke(ctx, "/task.taskService/IsFinishOfficialNFTHeadDailyChatWithNewUserTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) FinishOfficialNFTHeadDailyChatWithNewUserTask(ctx context.Context, in *FinishOfficialNFTHeadDailyChatWithNewUserTaskReq, opts ...grpc.CallOption) (*FinishOfficialNFTHeadDailyChatWithNewUserTaskResp, error) {
	out := new(FinishOfficialNFTHeadDailyChatWithNewUserTaskResp)
	err := c.cc.Invoke(ctx, "/task.taskService/FinishOfficialNFTHeadDailyChatWithNewUserTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) FinishUploadNftHeadTask(ctx context.Context, in *FinishUploadNftHeadTaskReq, opts ...grpc.CallOption) (*FinishUploadNftHeadTaskResp, error) {
	out := new(FinishUploadNftHeadTaskResp)
	err := c.cc.Invoke(ctx, "/task.taskService/FinishUploadNftHeadTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) IsFinishUploadNftHeadTask(ctx context.Context, in *IsFinishUploadNftHeadTaskReq, opts ...grpc.CallOption) (*IsFinishUploadNftHeadTaskResp, error) {
	out := new(IsFinishUploadNftHeadTaskResp)
	err := c.cc.Invoke(ctx, "/task.taskService/IsFinishUploadNftHeadTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) FinishOfficialNFTHeadTask(ctx context.Context, in *FinishOfficialNFTHeadTaskReq, opts ...grpc.CallOption) (*FinishOfficialNFTHeadTaskResp, error) {
	out := new(FinishOfficialNFTHeadTaskResp)
	err := c.cc.Invoke(ctx, "/task.taskService/FinishOfficialNFTHeadTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) IsFinishOfficialNFTHeadTask(ctx context.Context, in *IsFinishOfficialNFTHeadTaskReq, opts ...grpc.CallOption) (*IsFinishOfficialNFTHeadTaskResp, error) {
	out := new(IsFinishOfficialNFTHeadTaskResp)
	err := c.cc.Invoke(ctx, "/task.taskService/IsFinishOfficialNFTHeadTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) FinishCreateSpaceTask(ctx context.Context, in *FinishCreateSpaceTaskReq, opts ...grpc.CallOption) (*FinishCreateSpaceTaskResp, error) {
	out := new(FinishCreateSpaceTaskResp)
	err := c.cc.Invoke(ctx, "/task.taskService/FinishCreateSpaceTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) FinishJoinOfficialSpaceTask(ctx context.Context, in *FinishJoinOfficialSpaceTaskReq, opts ...grpc.CallOption) (*FinishJoinOfficialSpaceTaskResp, error) {
	out := new(FinishJoinOfficialSpaceTaskResp)
	err := c.cc.Invoke(ctx, "/task.taskService/FinishJoinOfficialSpaceTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) FinishFollowOfficialTwitterTask(ctx context.Context, in *FinishFollowOfficialTwitterTaskReq, opts ...grpc.CallOption) (*FinishFollowOfficialTwitterTaskResp, error) {
	out := new(FinishFollowOfficialTwitterTaskResp)
	err := c.cc.Invoke(ctx, "/task.taskService/FinishFollowOfficialTwitterTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) FinishBindTwitterTask(ctx context.Context, in *FinishBindTwitterTaskReq, opts ...grpc.CallOption) (*FinishBindTwitterTaskResp, error) {
	out := new(FinishBindTwitterTaskResp)
	err := c.cc.Invoke(ctx, "/task.taskService/FinishBindTwitterTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) FinishInviteBindTwitterTask(ctx context.Context, in *FinishInviteBindTwitterTaskReq, opts ...grpc.CallOption) (*FinishInviteBindTwitterTaskResp, error) {
	out := new(FinishInviteBindTwitterTaskResp)
	err := c.cc.Invoke(ctx, "/task.taskService/FinishInviteBindTwitterTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) FinishInviteUploadNftHeadTask(ctx context.Context, in *FinishInviteUploadNftHeadTaskReq, opts ...grpc.CallOption) (*FinishInviteUploadNftHeadTaskResp, error) {
	out := new(FinishInviteUploadNftHeadTaskResp)
	err := c.cc.Invoke(ctx, "/task.taskService/FinishInviteUploadNftHeadTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) FinishInviteFollowOfficialTwitterTask(ctx context.Context, in *FinishInviteFollowOfficialTwitterTaskReq, opts ...grpc.CallOption) (*FinishInviteFollowOfficialTwitterTaskResp, error) {
	out := new(FinishInviteFollowOfficialTwitterTaskResp)
	err := c.cc.Invoke(ctx, "/task.taskService/FinishInviteFollowOfficialTwitterTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CloseOfficialNFTHeadTask(ctx context.Context, in *CloseOfficialNFTHeadTaskReq, opts ...grpc.CallOption) (*CloseOfficialNFTHeadTaskResp, error) {
	out := new(CloseOfficialNFTHeadTaskResp)
	err := c.cc.Invoke(ctx, "/task.taskService/CloseOfficialNFTHeadTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CancelCreateSpaceTask(ctx context.Context, in *CancelCreateSpaceTaskReq, opts ...grpc.CallOption) (*CancelCreateSpaceTaskResp, error) {
	out := new(CancelCreateSpaceTaskResp)
	err := c.cc.Invoke(ctx, "/task.taskService/CancelCreateSpaceTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CancelClaimJoinOfficialSpaceTask(ctx context.Context, in *CancelClaimJoinOfficialSpaceTaskReq, opts ...grpc.CallOption) (*CancelClaimJoinOfficialSpaceTaskResp, error) {
	out := new(CancelClaimJoinOfficialSpaceTaskResp)
	err := c.cc.Invoke(ctx, "/task.taskService/CancelClaimJoinOfficialSpaceTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CloseUploadNftHeadTask(ctx context.Context, in *CloseUploadNftHeadTaskReq, opts ...grpc.CallOption) (*CloseUploadNftHeadTaskResp, error) {
	out := new(CloseUploadNftHeadTaskResp)
	err := c.cc.Invoke(ctx, "/task.taskService/CloseUploadNftHeadTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations should embed UnimplementedTaskServiceServer
// for forward compatibility
type TaskServiceServer interface {
	CreateTask(context.Context, *CreateTaskReq) (*CreateTaskResp, error)
	GetTaskList(context.Context, *GetTaskListReq) (*GetTaskListResp, error)
	GetUserClaimTaskList(context.Context, *GetUserClaimTaskListReq) (*GetUserClaimTaskListResp, error)
	GetUserTaskList(context.Context, *GetUserTaskListReq) (*GetUserTaskListResp, error)
	ClaimTaskRewards(context.Context, *ClaimTaskRewardsReq) (*ClaimTaskRewardsResp, error)
	DailyCheckIn(context.Context, *DailyCheckInReq) (*DailyCheckInResp, error)
	// 是否完成携带NFT与新地址聊天任务
	IsFinishDailyChatNFTHeadWithNewUserTask(context.Context, *IsFinishDailyChatNFTHeadWithNewUserTaskReq) (*IsFinishDailyChatNFTHeadWithNewUserTaskResp, error)
	// 完成携带NFT与新地址聊天任务
	FinishDailyChatNFTHeadWithNewUserTask(context.Context, *FinishDailyChatNFTHeadWithNewUserTaskReq) (*FinishDailyChatNFTHeadWithNewUserTaskResp, error)
	// 是否完成携带官方NFT与新地址聊天任务
	IsFinishOfficialNFTHeadDailyChatWithNewUserTask(context.Context, *IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq) (*IsFinishOfficialNFTHeadDailyChatWithNewUserTaskResp, error)
	// 完成携带官方NFT与新地址聊天任务
	FinishOfficialNFTHeadDailyChatWithNewUserTask(context.Context, *FinishOfficialNFTHeadDailyChatWithNewUserTaskReq) (*FinishOfficialNFTHeadDailyChatWithNewUserTaskResp, error)
	// 完成上传NFT头像任务
	FinishUploadNftHeadTask(context.Context, *FinishUploadNftHeadTaskReq) (*FinishUploadNftHeadTaskResp, error)
	// 是否完成上传NFT头像任务
	IsFinishUploadNftHeadTask(context.Context, *IsFinishUploadNftHeadTaskReq) (*IsFinishUploadNftHeadTaskResp, error)
	// 完成官方NFT头像任务
	FinishOfficialNFTHeadTask(context.Context, *FinishOfficialNFTHeadTaskReq) (*FinishOfficialNFTHeadTaskResp, error)
	// 是否完成官方NFT头像任务
	IsFinishOfficialNFTHeadTask(context.Context, *IsFinishOfficialNFTHeadTaskReq) (*IsFinishOfficialNFTHeadTaskResp, error)
	// 完成创建空间任务
	FinishCreateSpaceTask(context.Context, *FinishCreateSpaceTaskReq) (*FinishCreateSpaceTaskResp, error)
	// 完成订阅官方空间
	FinishJoinOfficialSpaceTask(context.Context, *FinishJoinOfficialSpaceTaskReq) (*FinishJoinOfficialSpaceTaskResp, error)
	// 完成关注官方推特
	FinishFollowOfficialTwitterTask(context.Context, *FinishFollowOfficialTwitterTaskReq) (*FinishFollowOfficialTwitterTaskResp, error)
	// 完成绑定推特任务
	FinishBindTwitterTask(context.Context, *FinishBindTwitterTaskReq) (*FinishBindTwitterTaskResp, error)
	// 完成邀请绑定推特任务
	FinishInviteBindTwitterTask(context.Context, *FinishInviteBindTwitterTaskReq) (*FinishInviteBindTwitterTaskResp, error)
	// 完成邀请绑定头像
	FinishInviteUploadNftHeadTask(context.Context, *FinishInviteUploadNftHeadTaskReq) (*FinishInviteUploadNftHeadTaskResp, error)
	// 完成邀请关注官方推特
	FinishInviteFollowOfficialTwitterTask(context.Context, *FinishInviteFollowOfficialTwitterTaskReq) (*FinishInviteFollowOfficialTwitterTaskResp, error)
	// 取消官方NFT头像任务
	CloseOfficialNFTHeadTask(context.Context, *CloseOfficialNFTHeadTaskReq) (*CloseOfficialNFTHeadTaskResp, error)
	// 取消创建空间任务
	CancelCreateSpaceTask(context.Context, *CancelCreateSpaceTaskReq) (*CancelCreateSpaceTaskResp, error)
	// 取消加入官方空间任务
	CancelClaimJoinOfficialSpaceTask(context.Context, *CancelClaimJoinOfficialSpaceTaskReq) (*CancelClaimJoinOfficialSpaceTaskResp, error)
	// 取消加入官方空间任务
	CloseUploadNftHeadTask(context.Context, *CloseUploadNftHeadTaskReq) (*CloseUploadNftHeadTaskResp, error)
}

// UnimplementedTaskServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (UnimplementedTaskServiceServer) CreateTask(context.Context, *CreateTaskReq) (*CreateTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskServiceServer) GetTaskList(context.Context, *GetTaskListReq) (*GetTaskListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskList not implemented")
}
func (UnimplementedTaskServiceServer) GetUserClaimTaskList(context.Context, *GetUserClaimTaskListReq) (*GetUserClaimTaskListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserClaimTaskList not implemented")
}
func (UnimplementedTaskServiceServer) GetUserTaskList(context.Context, *GetUserTaskListReq) (*GetUserTaskListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTaskList not implemented")
}
func (UnimplementedTaskServiceServer) ClaimTaskRewards(context.Context, *ClaimTaskRewardsReq) (*ClaimTaskRewardsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimTaskRewards not implemented")
}
func (UnimplementedTaskServiceServer) DailyCheckIn(context.Context, *DailyCheckInReq) (*DailyCheckInResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DailyCheckIn not implemented")
}
func (UnimplementedTaskServiceServer) IsFinishDailyChatNFTHeadWithNewUserTask(context.Context, *IsFinishDailyChatNFTHeadWithNewUserTaskReq) (*IsFinishDailyChatNFTHeadWithNewUserTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFinishDailyChatNFTHeadWithNewUserTask not implemented")
}
func (UnimplementedTaskServiceServer) FinishDailyChatNFTHeadWithNewUserTask(context.Context, *FinishDailyChatNFTHeadWithNewUserTaskReq) (*FinishDailyChatNFTHeadWithNewUserTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishDailyChatNFTHeadWithNewUserTask not implemented")
}
func (UnimplementedTaskServiceServer) IsFinishOfficialNFTHeadDailyChatWithNewUserTask(context.Context, *IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq) (*IsFinishOfficialNFTHeadDailyChatWithNewUserTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFinishOfficialNFTHeadDailyChatWithNewUserTask not implemented")
}
func (UnimplementedTaskServiceServer) FinishOfficialNFTHeadDailyChatWithNewUserTask(context.Context, *FinishOfficialNFTHeadDailyChatWithNewUserTaskReq) (*FinishOfficialNFTHeadDailyChatWithNewUserTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishOfficialNFTHeadDailyChatWithNewUserTask not implemented")
}
func (UnimplementedTaskServiceServer) FinishUploadNftHeadTask(context.Context, *FinishUploadNftHeadTaskReq) (*FinishUploadNftHeadTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishUploadNftHeadTask not implemented")
}
func (UnimplementedTaskServiceServer) IsFinishUploadNftHeadTask(context.Context, *IsFinishUploadNftHeadTaskReq) (*IsFinishUploadNftHeadTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFinishUploadNftHeadTask not implemented")
}
func (UnimplementedTaskServiceServer) FinishOfficialNFTHeadTask(context.Context, *FinishOfficialNFTHeadTaskReq) (*FinishOfficialNFTHeadTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishOfficialNFTHeadTask not implemented")
}
func (UnimplementedTaskServiceServer) IsFinishOfficialNFTHeadTask(context.Context, *IsFinishOfficialNFTHeadTaskReq) (*IsFinishOfficialNFTHeadTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFinishOfficialNFTHeadTask not implemented")
}
func (UnimplementedTaskServiceServer) FinishCreateSpaceTask(context.Context, *FinishCreateSpaceTaskReq) (*FinishCreateSpaceTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishCreateSpaceTask not implemented")
}
func (UnimplementedTaskServiceServer) FinishJoinOfficialSpaceTask(context.Context, *FinishJoinOfficialSpaceTaskReq) (*FinishJoinOfficialSpaceTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishJoinOfficialSpaceTask not implemented")
}
func (UnimplementedTaskServiceServer) FinishFollowOfficialTwitterTask(context.Context, *FinishFollowOfficialTwitterTaskReq) (*FinishFollowOfficialTwitterTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishFollowOfficialTwitterTask not implemented")
}
func (UnimplementedTaskServiceServer) FinishBindTwitterTask(context.Context, *FinishBindTwitterTaskReq) (*FinishBindTwitterTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishBindTwitterTask not implemented")
}
func (UnimplementedTaskServiceServer) FinishInviteBindTwitterTask(context.Context, *FinishInviteBindTwitterTaskReq) (*FinishInviteBindTwitterTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishInviteBindTwitterTask not implemented")
}
func (UnimplementedTaskServiceServer) FinishInviteUploadNftHeadTask(context.Context, *FinishInviteUploadNftHeadTaskReq) (*FinishInviteUploadNftHeadTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishInviteUploadNftHeadTask not implemented")
}
func (UnimplementedTaskServiceServer) FinishInviteFollowOfficialTwitterTask(context.Context, *FinishInviteFollowOfficialTwitterTaskReq) (*FinishInviteFollowOfficialTwitterTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishInviteFollowOfficialTwitterTask not implemented")
}
func (UnimplementedTaskServiceServer) CloseOfficialNFTHeadTask(context.Context, *CloseOfficialNFTHeadTaskReq) (*CloseOfficialNFTHeadTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseOfficialNFTHeadTask not implemented")
}
func (UnimplementedTaskServiceServer) CancelCreateSpaceTask(context.Context, *CancelCreateSpaceTaskReq) (*CancelCreateSpaceTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCreateSpaceTask not implemented")
}
func (UnimplementedTaskServiceServer) CancelClaimJoinOfficialSpaceTask(context.Context, *CancelClaimJoinOfficialSpaceTaskReq) (*CancelClaimJoinOfficialSpaceTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelClaimJoinOfficialSpaceTask not implemented")
}
func (UnimplementedTaskServiceServer) CloseUploadNftHeadTask(context.Context, *CloseUploadNftHeadTaskReq) (*CloseUploadNftHeadTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseUploadNftHeadTask not implemented")
}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CreateTask(ctx, req.(*CreateTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/GetTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskList(ctx, req.(*GetTaskListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetUserClaimTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserClaimTaskListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetUserClaimTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/GetUserClaimTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetUserClaimTaskList(ctx, req.(*GetUserClaimTaskListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetUserTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTaskListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetUserTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/GetUserTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetUserTaskList(ctx, req.(*GetUserTaskListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ClaimTaskRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimTaskRewardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ClaimTaskRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/ClaimTaskRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ClaimTaskRewards(ctx, req.(*ClaimTaskRewardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_DailyCheckIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyCheckInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).DailyCheckIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/DailyCheckIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).DailyCheckIn(ctx, req.(*DailyCheckInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_IsFinishDailyChatNFTHeadWithNewUserTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFinishDailyChatNFTHeadWithNewUserTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).IsFinishDailyChatNFTHeadWithNewUserTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/IsFinishDailyChatNFTHeadWithNewUserTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).IsFinishDailyChatNFTHeadWithNewUserTask(ctx, req.(*IsFinishDailyChatNFTHeadWithNewUserTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_FinishDailyChatNFTHeadWithNewUserTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishDailyChatNFTHeadWithNewUserTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).FinishDailyChatNFTHeadWithNewUserTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/FinishDailyChatNFTHeadWithNewUserTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).FinishDailyChatNFTHeadWithNewUserTask(ctx, req.(*FinishDailyChatNFTHeadWithNewUserTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_IsFinishOfficialNFTHeadDailyChatWithNewUserTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).IsFinishOfficialNFTHeadDailyChatWithNewUserTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/IsFinishOfficialNFTHeadDailyChatWithNewUserTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).IsFinishOfficialNFTHeadDailyChatWithNewUserTask(ctx, req.(*IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_FinishOfficialNFTHeadDailyChatWithNewUserTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishOfficialNFTHeadDailyChatWithNewUserTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).FinishOfficialNFTHeadDailyChatWithNewUserTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/FinishOfficialNFTHeadDailyChatWithNewUserTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).FinishOfficialNFTHeadDailyChatWithNewUserTask(ctx, req.(*FinishOfficialNFTHeadDailyChatWithNewUserTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_FinishUploadNftHeadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishUploadNftHeadTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).FinishUploadNftHeadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/FinishUploadNftHeadTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).FinishUploadNftHeadTask(ctx, req.(*FinishUploadNftHeadTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_IsFinishUploadNftHeadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFinishUploadNftHeadTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).IsFinishUploadNftHeadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/IsFinishUploadNftHeadTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).IsFinishUploadNftHeadTask(ctx, req.(*IsFinishUploadNftHeadTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_FinishOfficialNFTHeadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishOfficialNFTHeadTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).FinishOfficialNFTHeadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/FinishOfficialNFTHeadTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).FinishOfficialNFTHeadTask(ctx, req.(*FinishOfficialNFTHeadTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_IsFinishOfficialNFTHeadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFinishOfficialNFTHeadTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).IsFinishOfficialNFTHeadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/IsFinishOfficialNFTHeadTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).IsFinishOfficialNFTHeadTask(ctx, req.(*IsFinishOfficialNFTHeadTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_FinishCreateSpaceTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishCreateSpaceTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).FinishCreateSpaceTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/FinishCreateSpaceTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).FinishCreateSpaceTask(ctx, req.(*FinishCreateSpaceTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_FinishJoinOfficialSpaceTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishJoinOfficialSpaceTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).FinishJoinOfficialSpaceTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/FinishJoinOfficialSpaceTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).FinishJoinOfficialSpaceTask(ctx, req.(*FinishJoinOfficialSpaceTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_FinishFollowOfficialTwitterTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishFollowOfficialTwitterTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).FinishFollowOfficialTwitterTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/FinishFollowOfficialTwitterTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).FinishFollowOfficialTwitterTask(ctx, req.(*FinishFollowOfficialTwitterTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_FinishBindTwitterTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishBindTwitterTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).FinishBindTwitterTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/FinishBindTwitterTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).FinishBindTwitterTask(ctx, req.(*FinishBindTwitterTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_FinishInviteBindTwitterTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishInviteBindTwitterTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).FinishInviteBindTwitterTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/FinishInviteBindTwitterTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).FinishInviteBindTwitterTask(ctx, req.(*FinishInviteBindTwitterTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_FinishInviteUploadNftHeadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishInviteUploadNftHeadTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).FinishInviteUploadNftHeadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/FinishInviteUploadNftHeadTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).FinishInviteUploadNftHeadTask(ctx, req.(*FinishInviteUploadNftHeadTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_FinishInviteFollowOfficialTwitterTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishInviteFollowOfficialTwitterTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).FinishInviteFollowOfficialTwitterTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/FinishInviteFollowOfficialTwitterTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).FinishInviteFollowOfficialTwitterTask(ctx, req.(*FinishInviteFollowOfficialTwitterTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CloseOfficialNFTHeadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseOfficialNFTHeadTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CloseOfficialNFTHeadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/CloseOfficialNFTHeadTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CloseOfficialNFTHeadTask(ctx, req.(*CloseOfficialNFTHeadTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CancelCreateSpaceTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelCreateSpaceTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CancelCreateSpaceTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/CancelCreateSpaceTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CancelCreateSpaceTask(ctx, req.(*CancelCreateSpaceTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CancelClaimJoinOfficialSpaceTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelClaimJoinOfficialSpaceTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CancelClaimJoinOfficialSpaceTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/CancelClaimJoinOfficialSpaceTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CancelClaimJoinOfficialSpaceTask(ctx, req.(*CancelClaimJoinOfficialSpaceTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CloseUploadNftHeadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseUploadNftHeadTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CloseUploadNftHeadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.taskService/CloseUploadNftHeadTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CloseUploadNftHeadTask(ctx, req.(*CloseUploadNftHeadTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.taskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskService_CreateTask_Handler,
		},
		{
			MethodName: "GetTaskList",
			Handler:    _TaskService_GetTaskList_Handler,
		},
		{
			MethodName: "GetUserClaimTaskList",
			Handler:    _TaskService_GetUserClaimTaskList_Handler,
		},
		{
			MethodName: "GetUserTaskList",
			Handler:    _TaskService_GetUserTaskList_Handler,
		},
		{
			MethodName: "ClaimTaskRewards",
			Handler:    _TaskService_ClaimTaskRewards_Handler,
		},
		{
			MethodName: "DailyCheckIn",
			Handler:    _TaskService_DailyCheckIn_Handler,
		},
		{
			MethodName: "IsFinishDailyChatNFTHeadWithNewUserTask",
			Handler:    _TaskService_IsFinishDailyChatNFTHeadWithNewUserTask_Handler,
		},
		{
			MethodName: "FinishDailyChatNFTHeadWithNewUserTask",
			Handler:    _TaskService_FinishDailyChatNFTHeadWithNewUserTask_Handler,
		},
		{
			MethodName: "IsFinishOfficialNFTHeadDailyChatWithNewUserTask",
			Handler:    _TaskService_IsFinishOfficialNFTHeadDailyChatWithNewUserTask_Handler,
		},
		{
			MethodName: "FinishOfficialNFTHeadDailyChatWithNewUserTask",
			Handler:    _TaskService_FinishOfficialNFTHeadDailyChatWithNewUserTask_Handler,
		},
		{
			MethodName: "FinishUploadNftHeadTask",
			Handler:    _TaskService_FinishUploadNftHeadTask_Handler,
		},
		{
			MethodName: "IsFinishUploadNftHeadTask",
			Handler:    _TaskService_IsFinishUploadNftHeadTask_Handler,
		},
		{
			MethodName: "FinishOfficialNFTHeadTask",
			Handler:    _TaskService_FinishOfficialNFTHeadTask_Handler,
		},
		{
			MethodName: "IsFinishOfficialNFTHeadTask",
			Handler:    _TaskService_IsFinishOfficialNFTHeadTask_Handler,
		},
		{
			MethodName: "FinishCreateSpaceTask",
			Handler:    _TaskService_FinishCreateSpaceTask_Handler,
		},
		{
			MethodName: "FinishJoinOfficialSpaceTask",
			Handler:    _TaskService_FinishJoinOfficialSpaceTask_Handler,
		},
		{
			MethodName: "FinishFollowOfficialTwitterTask",
			Handler:    _TaskService_FinishFollowOfficialTwitterTask_Handler,
		},
		{
			MethodName: "FinishBindTwitterTask",
			Handler:    _TaskService_FinishBindTwitterTask_Handler,
		},
		{
			MethodName: "FinishInviteBindTwitterTask",
			Handler:    _TaskService_FinishInviteBindTwitterTask_Handler,
		},
		{
			MethodName: "FinishInviteUploadNftHeadTask",
			Handler:    _TaskService_FinishInviteUploadNftHeadTask_Handler,
		},
		{
			MethodName: "FinishInviteFollowOfficialTwitterTask",
			Handler:    _TaskService_FinishInviteFollowOfficialTwitterTask_Handler,
		},
		{
			MethodName: "CloseOfficialNFTHeadTask",
			Handler:    _TaskService_CloseOfficialNFTHeadTask_Handler,
		},
		{
			MethodName: "CancelCreateSpaceTask",
			Handler:    _TaskService_CancelCreateSpaceTask_Handler,
		},
		{
			MethodName: "CancelClaimJoinOfficialSpaceTask",
			Handler:    _TaskService_CancelClaimJoinOfficialSpaceTask_Handler,
		},
		{
			MethodName: "CloseUploadNftHeadTask",
			Handler:    _TaskService_CloseUploadNftHeadTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task/task.proto",
}
