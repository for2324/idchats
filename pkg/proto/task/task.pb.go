// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: task/task.proto

package pbTask

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode int32  `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
}

func (x *CommonResp) Reset() {
	*x = CommonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResp) ProtoMessage() {}

func (x *CommonResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResp.ProtoReflect.Descriptor instead.
func (*CommonResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{0}
}

func (x *CommonResp) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *CommonResp) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type GetUserTaskListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Classify    string `protobuf:"bytes,3,opt,name=Classify,proto3" json:"Classify,omitempty"`
}

func (x *GetUserTaskListReq) Reset() {
	*x = GetUserTaskListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserTaskListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTaskListReq) ProtoMessage() {}

func (x *GetUserTaskListReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTaskListReq.ProtoReflect.Descriptor instead.
func (*GetUserTaskListReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{1}
}

func (x *GetUserTaskListReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetUserTaskListReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserTaskListReq) GetClassify() string {
	if x != nil {
		return x.Classify
	}
	return ""
}

type GetUserTaskListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	Data       []*UserTask `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *GetUserTaskListResp) Reset() {
	*x = GetUserTaskListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserTaskListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTaskListResp) ProtoMessage() {}

func (x *GetUserTaskListResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTaskListResp.ProtoReflect.Descriptor instead.
func (*GetUserTaskListResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{2}
}

func (x *GetUserTaskListResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetUserTaskListResp) GetData() []*UserTask {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	TaskId    int32  `protobuf:"varint,3,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	Status    int32  `protobuf:"varint,4,opt,name=Status,proto3" json:"Status,omitempty"` // 0:未完成 1:已完成 2:已领取
	Progress  int32  `protobuf:"varint,5,opt,name=Progress,proto3" json:"Progress,omitempty"`
	StartTime int64  `protobuf:"varint,6,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime   int64  `protobuf:"varint,7,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	Task      *Task  `protobuf:"bytes,8,opt,name=Task,proto3" json:"Task,omitempty"`
}

func (x *UserTask) Reset() {
	*x = UserTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTask) ProtoMessage() {}

func (x *UserTask) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTask.ProtoReflect.Descriptor instead.
func (*UserTask) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{3}
}

func (x *UserTask) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserTask) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserTask) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *UserTask) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserTask) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *UserTask) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *UserTask) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *UserTask) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Type            string `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Classify        string `protobuf:"bytes,4,opt,name=Classify,proto3" json:"Classify,omitempty"`
	Desc            string `protobuf:"bytes,5,opt,name=Desc,proto3" json:"Desc,omitempty"`
	Reward          int32  `protobuf:"varint,6,opt,name=Reward,proto3" json:"Reward,omitempty"`
	CompletionCount int32  `protobuf:"varint,7,opt,name=CompletionCount,proto3" json:"CompletionCount,omitempty"`
	CreateTime      int64  `protobuf:"varint,8,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	UpdateTime      int64  `protobuf:"varint,9,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	ClaimConditions string `protobuf:"bytes,10,opt,name=ClaimConditions,proto3" json:"ClaimConditions,omitempty"`
	Head            string `protobuf:"bytes,11,opt,name=Head,proto3" json:"Head,omitempty"`
	EventType       string `protobuf:"bytes,12,opt,name=EventType,proto3" json:"EventType,omitempty"`
	Status          int32  `protobuf:"varint,13,opt,name=Status,proto3" json:"Status,omitempty"`
	StartTime       int64  `protobuf:"varint,14,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime         int64  `protobuf:"varint,15,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{4}
}

func (x *Task) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Task) GetClassify() string {
	if x != nil {
		return x.Classify
	}
	return ""
}

func (x *Task) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Task) GetReward() int32 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *Task) GetCompletionCount() int32 {
	if x != nil {
		return x.CompletionCount
	}
	return 0
}

func (x *Task) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Task) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *Task) GetClaimConditions() string {
	if x != nil {
		return x.ClaimConditions
	}
	return ""
}

func (x *Task) GetHead() string {
	if x != nil {
		return x.Head
	}
	return ""
}

func (x *Task) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *Task) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Task) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Task) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type ClaimTaskRewardsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	TaskId      int32  `protobuf:"varint,3,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *ClaimTaskRewardsReq) Reset() {
	*x = ClaimTaskRewardsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimTaskRewardsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimTaskRewardsReq) ProtoMessage() {}

func (x *ClaimTaskRewardsReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimTaskRewardsReq.ProtoReflect.Descriptor instead.
func (*ClaimTaskRewardsReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{5}
}

func (x *ClaimTaskRewardsReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *ClaimTaskRewardsReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ClaimTaskRewardsReq) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type ClaimTaskRewardsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *ClaimTaskRewardsResp) Reset() {
	*x = ClaimTaskRewardsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimTaskRewardsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimTaskRewardsResp) ProtoMessage() {}

func (x *ClaimTaskRewardsResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimTaskRewardsResp.ProtoReflect.Descriptor instead.
func (*ClaimTaskRewardsResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{6}
}

func (x *ClaimTaskRewardsResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type CreateTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string  `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	TaskList    []*Task `protobuf:"bytes,2,rep,name=TaskList,proto3" json:"TaskList,omitempty"`
}

func (x *CreateTaskReq) Reset() {
	*x = CreateTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskReq) ProtoMessage() {}

func (x *CreateTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskReq.ProtoReflect.Descriptor instead.
func (*CreateTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *CreateTaskReq) GetTaskList() []*Task {
	if x != nil {
		return x.TaskList
	}
	return nil
}

type CreateTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *CreateTaskResp) Reset() {
	*x = CreateTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskResp) ProtoMessage() {}

func (x *CreateTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskResp.ProtoReflect.Descriptor instead.
func (*CreateTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{8}
}

func (x *CreateTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type GetTaskListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	Classify    string `protobuf:"bytes,2,opt,name=Classify,proto3" json:"Classify,omitempty"`
}

func (x *GetTaskListReq) Reset() {
	*x = GetTaskListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskListReq) ProtoMessage() {}

func (x *GetTaskListReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskListReq.ProtoReflect.Descriptor instead.
func (*GetTaskListReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{9}
}

func (x *GetTaskListReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetTaskListReq) GetClassify() string {
	if x != nil {
		return x.Classify
	}
	return ""
}

type GetTaskListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	Data       []*Task     `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *GetTaskListResp) Reset() {
	*x = GetTaskListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskListResp) ProtoMessage() {}

func (x *GetTaskListResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskListResp.ProtoReflect.Descriptor instead.
func (*GetTaskListResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{10}
}

func (x *GetTaskListResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetTaskListResp) GetData() []*Task {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetUserClaimTaskListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Status      int32  `protobuf:"varint,3,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *GetUserClaimTaskListReq) Reset() {
	*x = GetUserClaimTaskListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserClaimTaskListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserClaimTaskListReq) ProtoMessage() {}

func (x *GetUserClaimTaskListReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserClaimTaskListReq.ProtoReflect.Descriptor instead.
func (*GetUserClaimTaskListReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{11}
}

func (x *GetUserClaimTaskListReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetUserClaimTaskListReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserClaimTaskListReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type GetUserClaimTaskListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	Data       []*UserTask `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *GetUserClaimTaskListResp) Reset() {
	*x = GetUserClaimTaskListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserClaimTaskListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserClaimTaskListResp) ProtoMessage() {}

func (x *GetUserClaimTaskListResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserClaimTaskListResp.ProtoReflect.Descriptor instead.
func (*GetUserClaimTaskListResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{12}
}

func (x *GetUserClaimTaskListResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetUserClaimTaskListResp) GetData() []*UserTask {
	if x != nil {
		return x.Data
	}
	return nil
}

type CheckTaskIsFinishedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	TaskId      int32  `protobuf:"varint,3,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *CheckTaskIsFinishedReq) Reset() {
	*x = CheckTaskIsFinishedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTaskIsFinishedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTaskIsFinishedReq) ProtoMessage() {}

func (x *CheckTaskIsFinishedReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTaskIsFinishedReq.ProtoReflect.Descriptor instead.
func (*CheckTaskIsFinishedReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{13}
}

func (x *CheckTaskIsFinishedReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *CheckTaskIsFinishedReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckTaskIsFinishedReq) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type CheckTaskIsFinishedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	IsFinished bool        `protobuf:"varint,2,opt,name=IsFinished,proto3" json:"IsFinished,omitempty"`
}

func (x *CheckTaskIsFinishedResp) Reset() {
	*x = CheckTaskIsFinishedResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTaskIsFinishedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTaskIsFinishedResp) ProtoMessage() {}

func (x *CheckTaskIsFinishedResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTaskIsFinishedResp.ProtoReflect.Descriptor instead.
func (*CheckTaskIsFinishedResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{14}
}

func (x *CheckTaskIsFinishedResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *CheckTaskIsFinishedResp) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

type IncreaseProgressCreateSpaceTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Date        string `protobuf:"bytes,3,opt,name=Date,proto3" json:"Date,omitempty"`
}

func (x *IncreaseProgressCreateSpaceTaskReq) Reset() {
	*x = IncreaseProgressCreateSpaceTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncreaseProgressCreateSpaceTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseProgressCreateSpaceTaskReq) ProtoMessage() {}

func (x *IncreaseProgressCreateSpaceTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseProgressCreateSpaceTaskReq.ProtoReflect.Descriptor instead.
func (*IncreaseProgressCreateSpaceTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{15}
}

func (x *IncreaseProgressCreateSpaceTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *IncreaseProgressCreateSpaceTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IncreaseProgressCreateSpaceTaskReq) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type IncreaseProgressCreateSpaceTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *IncreaseProgressCreateSpaceTaskResp) Reset() {
	*x = IncreaseProgressCreateSpaceTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncreaseProgressCreateSpaceTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseProgressCreateSpaceTaskResp) ProtoMessage() {}

func (x *IncreaseProgressCreateSpaceTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseProgressCreateSpaceTaskResp.ProtoReflect.Descriptor instead.
func (*IncreaseProgressCreateSpaceTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{16}
}

func (x *IncreaseProgressCreateSpaceTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type DailyCheckInReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *DailyCheckInReq) Reset() {
	*x = DailyCheckInReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyCheckInReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyCheckInReq) ProtoMessage() {}

func (x *DailyCheckInReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyCheckInReq.ProtoReflect.Descriptor instead.
func (*DailyCheckInReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{17}
}

func (x *DailyCheckInReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *DailyCheckInReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type DailyCheckInResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *DailyCheckInResp) Reset() {
	*x = DailyCheckInResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyCheckInResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyCheckInResp) ProtoMessage() {}

func (x *DailyCheckInResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyCheckInResp.ProtoReflect.Descriptor instead.
func (*DailyCheckInResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{18}
}

func (x *DailyCheckInResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type CancelClaimJoinOfficialSpaceTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *CancelClaimJoinOfficialSpaceTaskReq) Reset() {
	*x = CancelClaimJoinOfficialSpaceTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelClaimJoinOfficialSpaceTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelClaimJoinOfficialSpaceTaskReq) ProtoMessage() {}

func (x *CancelClaimJoinOfficialSpaceTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelClaimJoinOfficialSpaceTaskReq.ProtoReflect.Descriptor instead.
func (*CancelClaimJoinOfficialSpaceTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{19}
}

func (x *CancelClaimJoinOfficialSpaceTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *CancelClaimJoinOfficialSpaceTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CancelClaimJoinOfficialSpaceTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *CancelClaimJoinOfficialSpaceTaskResp) Reset() {
	*x = CancelClaimJoinOfficialSpaceTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelClaimJoinOfficialSpaceTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelClaimJoinOfficialSpaceTaskResp) ProtoMessage() {}

func (x *CancelClaimJoinOfficialSpaceTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelClaimJoinOfficialSpaceTaskResp.ProtoReflect.Descriptor instead.
func (*CancelClaimJoinOfficialSpaceTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{20}
}

func (x *CancelClaimJoinOfficialSpaceTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type CloseUploadNftHeadTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *CloseUploadNftHeadTaskReq) Reset() {
	*x = CloseUploadNftHeadTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseUploadNftHeadTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseUploadNftHeadTaskReq) ProtoMessage() {}

func (x *CloseUploadNftHeadTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseUploadNftHeadTaskReq.ProtoReflect.Descriptor instead.
func (*CloseUploadNftHeadTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{21}
}

func (x *CloseUploadNftHeadTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *CloseUploadNftHeadTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CloseUploadNftHeadTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *CloseUploadNftHeadTaskResp) Reset() {
	*x = CloseUploadNftHeadTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseUploadNftHeadTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseUploadNftHeadTaskResp) ProtoMessage() {}

func (x *CloseUploadNftHeadTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseUploadNftHeadTaskResp.ProtoReflect.Descriptor instead.
func (*CloseUploadNftHeadTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{22}
}

func (x *CloseUploadNftHeadTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type CancelCreateSpaceTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *CancelCreateSpaceTaskReq) Reset() {
	*x = CancelCreateSpaceTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelCreateSpaceTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelCreateSpaceTaskReq) ProtoMessage() {}

func (x *CancelCreateSpaceTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelCreateSpaceTaskReq.ProtoReflect.Descriptor instead.
func (*CancelCreateSpaceTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{23}
}

func (x *CancelCreateSpaceTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *CancelCreateSpaceTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CancelCreateSpaceTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *CancelCreateSpaceTaskResp) Reset() {
	*x = CancelCreateSpaceTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelCreateSpaceTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelCreateSpaceTaskResp) ProtoMessage() {}

func (x *CancelCreateSpaceTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelCreateSpaceTaskResp.ProtoReflect.Descriptor instead.
func (*CancelCreateSpaceTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{24}
}

func (x *CancelCreateSpaceTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type CloseOfficialNFTHeadTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *CloseOfficialNFTHeadTaskReq) Reset() {
	*x = CloseOfficialNFTHeadTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseOfficialNFTHeadTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseOfficialNFTHeadTaskReq) ProtoMessage() {}

func (x *CloseOfficialNFTHeadTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseOfficialNFTHeadTaskReq.ProtoReflect.Descriptor instead.
func (*CloseOfficialNFTHeadTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{25}
}

func (x *CloseOfficialNFTHeadTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *CloseOfficialNFTHeadTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CloseOfficialNFTHeadTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *CloseOfficialNFTHeadTaskResp) Reset() {
	*x = CloseOfficialNFTHeadTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseOfficialNFTHeadTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseOfficialNFTHeadTaskResp) ProtoMessage() {}

func (x *CloseOfficialNFTHeadTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseOfficialNFTHeadTaskResp.ProtoReflect.Descriptor instead.
func (*CloseOfficialNFTHeadTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{26}
}

func (x *CloseOfficialNFTHeadTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type FinishInviteFollowOfficialTwitterTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	FormUserId  string `protobuf:"bytes,3,opt,name=formUserId,proto3" json:"formUserId,omitempty"`
}

func (x *FinishInviteFollowOfficialTwitterTaskReq) Reset() {
	*x = FinishInviteFollowOfficialTwitterTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishInviteFollowOfficialTwitterTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishInviteFollowOfficialTwitterTaskReq) ProtoMessage() {}

func (x *FinishInviteFollowOfficialTwitterTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishInviteFollowOfficialTwitterTaskReq.ProtoReflect.Descriptor instead.
func (*FinishInviteFollowOfficialTwitterTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{27}
}

func (x *FinishInviteFollowOfficialTwitterTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *FinishInviteFollowOfficialTwitterTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FinishInviteFollowOfficialTwitterTaskReq) GetFormUserId() string {
	if x != nil {
		return x.FormUserId
	}
	return ""
}

type FinishInviteFollowOfficialTwitterTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *FinishInviteFollowOfficialTwitterTaskResp) Reset() {
	*x = FinishInviteFollowOfficialTwitterTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishInviteFollowOfficialTwitterTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishInviteFollowOfficialTwitterTaskResp) ProtoMessage() {}

func (x *FinishInviteFollowOfficialTwitterTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishInviteFollowOfficialTwitterTaskResp.ProtoReflect.Descriptor instead.
func (*FinishInviteFollowOfficialTwitterTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{28}
}

func (x *FinishInviteFollowOfficialTwitterTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type FinishInviteUploadNftHeadTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	FormUserId  string `protobuf:"bytes,3,opt,name=formUserId,proto3" json:"formUserId,omitempty"`
}

func (x *FinishInviteUploadNftHeadTaskReq) Reset() {
	*x = FinishInviteUploadNftHeadTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishInviteUploadNftHeadTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishInviteUploadNftHeadTaskReq) ProtoMessage() {}

func (x *FinishInviteUploadNftHeadTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishInviteUploadNftHeadTaskReq.ProtoReflect.Descriptor instead.
func (*FinishInviteUploadNftHeadTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{29}
}

func (x *FinishInviteUploadNftHeadTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *FinishInviteUploadNftHeadTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FinishInviteUploadNftHeadTaskReq) GetFormUserId() string {
	if x != nil {
		return x.FormUserId
	}
	return ""
}

type FinishInviteUploadNftHeadTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *FinishInviteUploadNftHeadTaskResp) Reset() {
	*x = FinishInviteUploadNftHeadTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishInviteUploadNftHeadTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishInviteUploadNftHeadTaskResp) ProtoMessage() {}

func (x *FinishInviteUploadNftHeadTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishInviteUploadNftHeadTaskResp.ProtoReflect.Descriptor instead.
func (*FinishInviteUploadNftHeadTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{30}
}

func (x *FinishInviteUploadNftHeadTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type FinishInviteBindTwitterTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	FormUserId  string `protobuf:"bytes,3,opt,name=formUserId,proto3" json:"formUserId,omitempty"`
}

func (x *FinishInviteBindTwitterTaskReq) Reset() {
	*x = FinishInviteBindTwitterTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishInviteBindTwitterTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishInviteBindTwitterTaskReq) ProtoMessage() {}

func (x *FinishInviteBindTwitterTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishInviteBindTwitterTaskReq.ProtoReflect.Descriptor instead.
func (*FinishInviteBindTwitterTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{31}
}

func (x *FinishInviteBindTwitterTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *FinishInviteBindTwitterTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FinishInviteBindTwitterTaskReq) GetFormUserId() string {
	if x != nil {
		return x.FormUserId
	}
	return ""
}

type FinishInviteBindTwitterTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *FinishInviteBindTwitterTaskResp) Reset() {
	*x = FinishInviteBindTwitterTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishInviteBindTwitterTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishInviteBindTwitterTaskResp) ProtoMessage() {}

func (x *FinishInviteBindTwitterTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishInviteBindTwitterTaskResp.ProtoReflect.Descriptor instead.
func (*FinishInviteBindTwitterTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{32}
}

func (x *FinishInviteBindTwitterTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type FinishBindTwitterTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *FinishBindTwitterTaskReq) Reset() {
	*x = FinishBindTwitterTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishBindTwitterTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishBindTwitterTaskReq) ProtoMessage() {}

func (x *FinishBindTwitterTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishBindTwitterTaskReq.ProtoReflect.Descriptor instead.
func (*FinishBindTwitterTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{33}
}

func (x *FinishBindTwitterTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *FinishBindTwitterTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type FinishBindTwitterTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *FinishBindTwitterTaskResp) Reset() {
	*x = FinishBindTwitterTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishBindTwitterTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishBindTwitterTaskResp) ProtoMessage() {}

func (x *FinishBindTwitterTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishBindTwitterTaskResp.ProtoReflect.Descriptor instead.
func (*FinishBindTwitterTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{34}
}

func (x *FinishBindTwitterTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type FinishFollowOfficialTwitterTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *FinishFollowOfficialTwitterTaskReq) Reset() {
	*x = FinishFollowOfficialTwitterTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishFollowOfficialTwitterTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishFollowOfficialTwitterTaskReq) ProtoMessage() {}

func (x *FinishFollowOfficialTwitterTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishFollowOfficialTwitterTaskReq.ProtoReflect.Descriptor instead.
func (*FinishFollowOfficialTwitterTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{35}
}

func (x *FinishFollowOfficialTwitterTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *FinishFollowOfficialTwitterTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type FinishFollowOfficialTwitterTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *FinishFollowOfficialTwitterTaskResp) Reset() {
	*x = FinishFollowOfficialTwitterTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishFollowOfficialTwitterTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishFollowOfficialTwitterTaskResp) ProtoMessage() {}

func (x *FinishFollowOfficialTwitterTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishFollowOfficialTwitterTaskResp.ProtoReflect.Descriptor instead.
func (*FinishFollowOfficialTwitterTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{36}
}

func (x *FinishFollowOfficialTwitterTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type FinishJoinOfficialSpaceTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *FinishJoinOfficialSpaceTaskReq) Reset() {
	*x = FinishJoinOfficialSpaceTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishJoinOfficialSpaceTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishJoinOfficialSpaceTaskReq) ProtoMessage() {}

func (x *FinishJoinOfficialSpaceTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishJoinOfficialSpaceTaskReq.ProtoReflect.Descriptor instead.
func (*FinishJoinOfficialSpaceTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{37}
}

func (x *FinishJoinOfficialSpaceTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *FinishJoinOfficialSpaceTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type FinishJoinOfficialSpaceTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *FinishJoinOfficialSpaceTaskResp) Reset() {
	*x = FinishJoinOfficialSpaceTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishJoinOfficialSpaceTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishJoinOfficialSpaceTaskResp) ProtoMessage() {}

func (x *FinishJoinOfficialSpaceTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishJoinOfficialSpaceTaskResp.ProtoReflect.Descriptor instead.
func (*FinishJoinOfficialSpaceTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{38}
}

func (x *FinishJoinOfficialSpaceTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type IsFinishDailyChatNFTHeadWithNewUserTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChatUser    string `protobuf:"bytes,3,opt,name=ChatUser,proto3" json:"ChatUser,omitempty"`
}

func (x *IsFinishDailyChatNFTHeadWithNewUserTaskReq) Reset() {
	*x = IsFinishDailyChatNFTHeadWithNewUserTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsFinishDailyChatNFTHeadWithNewUserTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFinishDailyChatNFTHeadWithNewUserTaskReq) ProtoMessage() {}

func (x *IsFinishDailyChatNFTHeadWithNewUserTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFinishDailyChatNFTHeadWithNewUserTaskReq.ProtoReflect.Descriptor instead.
func (*IsFinishDailyChatNFTHeadWithNewUserTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{39}
}

func (x *IsFinishDailyChatNFTHeadWithNewUserTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *IsFinishDailyChatNFTHeadWithNewUserTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IsFinishDailyChatNFTHeadWithNewUserTaskReq) GetChatUser() string {
	if x != nil {
		return x.ChatUser
	}
	return ""
}

type IsFinishDailyChatNFTHeadWithNewUserTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	IsFinish   bool        `protobuf:"varint,2,opt,name=IsFinish,proto3" json:"IsFinish,omitempty"`
}

func (x *IsFinishDailyChatNFTHeadWithNewUserTaskResp) Reset() {
	*x = IsFinishDailyChatNFTHeadWithNewUserTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsFinishDailyChatNFTHeadWithNewUserTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFinishDailyChatNFTHeadWithNewUserTaskResp) ProtoMessage() {}

func (x *IsFinishDailyChatNFTHeadWithNewUserTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFinishDailyChatNFTHeadWithNewUserTaskResp.ProtoReflect.Descriptor instead.
func (*IsFinishDailyChatNFTHeadWithNewUserTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{40}
}

func (x *IsFinishDailyChatNFTHeadWithNewUserTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *IsFinishDailyChatNFTHeadWithNewUserTaskResp) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

type FinishDailyChatNFTHeadWithNewUserTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChatUser    string `protobuf:"bytes,3,opt,name=ChatUser,proto3" json:"ChatUser,omitempty"`
}

func (x *FinishDailyChatNFTHeadWithNewUserTaskReq) Reset() {
	*x = FinishDailyChatNFTHeadWithNewUserTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishDailyChatNFTHeadWithNewUserTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishDailyChatNFTHeadWithNewUserTaskReq) ProtoMessage() {}

func (x *FinishDailyChatNFTHeadWithNewUserTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishDailyChatNFTHeadWithNewUserTaskReq.ProtoReflect.Descriptor instead.
func (*FinishDailyChatNFTHeadWithNewUserTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{41}
}

func (x *FinishDailyChatNFTHeadWithNewUserTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *FinishDailyChatNFTHeadWithNewUserTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FinishDailyChatNFTHeadWithNewUserTaskReq) GetChatUser() string {
	if x != nil {
		return x.ChatUser
	}
	return ""
}

type FinishDailyChatNFTHeadWithNewUserTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *FinishDailyChatNFTHeadWithNewUserTaskResp) Reset() {
	*x = FinishDailyChatNFTHeadWithNewUserTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishDailyChatNFTHeadWithNewUserTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishDailyChatNFTHeadWithNewUserTaskResp) ProtoMessage() {}

func (x *FinishDailyChatNFTHeadWithNewUserTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishDailyChatNFTHeadWithNewUserTaskResp.ProtoReflect.Descriptor instead.
func (*FinishDailyChatNFTHeadWithNewUserTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{42}
}

func (x *FinishDailyChatNFTHeadWithNewUserTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChatUser    string `protobuf:"bytes,3,opt,name=ChatUser,proto3" json:"ChatUser,omitempty"`
}

func (x *IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq) Reset() {
	*x = IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq) ProtoMessage() {}

func (x *IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq.ProtoReflect.Descriptor instead.
func (*IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{43}
}

func (x *IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq) GetChatUser() string {
	if x != nil {
		return x.ChatUser
	}
	return ""
}

type IsFinishOfficialNFTHeadDailyChatWithNewUserTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	IsFinish   bool        `protobuf:"varint,2,opt,name=IsFinish,proto3" json:"IsFinish,omitempty"`
}

func (x *IsFinishOfficialNFTHeadDailyChatWithNewUserTaskResp) Reset() {
	*x = IsFinishOfficialNFTHeadDailyChatWithNewUserTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsFinishOfficialNFTHeadDailyChatWithNewUserTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFinishOfficialNFTHeadDailyChatWithNewUserTaskResp) ProtoMessage() {}

func (x *IsFinishOfficialNFTHeadDailyChatWithNewUserTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFinishOfficialNFTHeadDailyChatWithNewUserTaskResp.ProtoReflect.Descriptor instead.
func (*IsFinishOfficialNFTHeadDailyChatWithNewUserTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{44}
}

func (x *IsFinishOfficialNFTHeadDailyChatWithNewUserTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *IsFinishOfficialNFTHeadDailyChatWithNewUserTaskResp) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

type FinishOfficialNFTHeadDailyChatWithNewUserTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChatUser    string `protobuf:"bytes,3,opt,name=ChatUser,proto3" json:"ChatUser,omitempty"`
}

func (x *FinishOfficialNFTHeadDailyChatWithNewUserTaskReq) Reset() {
	*x = FinishOfficialNFTHeadDailyChatWithNewUserTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishOfficialNFTHeadDailyChatWithNewUserTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishOfficialNFTHeadDailyChatWithNewUserTaskReq) ProtoMessage() {}

func (x *FinishOfficialNFTHeadDailyChatWithNewUserTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishOfficialNFTHeadDailyChatWithNewUserTaskReq.ProtoReflect.Descriptor instead.
func (*FinishOfficialNFTHeadDailyChatWithNewUserTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{45}
}

func (x *FinishOfficialNFTHeadDailyChatWithNewUserTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *FinishOfficialNFTHeadDailyChatWithNewUserTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FinishOfficialNFTHeadDailyChatWithNewUserTaskReq) GetChatUser() string {
	if x != nil {
		return x.ChatUser
	}
	return ""
}

type FinishOfficialNFTHeadDailyChatWithNewUserTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *FinishOfficialNFTHeadDailyChatWithNewUserTaskResp) Reset() {
	*x = FinishOfficialNFTHeadDailyChatWithNewUserTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishOfficialNFTHeadDailyChatWithNewUserTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishOfficialNFTHeadDailyChatWithNewUserTaskResp) ProtoMessage() {}

func (x *FinishOfficialNFTHeadDailyChatWithNewUserTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishOfficialNFTHeadDailyChatWithNewUserTaskResp.ProtoReflect.Descriptor instead.
func (*FinishOfficialNFTHeadDailyChatWithNewUserTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{46}
}

func (x *FinishOfficialNFTHeadDailyChatWithNewUserTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type FinishUploadNftHeadTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *FinishUploadNftHeadTaskReq) Reset() {
	*x = FinishUploadNftHeadTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishUploadNftHeadTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishUploadNftHeadTaskReq) ProtoMessage() {}

func (x *FinishUploadNftHeadTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishUploadNftHeadTaskReq.ProtoReflect.Descriptor instead.
func (*FinishUploadNftHeadTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{47}
}

func (x *FinishUploadNftHeadTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *FinishUploadNftHeadTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type FinishUploadNftHeadTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *FinishUploadNftHeadTaskResp) Reset() {
	*x = FinishUploadNftHeadTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishUploadNftHeadTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishUploadNftHeadTaskResp) ProtoMessage() {}

func (x *FinishUploadNftHeadTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishUploadNftHeadTaskResp.ProtoReflect.Descriptor instead.
func (*FinishUploadNftHeadTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{48}
}

func (x *FinishUploadNftHeadTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type IsFinishUploadNftHeadTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *IsFinishUploadNftHeadTaskReq) Reset() {
	*x = IsFinishUploadNftHeadTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsFinishUploadNftHeadTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFinishUploadNftHeadTaskReq) ProtoMessage() {}

func (x *IsFinishUploadNftHeadTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFinishUploadNftHeadTaskReq.ProtoReflect.Descriptor instead.
func (*IsFinishUploadNftHeadTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{49}
}

func (x *IsFinishUploadNftHeadTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *IsFinishUploadNftHeadTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type IsFinishUploadNftHeadTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	IsFinish   bool        `protobuf:"varint,2,opt,name=IsFinish,proto3" json:"IsFinish,omitempty"`
}

func (x *IsFinishUploadNftHeadTaskResp) Reset() {
	*x = IsFinishUploadNftHeadTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsFinishUploadNftHeadTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFinishUploadNftHeadTaskResp) ProtoMessage() {}

func (x *IsFinishUploadNftHeadTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFinishUploadNftHeadTaskResp.ProtoReflect.Descriptor instead.
func (*IsFinishUploadNftHeadTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{50}
}

func (x *IsFinishUploadNftHeadTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *IsFinishUploadNftHeadTaskResp) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

type FinishOfficialNFTHeadTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *FinishOfficialNFTHeadTaskReq) Reset() {
	*x = FinishOfficialNFTHeadTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishOfficialNFTHeadTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishOfficialNFTHeadTaskReq) ProtoMessage() {}

func (x *FinishOfficialNFTHeadTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishOfficialNFTHeadTaskReq.ProtoReflect.Descriptor instead.
func (*FinishOfficialNFTHeadTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{51}
}

func (x *FinishOfficialNFTHeadTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *FinishOfficialNFTHeadTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type FinishOfficialNFTHeadTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *FinishOfficialNFTHeadTaskResp) Reset() {
	*x = FinishOfficialNFTHeadTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishOfficialNFTHeadTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishOfficialNFTHeadTaskResp) ProtoMessage() {}

func (x *FinishOfficialNFTHeadTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishOfficialNFTHeadTaskResp.ProtoReflect.Descriptor instead.
func (*FinishOfficialNFTHeadTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{52}
}

func (x *FinishOfficialNFTHeadTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type IsFinishOfficialNFTHeadTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *IsFinishOfficialNFTHeadTaskReq) Reset() {
	*x = IsFinishOfficialNFTHeadTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsFinishOfficialNFTHeadTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFinishOfficialNFTHeadTaskReq) ProtoMessage() {}

func (x *IsFinishOfficialNFTHeadTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFinishOfficialNFTHeadTaskReq.ProtoReflect.Descriptor instead.
func (*IsFinishOfficialNFTHeadTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{53}
}

func (x *IsFinishOfficialNFTHeadTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *IsFinishOfficialNFTHeadTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type IsFinishOfficialNFTHeadTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	IsFinish   bool        `protobuf:"varint,2,opt,name=IsFinish,proto3" json:"IsFinish,omitempty"`
}

func (x *IsFinishOfficialNFTHeadTaskResp) Reset() {
	*x = IsFinishOfficialNFTHeadTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsFinishOfficialNFTHeadTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFinishOfficialNFTHeadTaskResp) ProtoMessage() {}

func (x *IsFinishOfficialNFTHeadTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFinishOfficialNFTHeadTaskResp.ProtoReflect.Descriptor instead.
func (*IsFinishOfficialNFTHeadTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{54}
}

func (x *IsFinishOfficialNFTHeadTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *IsFinishOfficialNFTHeadTaskResp) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

type FinishCreateSpaceTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *FinishCreateSpaceTaskReq) Reset() {
	*x = FinishCreateSpaceTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishCreateSpaceTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishCreateSpaceTaskReq) ProtoMessage() {}

func (x *FinishCreateSpaceTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishCreateSpaceTaskReq.ProtoReflect.Descriptor instead.
func (*FinishCreateSpaceTaskReq) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{55}
}

func (x *FinishCreateSpaceTaskReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *FinishCreateSpaceTaskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type FinishCreateSpaceTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *FinishCreateSpaceTaskResp) Reset() {
	*x = FinishCreateSpaceTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_task_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishCreateSpaceTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishCreateSpaceTaskResp) ProtoMessage() {}

func (x *FinishCreateSpaceTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_task_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishCreateSpaceTaskResp.ProtoReflect.Descriptor instead.
func (*FinishCreateSpaceTaskResp) Descriptor() ([]byte, []int) {
	return file_task_task_proto_rawDescGZIP(), []int{56}
}

func (x *FinishCreateSpaceTaskResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

var File_task_task_proto protoreflect.FileDescriptor

var file_task_task_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x3e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x6a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a,
	0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x79, 0x22, 0x6b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xd6, 0x01, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x61, 0x73,
	0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x9c, 0x03, 0x0a, 0x04, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x13, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x22, 0x48, 0x0a, 0x14, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x59, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4e, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x22, 0x63, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a,
	0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x1e, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x6b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54,
	0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x70, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x61, 0x73, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6a,
	0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x73, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x17, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x72, 0x0a, 0x22, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a,
	0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x22, 0x57, 0x0a, 0x23, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x4b, 0x0a, 0x0f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x44, 0x0a, 0x10, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5f, 0x0a, 0x23, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x20,
	0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x24, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x55, 0x0a, 0x19, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x4e, 0x66, 0x74, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x1a, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x66, 0x74, 0x48, 0x65, 0x61, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x54, 0x0a, 0x18, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x4d, 0x0a, 0x19, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x57,
	0x0a, 0x1b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e,
	0x46, 0x54, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a,
	0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x1c, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x46, 0x54, 0x48, 0x65, 0x61, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x84, 0x01, 0x0a, 0x28, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x5d, 0x0a, 0x29, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a,
	0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x7c, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x66, 0x74, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x55, 0x0a,
	0x21, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x4e, 0x66, 0x74, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x7a, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x53, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x42, 0x69, 0x6e, 0x64, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x54, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x42,
	0x69, 0x6e, 0x64, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x19, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5e, 0x0a, 0x22, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x23, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x5a, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4a, 0x6f, 0x69,
	0x6e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x53, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x82, 0x01, 0x0a, 0x2a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x46, 0x54, 0x48, 0x65, 0x61,
	0x64, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x22, 0x7b, 0x0a, 0x2b, 0x49, 0x73, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x46,
	0x54, 0x48, 0x65, 0x61, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22, 0x80, 0x01, 0x0a, 0x28, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x46, 0x54, 0x48, 0x65, 0x61,
	0x64, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x22, 0x5d, 0x0a, 0x29, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x46, 0x54, 0x48,
	0x65, 0x61, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8a, 0x01, 0x0a, 0x32, 0x49, 0x73, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x46, 0x54,
	0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x68, 0x61,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x68, 0x61,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x33, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x46, 0x54, 0x48, 0x65, 0x61,
	0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65,
	0x77, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a,
	0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22, 0x88, 0x01, 0x0a, 0x30,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x46,
	0x54, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x68,
	0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x68,
	0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x22, 0x65, 0x0a, 0x31, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x46, 0x54, 0x48, 0x65, 0x61, 0x64, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x77, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x56, 0x0a,
	0x1a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x66, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x66, 0x74, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x58, 0x0a, 0x1c, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x66, 0x74, 0x48, 0x65, 0x61, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x6d, 0x0a, 0x1d, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x4e, 0x66, 0x74, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22,
	0x58, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x4e, 0x46, 0x54, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x1d, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x46, 0x54, 0x48, 0x65,
	0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5a, 0x0a, 0x1e,
	0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x4e, 0x46, 0x54, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x20,
	0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x1f, 0x49, 0x73, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x46, 0x54, 0x48,
	0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22, 0x54, 0x0a, 0x18, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x4d, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x32, 0xc1,
	0x14, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x13, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x1a, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54,
	0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x49, 0x0a, 0x10, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x19, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a,
	0x0c, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x12, 0x15, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x8e, 0x01, 0x0a,
	0x27, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68,
	0x61, 0x74, 0x4e, 0x46, 0x54, 0x48, 0x65, 0x61, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x30, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61,
	0x74, 0x4e, 0x46, 0x54, 0x48, 0x65, 0x61, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x77, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43,
	0x68, 0x61, 0x74, 0x4e, 0x46, 0x54, 0x48, 0x65, 0x61, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65,
	0x77, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x88, 0x01,
	0x0a, 0x25, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61,
	0x74, 0x4e, 0x46, 0x54, 0x48, 0x65, 0x61, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x77, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x46,
	0x54, 0x48, 0x65, 0x61, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x46,
	0x54, 0x48, 0x65, 0x61, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0xa6, 0x01, 0x0a, 0x2f, 0x49, 0x73, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x46, 0x54,
	0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x38, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x4e, 0x46, 0x54, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x43, 0x68, 0x61, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x39, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x49, 0x73,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x46,
	0x54, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x12, 0xa0, 0x01, 0x0a, 0x2d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x4e, 0x46, 0x54, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x43, 0x68, 0x61, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x36, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x46, 0x54, 0x48, 0x65, 0x61, 0x64,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x37, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x4e, 0x46, 0x54, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x5e, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x66, 0x74, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x20, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x4e, 0x66, 0x74, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x1a, 0x21, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x66, 0x74, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x64, 0x0a, 0x19, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x66, 0x74, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x22, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x66, 0x74, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x49, 0x73, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x66, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x64, 0x0a, 0x19, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x46, 0x54, 0x48,
	0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x22, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x46, 0x54,
	0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x4e, 0x46, 0x54, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x6a, 0x0a, 0x1b, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x4e, 0x46, 0x54, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x24, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x46, 0x54, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x49, 0x73, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x46, 0x54,
	0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x15,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6a, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x76, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x28, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a,
	0x29, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x15, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x6a, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x77, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x42, 0x69, 0x6e,
	0x64, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x70, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x66, 0x74, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x26, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x66, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x4e, 0x66, 0x74, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x88, 0x01, 0x0a, 0x25, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2e, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a,
	0x18, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x46,
	0x54, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x46,
	0x54, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x4e, 0x46, 0x54, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x58, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x79, 0x0a, 0x20, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x29,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4a, 0x6f, 0x69, 0x6e,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5b, 0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x66, 0x74, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x1f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x4e, 0x66, 0x74, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x1a, 0x20, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x4e, 0x66, 0x74, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x42, 0x1f, 0x5a, 0x1d, 0x4f, 0x70, 0x65, 0x6e, 0x5f, 0x49, 0x4d, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x3b, 0x70, 0x62, 0x54,
	0x61, 0x73, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_task_task_proto_rawDescOnce sync.Once
	file_task_task_proto_rawDescData = file_task_task_proto_rawDesc
)

func file_task_task_proto_rawDescGZIP() []byte {
	file_task_task_proto_rawDescOnce.Do(func() {
		file_task_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_task_task_proto_rawDescData)
	})
	return file_task_task_proto_rawDescData
}

var file_task_task_proto_msgTypes = make([]protoimpl.MessageInfo, 57)
var file_task_task_proto_goTypes = []interface{}{
	(*CommonResp)(nil),                                          // 0: task.CommonResp
	(*GetUserTaskListReq)(nil),                                  // 1: task.GetUserTaskListReq
	(*GetUserTaskListResp)(nil),                                 // 2: task.GetUserTaskListResp
	(*UserTask)(nil),                                            // 3: task.UserTask
	(*Task)(nil),                                                // 4: task.Task
	(*ClaimTaskRewardsReq)(nil),                                 // 5: task.ClaimTaskRewardsReq
	(*ClaimTaskRewardsResp)(nil),                                // 6: task.ClaimTaskRewardsResp
	(*CreateTaskReq)(nil),                                       // 7: task.CreateTaskReq
	(*CreateTaskResp)(nil),                                      // 8: task.CreateTaskResp
	(*GetTaskListReq)(nil),                                      // 9: task.GetTaskListReq
	(*GetTaskListResp)(nil),                                     // 10: task.GetTaskListResp
	(*GetUserClaimTaskListReq)(nil),                             // 11: task.GetUserClaimTaskListReq
	(*GetUserClaimTaskListResp)(nil),                            // 12: task.GetUserClaimTaskListResp
	(*CheckTaskIsFinishedReq)(nil),                              // 13: task.CheckTaskIsFinishedReq
	(*CheckTaskIsFinishedResp)(nil),                             // 14: task.CheckTaskIsFinishedResp
	(*IncreaseProgressCreateSpaceTaskReq)(nil),                  // 15: task.IncreaseProgressCreateSpaceTaskReq
	(*IncreaseProgressCreateSpaceTaskResp)(nil),                 // 16: task.IncreaseProgressCreateSpaceTaskResp
	(*DailyCheckInReq)(nil),                                     // 17: task.DailyCheckInReq
	(*DailyCheckInResp)(nil),                                    // 18: task.DailyCheckInResp
	(*CancelClaimJoinOfficialSpaceTaskReq)(nil),                 // 19: task.CancelClaimJoinOfficialSpaceTaskReq
	(*CancelClaimJoinOfficialSpaceTaskResp)(nil),                // 20: task.CancelClaimJoinOfficialSpaceTaskResp
	(*CloseUploadNftHeadTaskReq)(nil),                           // 21: task.CloseUploadNftHeadTaskReq
	(*CloseUploadNftHeadTaskResp)(nil),                          // 22: task.CloseUploadNftHeadTaskResp
	(*CancelCreateSpaceTaskReq)(nil),                            // 23: task.CancelCreateSpaceTaskReq
	(*CancelCreateSpaceTaskResp)(nil),                           // 24: task.CancelCreateSpaceTaskResp
	(*CloseOfficialNFTHeadTaskReq)(nil),                         // 25: task.CloseOfficialNFTHeadTaskReq
	(*CloseOfficialNFTHeadTaskResp)(nil),                        // 26: task.CloseOfficialNFTHeadTaskResp
	(*FinishInviteFollowOfficialTwitterTaskReq)(nil),            // 27: task.FinishInviteFollowOfficialTwitterTaskReq
	(*FinishInviteFollowOfficialTwitterTaskResp)(nil),           // 28: task.FinishInviteFollowOfficialTwitterTaskResp
	(*FinishInviteUploadNftHeadTaskReq)(nil),                    // 29: task.FinishInviteUploadNftHeadTaskReq
	(*FinishInviteUploadNftHeadTaskResp)(nil),                   // 30: task.FinishInviteUploadNftHeadTaskResp
	(*FinishInviteBindTwitterTaskReq)(nil),                      // 31: task.FinishInviteBindTwitterTaskReq
	(*FinishInviteBindTwitterTaskResp)(nil),                     // 32: task.FinishInviteBindTwitterTaskResp
	(*FinishBindTwitterTaskReq)(nil),                            // 33: task.FinishBindTwitterTaskReq
	(*FinishBindTwitterTaskResp)(nil),                           // 34: task.FinishBindTwitterTaskResp
	(*FinishFollowOfficialTwitterTaskReq)(nil),                  // 35: task.FinishFollowOfficialTwitterTaskReq
	(*FinishFollowOfficialTwitterTaskResp)(nil),                 // 36: task.FinishFollowOfficialTwitterTaskResp
	(*FinishJoinOfficialSpaceTaskReq)(nil),                      // 37: task.FinishJoinOfficialSpaceTaskReq
	(*FinishJoinOfficialSpaceTaskResp)(nil),                     // 38: task.FinishJoinOfficialSpaceTaskResp
	(*IsFinishDailyChatNFTHeadWithNewUserTaskReq)(nil),          // 39: task.IsFinishDailyChatNFTHeadWithNewUserTaskReq
	(*IsFinishDailyChatNFTHeadWithNewUserTaskResp)(nil),         // 40: task.IsFinishDailyChatNFTHeadWithNewUserTaskResp
	(*FinishDailyChatNFTHeadWithNewUserTaskReq)(nil),            // 41: task.FinishDailyChatNFTHeadWithNewUserTaskReq
	(*FinishDailyChatNFTHeadWithNewUserTaskResp)(nil),           // 42: task.FinishDailyChatNFTHeadWithNewUserTaskResp
	(*IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq)(nil),  // 43: task.IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq
	(*IsFinishOfficialNFTHeadDailyChatWithNewUserTaskResp)(nil), // 44: task.IsFinishOfficialNFTHeadDailyChatWithNewUserTaskResp
	(*FinishOfficialNFTHeadDailyChatWithNewUserTaskReq)(nil),    // 45: task.FinishOfficialNFTHeadDailyChatWithNewUserTaskReq
	(*FinishOfficialNFTHeadDailyChatWithNewUserTaskResp)(nil),   // 46: task.FinishOfficialNFTHeadDailyChatWithNewUserTaskResp
	(*FinishUploadNftHeadTaskReq)(nil),                          // 47: task.FinishUploadNftHeadTaskReq
	(*FinishUploadNftHeadTaskResp)(nil),                         // 48: task.FinishUploadNftHeadTaskResp
	(*IsFinishUploadNftHeadTaskReq)(nil),                        // 49: task.IsFinishUploadNftHeadTaskReq
	(*IsFinishUploadNftHeadTaskResp)(nil),                       // 50: task.IsFinishUploadNftHeadTaskResp
	(*FinishOfficialNFTHeadTaskReq)(nil),                        // 51: task.FinishOfficialNFTHeadTaskReq
	(*FinishOfficialNFTHeadTaskResp)(nil),                       // 52: task.FinishOfficialNFTHeadTaskResp
	(*IsFinishOfficialNFTHeadTaskReq)(nil),                      // 53: task.IsFinishOfficialNFTHeadTaskReq
	(*IsFinishOfficialNFTHeadTaskResp)(nil),                     // 54: task.IsFinishOfficialNFTHeadTaskResp
	(*FinishCreateSpaceTaskReq)(nil),                            // 55: task.FinishCreateSpaceTaskReq
	(*FinishCreateSpaceTaskResp)(nil),                           // 56: task.FinishCreateSpaceTaskResp
}
var file_task_task_proto_depIdxs = []int32{
	0,  // 0: task.GetUserTaskListResp.CommonResp:type_name -> task.CommonResp
	3,  // 1: task.GetUserTaskListResp.Data:type_name -> task.UserTask
	4,  // 2: task.UserTask.Task:type_name -> task.Task
	0,  // 3: task.ClaimTaskRewardsResp.CommonResp:type_name -> task.CommonResp
	4,  // 4: task.CreateTaskReq.TaskList:type_name -> task.Task
	0,  // 5: task.CreateTaskResp.CommonResp:type_name -> task.CommonResp
	0,  // 6: task.GetTaskListResp.CommonResp:type_name -> task.CommonResp
	4,  // 7: task.GetTaskListResp.Data:type_name -> task.Task
	0,  // 8: task.GetUserClaimTaskListResp.CommonResp:type_name -> task.CommonResp
	3,  // 9: task.GetUserClaimTaskListResp.Data:type_name -> task.UserTask
	0,  // 10: task.CheckTaskIsFinishedResp.CommonResp:type_name -> task.CommonResp
	0,  // 11: task.IncreaseProgressCreateSpaceTaskResp.CommonResp:type_name -> task.CommonResp
	0,  // 12: task.DailyCheckInResp.CommonResp:type_name -> task.CommonResp
	0,  // 13: task.CancelClaimJoinOfficialSpaceTaskResp.CommonResp:type_name -> task.CommonResp
	0,  // 14: task.CloseUploadNftHeadTaskResp.CommonResp:type_name -> task.CommonResp
	0,  // 15: task.CancelCreateSpaceTaskResp.CommonResp:type_name -> task.CommonResp
	0,  // 16: task.CloseOfficialNFTHeadTaskResp.CommonResp:type_name -> task.CommonResp
	0,  // 17: task.FinishInviteFollowOfficialTwitterTaskResp.CommonResp:type_name -> task.CommonResp
	0,  // 18: task.FinishInviteUploadNftHeadTaskResp.CommonResp:type_name -> task.CommonResp
	0,  // 19: task.FinishInviteBindTwitterTaskResp.CommonResp:type_name -> task.CommonResp
	0,  // 20: task.FinishBindTwitterTaskResp.CommonResp:type_name -> task.CommonResp
	0,  // 21: task.FinishFollowOfficialTwitterTaskResp.CommonResp:type_name -> task.CommonResp
	0,  // 22: task.FinishJoinOfficialSpaceTaskResp.CommonResp:type_name -> task.CommonResp
	0,  // 23: task.IsFinishDailyChatNFTHeadWithNewUserTaskResp.CommonResp:type_name -> task.CommonResp
	0,  // 24: task.FinishDailyChatNFTHeadWithNewUserTaskResp.CommonResp:type_name -> task.CommonResp
	0,  // 25: task.IsFinishOfficialNFTHeadDailyChatWithNewUserTaskResp.CommonResp:type_name -> task.CommonResp
	0,  // 26: task.FinishOfficialNFTHeadDailyChatWithNewUserTaskResp.CommonResp:type_name -> task.CommonResp
	0,  // 27: task.FinishUploadNftHeadTaskResp.CommonResp:type_name -> task.CommonResp
	0,  // 28: task.IsFinishUploadNftHeadTaskResp.CommonResp:type_name -> task.CommonResp
	0,  // 29: task.FinishOfficialNFTHeadTaskResp.CommonResp:type_name -> task.CommonResp
	0,  // 30: task.IsFinishOfficialNFTHeadTaskResp.CommonResp:type_name -> task.CommonResp
	0,  // 31: task.FinishCreateSpaceTaskResp.CommonResp:type_name -> task.CommonResp
	7,  // 32: task.taskService.CreateTask:input_type -> task.CreateTaskReq
	9,  // 33: task.taskService.GetTaskList:input_type -> task.GetTaskListReq
	11, // 34: task.taskService.GetUserClaimTaskList:input_type -> task.GetUserClaimTaskListReq
	1,  // 35: task.taskService.GetUserTaskList:input_type -> task.GetUserTaskListReq
	5,  // 36: task.taskService.ClaimTaskRewards:input_type -> task.ClaimTaskRewardsReq
	17, // 37: task.taskService.DailyCheckIn:input_type -> task.DailyCheckInReq
	39, // 38: task.taskService.IsFinishDailyChatNFTHeadWithNewUserTask:input_type -> task.IsFinishDailyChatNFTHeadWithNewUserTaskReq
	41, // 39: task.taskService.FinishDailyChatNFTHeadWithNewUserTask:input_type -> task.FinishDailyChatNFTHeadWithNewUserTaskReq
	43, // 40: task.taskService.IsFinishOfficialNFTHeadDailyChatWithNewUserTask:input_type -> task.IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq
	45, // 41: task.taskService.FinishOfficialNFTHeadDailyChatWithNewUserTask:input_type -> task.FinishOfficialNFTHeadDailyChatWithNewUserTaskReq
	47, // 42: task.taskService.FinishUploadNftHeadTask:input_type -> task.FinishUploadNftHeadTaskReq
	49, // 43: task.taskService.IsFinishUploadNftHeadTask:input_type -> task.IsFinishUploadNftHeadTaskReq
	51, // 44: task.taskService.FinishOfficialNFTHeadTask:input_type -> task.FinishOfficialNFTHeadTaskReq
	53, // 45: task.taskService.IsFinishOfficialNFTHeadTask:input_type -> task.IsFinishOfficialNFTHeadTaskReq
	55, // 46: task.taskService.FinishCreateSpaceTask:input_type -> task.FinishCreateSpaceTaskReq
	37, // 47: task.taskService.FinishJoinOfficialSpaceTask:input_type -> task.FinishJoinOfficialSpaceTaskReq
	35, // 48: task.taskService.FinishFollowOfficialTwitterTask:input_type -> task.FinishFollowOfficialTwitterTaskReq
	33, // 49: task.taskService.FinishBindTwitterTask:input_type -> task.FinishBindTwitterTaskReq
	31, // 50: task.taskService.FinishInviteBindTwitterTask:input_type -> task.FinishInviteBindTwitterTaskReq
	29, // 51: task.taskService.FinishInviteUploadNftHeadTask:input_type -> task.FinishInviteUploadNftHeadTaskReq
	27, // 52: task.taskService.FinishInviteFollowOfficialTwitterTask:input_type -> task.FinishInviteFollowOfficialTwitterTaskReq
	25, // 53: task.taskService.CloseOfficialNFTHeadTask:input_type -> task.CloseOfficialNFTHeadTaskReq
	23, // 54: task.taskService.CancelCreateSpaceTask:input_type -> task.CancelCreateSpaceTaskReq
	19, // 55: task.taskService.CancelClaimJoinOfficialSpaceTask:input_type -> task.CancelClaimJoinOfficialSpaceTaskReq
	21, // 56: task.taskService.CloseUploadNftHeadTask:input_type -> task.CloseUploadNftHeadTaskReq
	8,  // 57: task.taskService.CreateTask:output_type -> task.CreateTaskResp
	10, // 58: task.taskService.GetTaskList:output_type -> task.GetTaskListResp
	12, // 59: task.taskService.GetUserClaimTaskList:output_type -> task.GetUserClaimTaskListResp
	2,  // 60: task.taskService.GetUserTaskList:output_type -> task.GetUserTaskListResp
	6,  // 61: task.taskService.ClaimTaskRewards:output_type -> task.ClaimTaskRewardsResp
	18, // 62: task.taskService.DailyCheckIn:output_type -> task.DailyCheckInResp
	40, // 63: task.taskService.IsFinishDailyChatNFTHeadWithNewUserTask:output_type -> task.IsFinishDailyChatNFTHeadWithNewUserTaskResp
	42, // 64: task.taskService.FinishDailyChatNFTHeadWithNewUserTask:output_type -> task.FinishDailyChatNFTHeadWithNewUserTaskResp
	44, // 65: task.taskService.IsFinishOfficialNFTHeadDailyChatWithNewUserTask:output_type -> task.IsFinishOfficialNFTHeadDailyChatWithNewUserTaskResp
	46, // 66: task.taskService.FinishOfficialNFTHeadDailyChatWithNewUserTask:output_type -> task.FinishOfficialNFTHeadDailyChatWithNewUserTaskResp
	48, // 67: task.taskService.FinishUploadNftHeadTask:output_type -> task.FinishUploadNftHeadTaskResp
	50, // 68: task.taskService.IsFinishUploadNftHeadTask:output_type -> task.IsFinishUploadNftHeadTaskResp
	52, // 69: task.taskService.FinishOfficialNFTHeadTask:output_type -> task.FinishOfficialNFTHeadTaskResp
	54, // 70: task.taskService.IsFinishOfficialNFTHeadTask:output_type -> task.IsFinishOfficialNFTHeadTaskResp
	56, // 71: task.taskService.FinishCreateSpaceTask:output_type -> task.FinishCreateSpaceTaskResp
	38, // 72: task.taskService.FinishJoinOfficialSpaceTask:output_type -> task.FinishJoinOfficialSpaceTaskResp
	36, // 73: task.taskService.FinishFollowOfficialTwitterTask:output_type -> task.FinishFollowOfficialTwitterTaskResp
	34, // 74: task.taskService.FinishBindTwitterTask:output_type -> task.FinishBindTwitterTaskResp
	32, // 75: task.taskService.FinishInviteBindTwitterTask:output_type -> task.FinishInviteBindTwitterTaskResp
	30, // 76: task.taskService.FinishInviteUploadNftHeadTask:output_type -> task.FinishInviteUploadNftHeadTaskResp
	28, // 77: task.taskService.FinishInviteFollowOfficialTwitterTask:output_type -> task.FinishInviteFollowOfficialTwitterTaskResp
	26, // 78: task.taskService.CloseOfficialNFTHeadTask:output_type -> task.CloseOfficialNFTHeadTaskResp
	24, // 79: task.taskService.CancelCreateSpaceTask:output_type -> task.CancelCreateSpaceTaskResp
	20, // 80: task.taskService.CancelClaimJoinOfficialSpaceTask:output_type -> task.CancelClaimJoinOfficialSpaceTaskResp
	22, // 81: task.taskService.CloseUploadNftHeadTask:output_type -> task.CloseUploadNftHeadTaskResp
	57, // [57:82] is the sub-list for method output_type
	32, // [32:57] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_task_task_proto_init() }
func file_task_task_proto_init() {
	if File_task_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_task_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserTaskListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserTaskListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimTaskRewardsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimTaskRewardsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserClaimTaskListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserClaimTaskListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTaskIsFinishedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTaskIsFinishedResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncreaseProgressCreateSpaceTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncreaseProgressCreateSpaceTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyCheckInReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyCheckInResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelClaimJoinOfficialSpaceTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelClaimJoinOfficialSpaceTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseUploadNftHeadTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseUploadNftHeadTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelCreateSpaceTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelCreateSpaceTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseOfficialNFTHeadTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseOfficialNFTHeadTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishInviteFollowOfficialTwitterTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishInviteFollowOfficialTwitterTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishInviteUploadNftHeadTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishInviteUploadNftHeadTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishInviteBindTwitterTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishInviteBindTwitterTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishBindTwitterTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishBindTwitterTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishFollowOfficialTwitterTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishFollowOfficialTwitterTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishJoinOfficialSpaceTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishJoinOfficialSpaceTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsFinishDailyChatNFTHeadWithNewUserTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsFinishDailyChatNFTHeadWithNewUserTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishDailyChatNFTHeadWithNewUserTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishDailyChatNFTHeadWithNewUserTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsFinishOfficialNFTHeadDailyChatWithNewUserTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsFinishOfficialNFTHeadDailyChatWithNewUserTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishOfficialNFTHeadDailyChatWithNewUserTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishOfficialNFTHeadDailyChatWithNewUserTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishUploadNftHeadTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishUploadNftHeadTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsFinishUploadNftHeadTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsFinishUploadNftHeadTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishOfficialNFTHeadTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishOfficialNFTHeadTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsFinishOfficialNFTHeadTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsFinishOfficialNFTHeadTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishCreateSpaceTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_task_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishCreateSpaceTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_task_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   57,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_task_task_proto_goTypes,
		DependencyIndexes: file_task_task_proto_depIdxs,
		MessageInfos:      file_task_task_proto_msgTypes,
	}.Build()
	File_task_task_proto = out.File
	file_task_task_proto_rawDesc = nil
	file_task_task_proto_goTypes = nil
	file_task_task_proto_depIdxs = nil
}
